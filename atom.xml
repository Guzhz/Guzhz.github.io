<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Guzhz&#39;s House</title>
  
  <subtitle>Simply to do something.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-04T07:09:16.221Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Guzhz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VUE学习（八）：axios使用</title>
    <link href="http://yoursite.com/2020/08/04/VUE%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9Aaxios%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/08/04/VUE学习（八）：axios使用/</id>
    <published>2020-08-04T08:49:04.922Z</published>
    <updated>2020-08-04T07:09:16.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios：网络请求"><a href="#axios：网络请求" class="headerlink" title="axios：网络请求"></a>axios：网络请求</h1><h4 id="1、安装：npm-install-axios-–save"><a href="#1、安装：npm-install-axios-–save" class="headerlink" title="1、安装：npm install axios –save"></a>1、安装：npm install axios –save</h4><h4 id="2、基本使用"><a href="#2、基本使用" class="headerlink" title="2、基本使用"></a>2、基本使用</h4><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span>axios(&#123;<span class="hljs-comment">//没有参数</span>  <span class="hljs-comment">//httpbin.org</span>  url: <span class="hljs-string">'http://152.136.185.210:8000/api/z8/home/multidata'</span>,  <span class="hljs-attr">method</span>: <span class="hljs-string">'get'</span> <span class="hljs-comment">//默认是post</span>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span>&#123;  <span class="hljs-built_in">console</span>.log(res)&#125;)axios(&#123;  <span class="hljs-attr">url</span>: <span class="hljs-string">'http://152.136.185.210:8000/api/z8/home/data'</span>,  <span class="hljs-attr">params</span>: &#123;<span class="hljs-comment">//有参数</span>    type: <span class="hljs-string">'pop'</span>,    <span class="hljs-attr">page</span>: <span class="hljs-number">1</span>  &#125;&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;  <span class="hljs-built_in">console</span>.log(res)&#125;)</code></pre><h4 id="3、并发请求（改使用全局配置）"><a href="#3、并发请求（改使用全局配置）" class="headerlink" title="3、并发请求（改使用全局配置）"></a>3、并发请求（改使用全局配置）</h4><pre><code class="hljs JavaScript">axios.defaults.baseURL = <span class="hljs-string">'http://152.136.185.210:8000/api/z8'</span>axios.defaults.timeout = <span class="hljs-number">5000</span><span class="hljs-comment">// 2.axios并发请求</span>axios.all([axios(&#123;<span class="hljs-comment">//axios.all()</span>  url: <span class="hljs-string">'/home/multidata'</span>&#125;), axios(&#123;  <span class="hljs-attr">url</span>: <span class="hljs-string">'/home/data'</span>,  <span class="hljs-attr">params</span>: &#123;    <span class="hljs-attr">type</span>: <span class="hljs-string">'pop'</span>,    <span class="hljs-attr">page</span>: <span class="hljs-number">4</span>  &#125;&#125;)])  <span class="hljs-comment">// .then(results =&gt; &#123;</span>  <span class="hljs-comment">//   console.log(results[0]);</span>  <span class="hljs-comment">//   console.log(results[1]);</span>  <span class="hljs-comment">// &#125;)</span>  <span class="hljs-comment">// 另一种写法</span>  .then(axios.spread(<span class="hljs-function">(<span class="hljs-params">res1, res2</span>) =&gt;</span> &#123;    <span class="hljs-built_in">console</span>.log(res1);    <span class="hljs-built_in">console</span>.log(res2);  &#125;))</code></pre><h4 id="4、创建独立实例（解决多个全局配置问题）"><a href="#4、创建独立实例（解决多个全局配置问题）" class="headerlink" title="4、创建独立实例（解决多个全局配置问题）"></a>4、创建独立实例（解决多个全局配置问题）</h4><pre><code class="hljs javascript"><span class="hljs-comment">//创建实例并配置全局</span><span class="hljs-keyword">const</span> instance1 = axios.create(&#123;  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">'http://152.136.185.210:8000/api/z8'</span>,  <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>&#125;)<span class="hljs-comment">//使用实例</span>instance1(&#123;  <span class="hljs-attr">url</span>: <span class="hljs-string">'/home/multidata'</span>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;  <span class="hljs-built_in">console</span>.log(res);&#125;)<span class="hljs-comment">//使用实例</span>instance1(&#123;  <span class="hljs-attr">url</span>: <span class="hljs-string">'/home/data'</span>,  <span class="hljs-attr">params</span>: &#123;    <span class="hljs-attr">type</span>: <span class="hljs-string">'pop'</span>,    <span class="hljs-attr">page</span>: <span class="hljs-number">1</span>  &#125;&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;  <span class="hljs-built_in">console</span>.log(res);&#125;)</code></pre><h4 id="5、封装模块"><a href="#5、封装模块" class="headerlink" title="5、封装模块"></a>5、封装模块</h4><p>network -&gt; request.js</p><h5 id="方法一：回调函数方式（config-success-failure）"><a href="#方法一：回调函数方式（config-success-failure）" class="headerlink" title="方法一：回调函数方式（config, success, failure）"></a>方法一：回调函数方式（config, success, failure）</h5><pre><code class="hljs JavaScript"><span class="hljs-comment">//request.js</span><span class="hljs-comment">//导出实例，为了保证拓展性，就不使用default</span><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">config, success, failure</span>) </span>&#123;  <span class="hljs-comment">//1、创建实例</span>  <span class="hljs-keyword">const</span> instance = axios.create(&#123;    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">'http://152.136.185.210:8000/api/z8'</span>,    <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>  &#125;)    <span class="hljs-comment">//2、真正发送网络请求，config为请求的数据</span>  instance(config)        .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;     success(res)   &#125;)   .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;     failure(err)   &#125;)&#125;<span class="hljs-comment">//使用</span><span class="hljs-keyword">import</span> &#123;request&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"./network/request"</span>; request(&#123;  <span class="hljs-attr">url</span>: <span class="hljs-string">'/home/multidata'</span>&#125;, res =&gt; &#123;  <span class="hljs-built_in">console</span>.log(res);&#125;, err =&gt; &#123;  <span class="hljs-built_in">console</span>.log(err);&#125;)</code></pre><h5 id="方法二：回调函数方式（config）-gt-baseConfig-function-function"><a href="#方法二：回调函数方式（config）-gt-baseConfig-function-function" class="headerlink" title="方法二：回调函数方式（config） -&gt; (baseConfig, function(),function)"></a>方法二：回调函数方式（config） -&gt; (baseConfig, function(),function)</h5><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">config</span>) </span>&#123;  <span class="hljs-comment">//1、创建实例</span>  <span class="hljs-keyword">const</span> instance = axios.create(&#123;    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">'http://152.136.185.210:8000/api/z8'</span>,    <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>  &#125;)  <span class="hljs-comment">//2、真正发送网络请求，config为请求的数据</span>  instance(config.baseConfig)    .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;      config.success(res)    &#125;)    .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;      config.failure(err)    &#125;)&#125;<span class="hljs-comment">//使用</span><span class="hljs-keyword">import</span> &#123;request&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"./network/request"</span>;request(&#123;  <span class="hljs-attr">baseConfig</span>: &#123;    <span class="hljs-attr">url</span>: <span class="hljs-string">'/home/multidata'</span>  &#125;,  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(res);  &#125;,  <span class="hljs-attr">failure</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(err);  &#125;&#125;)</code></pre><h5 id="方法三：使用Promise方式"><a href="#方法三：使用Promise方式" class="headerlink" title="方法三：使用Promise方式"></a>方法三：使用Promise方式</h5><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">config</span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;    <span class="hljs-keyword">const</span> instance = axios.create(&#123;      <span class="hljs-attr">baseURL</span>: <span class="hljs-string">'http://152.136.185.210:8000/api/z8'</span>,      <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>    &#125;)    instance(config)      .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;        resolve(res)      &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;        reject(err)    &#125;)  &#125;)&#125;<span class="hljs-comment">//使用</span><span class="hljs-keyword">import</span> &#123;request&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"./network/request"</span>;request(&#123;  <span class="hljs-attr">url</span>: <span class="hljs-string">'/home/multidata'</span>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;  <span class="hljs-built_in">console</span>.log(res);&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;  <span class="hljs-built_in">console</span>.log(err);&#125;)</code></pre><h5 id="方法四：优化Promise方式"><a href="#方法四：优化Promise方式" class="headerlink" title="方法四：优化Promise方式"></a>方法四：优化Promise方式</h5><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">config</span>) </span>&#123;  <span class="hljs-keyword">const</span> instance = axios.create(&#123;    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">'http://152.136.185.210:8000/api/z8'</span>,    <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>  &#125;)  <span class="hljs-keyword">return</span> instance(config)<span class="hljs-comment">//因为本身返回的就是Promise</span>&#125;<span class="hljs-comment">//使用</span><span class="hljs-keyword">import</span> &#123;request&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"./network/request"</span>;request(&#123;  <span class="hljs-attr">url</span>: <span class="hljs-string">'/home/multidata'</span>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;  <span class="hljs-built_in">console</span>.log(res);&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;  <span class="hljs-built_in">console</span>.log(err);&#125;)</code></pre><h4 id="6、拦截器的使用"><a href="#6、拦截器的使用" class="headerlink" title="6、拦截器的使用"></a>6、拦截器的使用</h4><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">config</span>) </span>&#123;  <span class="hljs-keyword">const</span> instance = axios.create(&#123;    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">'http://152.136.185.210:8000/api/z8'</span>,    <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>  &#125;)  <span class="hljs-comment">//axios请求拦截</span>  <span class="hljs-comment">//一般拦截：不符合服务器的要求的信息需要修改、在界面中显示请求图标结束后取消掉、某些请求需要特殊信息token</span>  instance.interceptors.request.use(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;    <span class="hljs-built_in">console</span>.log(config);   <span class="hljs-comment">//成功走这里</span>    <span class="hljs-keyword">return</span> config   <span class="hljs-comment">//一定要放行</span>  &#125;, err =&gt; &#123;    <span class="hljs-comment">//失败走这里，一般不会走这里</span>    <span class="hljs-built_in">console</span>.log(err);  &#125;)  <span class="hljs-comment">//响应拦截</span>  instance.interceptors.response.use(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;    <span class="hljs-built_in">console</span>.log(res);    <span class="hljs-keyword">return</span> res.data   <span class="hljs-comment">//只需要取出data</span>  &#125;, err =&gt; &#123;    <span class="hljs-built_in">console</span>.log(err);  &#125;)  <span class="hljs-keyword">return</span> instance(config)&#125;</code></pre><p align="right"><br>2020年08月4日 下午<br>Guzhz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;axios：网络请求&quot;&gt;&lt;a href=&quot;#axios：网络请求&quot; class=&quot;headerlink&quot; title=&quot;axios：网络请求&quot;&gt;&lt;/a&gt;axios：网络请求&lt;/h1&gt;&lt;h4 id=&quot;1、安装：npm-install-axios-–save&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="学习类" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%B1%BB/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>VUE学习（七）：VueX的使用</title>
    <link href="http://yoursite.com/2020/08/03/VUE%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9AVueX%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/08/03/VUE学习（七）：VueX的使用/</id>
    <published>2020-08-02T17:49:04.000Z</published>
    <updated>2020-08-03T16:50:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VueX：管理组件间的共享资源"><a href="#VueX：管理组件间的共享资源" class="headerlink" title="VueX：管理组件间的共享资源"></a>VueX：管理组件间的共享资源</h1><h4 id="1、安装和使用：npm-install-vuex-3-0-1-–save"><a href="#1、安装和使用：npm-install-vuex-3-0-1-–save" class="headerlink" title="1、安装和使用：npm install vuex@3.0.1 –save"></a>1、安装和使用：npm install <a href="mailto:vuex@3.0.1" target="_blank" rel="noopener">vuex@3.0.1</a> –save</h4><blockquote><p>1、新建store包，放在index.js里</p></blockquote><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">'vuex'</span><span class="hljs-comment">//安装插件</span>Vue.use(Vuex)<span class="hljs-comment">//创建对象</span><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> Vuex.Store(&#123;  <span class="hljs-attr">state</span>: &#123;    <span class="hljs-attr">counter</span>: <span class="hljs-number">1000</span>  &#125;,  <span class="hljs-attr">mutations</span>: &#123;  <span class="hljs-comment">//记录处理记录</span>  &#125;,  <span class="hljs-attr">actions</span>: &#123;   <span class="hljs-comment">//异步处理，对接后端</span>  &#125;,  <span class="hljs-attr">getters</span>:&#123;      &#125;,  <span class="hljs-attr">modules</span>: &#123;  &#125;&#125;)<span class="hljs-comment">//导出</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store</code></pre><blockquote><p>2、main.js，通过vue使用vuex插件</p></blockquote><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">'./store'</span><span class="hljs-comment">//导入对应的包即可</span>Vue.prototype.$store = store</code></pre><blockquote><p>3、使用共享数据（不建议直接修改）</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;$store.state.counter&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><blockquote><p>4、安装devtools浏览器插件（谷歌商店）进行调试</p></blockquote><pre><code class="hljs html">//定义处理方法（这个方法经过vuex插件 mutations: &#123;  //记录处理记录    increment(state) &#123;      state.counter++    &#125;,    decrement(state) &#123;      state.counter--    &#125; &#125;,//通过提交的方式，字符串参数为方法名  methods: &#123;    add() &#123;      this.$store.commit('increment')    &#125;,    minus() &#123;      this.$store.commit('decrement')    &#125;  &#125;</code></pre><h4 id="2、state：管理状态"><a href="#2、state：管理状态" class="headerlink" title="2、state：管理状态"></a>2、state：管理状态</h4><blockquote><p>单一状态树，即vuex本身不建议创建多个，只需要一个即可，方便管理</p></blockquote><h4 id="3、getters：计算属性-函数参数：state、-getters"><a href="#3、getters：计算属性-函数参数：state、-getters" class="headerlink" title="3、getters：计算属性 | 函数参数：state、(getters)"></a>3、getters：计算属性 | 函数参数：state、(getters)</h4><blockquote><p>可以理解为计算属性，对数据的复杂处理，然后按照属性的方式进行调用</p></blockquote><pre><code class="hljs JavaScript">getters:&#123;  powerCounter(state) &#123;    <span class="hljs-keyword">return</span> state.counter * state.counter  &#125;&#125;,</code></pre><p>妙用：需要对已有的方法进行进一步处理，可以再写个方法传getters进去，然后调用指定的方法进行处理</p><pre><code class="hljs javascript">more20stu(state) &#123;  <span class="hljs-keyword">return</span> state.students.filter(<span class="hljs-function"><span class="hljs-params">s</span> =&gt;</span> s.age&gt;<span class="hljs-number">20</span>)&#125;,more20stuLength(state, getters) &#123;<span class="hljs-comment">//只接受state和getters，两个参数</span>  <span class="hljs-keyword">return</span> getters.more20stu.length;&#125;</code></pre><p>需求：调动getters的方法时，需要指定参数</p><p>思想：因为getters不接受自定义参数，则可以通过嵌套函数，由函数处理传进来的参数，然后return回去</p><pre><code class="hljs JavaScript">&lt;h2&gt;超过指定年龄的学生：&#123;&#123;$store.getters.moreAgeStu(17)&#125;&#125;&lt;/h2&gt;//17就传到function里面了moreAgeStu(state) &#123;  return function (age) &#123;    return state.students.filter(s =&gt; s.age &gt; age);  &#125;&#125;</code></pre><h4 id="4、mutations：-函数参数：state、-调用：commit"><a href="#4、mutations：-函数参数：state、-调用：commit" class="headerlink" title="4、mutations：| 函数参数：state、%| 调用：commit"></a>4、mutations：| 函数参数：state、%| 调用：commit</h4><blockquote><p>1、修改state参数时使用</p><p>2、传递参数</p></blockquote><pre><code class="hljs JavaScript"><span class="hljs-comment">//App.vue</span>addStudent() &#123;  <span class="hljs-keyword">const</span> stu = &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'eee'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">111</span>&#125;  <span class="hljs-keyword">this</span>.$store.commit(<span class="hljs-string">'addStudent'</span>,stu)&#125;addStudent(state, stu) &#123;  state.students.push(stu)&#125;</code></pre><blockquote><p>3、提交风格（传对象）</p></blockquote><pre><code class="hljs javascript">addCount(count) &#123;  <span class="hljs-comment">//直接传数字</span>  <span class="hljs-comment">// this.$store.commit('incrementCount',count)</span>  <span class="hljs-comment">//传对象</span>  <span class="hljs-keyword">this</span>.$store.commit(&#123;    <span class="hljs-attr">type</span>: <span class="hljs-string">'incrementCount'</span>,    count  &#125;)&#125;,<span class="hljs-comment">//接收的时候也是对象，需要在对象里取出对应的值，注意：传的type会自动查找指定函数</span>incrementCount(state,payload) &#123;  <span class="hljs-built_in">console</span>.log(payload);  state.counter += payload.count;&#125;,</code></pre><blockquote><p>4、响应式系统：需要提前初始化好才会是响应式；如果动态添加属性，则不会响应式（观察者模式）</p></blockquote><pre><code class="hljs javascript">解决：&gt; 添加：响应式：Vue.set(state.info, <span class="hljs-string">'key'</span>, <span class="hljs-string">'value'</span>) <span class="hljs-comment">//对象</span>&gt; 删除：非响应式：<span class="hljs-keyword">delete</span> state.info.age响应式：Vue.delete(state.info, <span class="hljs-string">'age'</span>)</code></pre><blockquote><p>5、类型常量（解决方法名可能写错的问题）</p></blockquote><pre><code class="hljs javascript"><span class="hljs-comment">//新建mutation-types.js，统一常量名然后导出</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> INCREMENT = <span class="hljs-string">'increment'</span><span class="hljs-keyword">import</span> &#123;INCREMENT&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"./store/mutations-types"</span>;<span class="hljs-comment">//Vue.vue使用</span>  add() &#123;    <span class="hljs-keyword">this</span>.$store.commit(INCREMENT)  &#125;,<span class="hljs-comment">//index.js使用</span>  [INCREMENT](state) &#123;  <span class="hljs-comment">//用括号包起来</span>    state.counter++  &#125;,</code></pre><h4 id="5、actions：异步操作-函数参数：context，payload-调用：dispatch"><a href="#5、actions：异步操作-函数参数：context，payload-调用：dispatch" class="headerlink" title="5、actions：异步操作 | 函数参数：context，payload | 调用：dispatch"></a>5、actions：异步操作 | 函数参数：context，payload | 调用：dispatch</h4><p>原理：把异步请求放在actions里，在actions的方法里通过commit请求mutations，vue通过dispatch调用actions的方法</p><pre><code class="hljs javascript"><span class="hljs-comment">//按钮点击修改</span>updateInfo() &#123;     <span class="hljs-keyword">this</span>.$store.dispatch(<span class="hljs-string">'aUpdateInfo'</span>,<span class="hljs-string">'我是payload'</span>)&#125;<span class="hljs-comment">//来到actions</span>actions: &#123;   <span class="hljs-comment">//异步处理，对接后端</span>    <span class="hljs-comment">//上下文，理解为store对象</span>    aUpdateInfo(context,payload) &#123;      setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;  <span class="hljs-built_in">console</span>.log(payload);      context.commit(<span class="hljs-string">'updateInfo'</span>)    &#125;, <span class="hljs-number">1000</span>)  &#125;&#125;,<span class="hljs-comment">//来到mutations</span>updateInfo(state) &#123;  state.info.name = <span class="hljs-string">'hhh'</span>&#125;</code></pre><p>高操作：点击按钮后，来到actions发送请求，然后放回Promise对象，对象存放回调信息，然后在一开始的按钮函数里then()拿出信息</p><pre><code class="hljs javascript"><span class="hljs-comment">//按钮</span>updateInfo() &#123;  <span class="hljs-comment">//需求：请求完了，要返回一个回调信息 new Promise</span>  <span class="hljs-keyword">this</span>.$store      .dispatch(<span class="hljs-string">'aUpdateInfo'</span>,<span class="hljs-string">'我是携带的信息'</span>)      .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'----------------------'</span>)        <span class="hljs-built_in">console</span>.log(res);  &#125;)&#125;<span class="hljs-comment">//回调</span>aUpdateInfo(context,payload) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;      setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;        <span class="hljs-built_in">console</span>.log(payload);        context.commit(<span class="hljs-string">'updateInfo'</span>)        resolve(<span class="hljs-string">'回调信息'</span>)      &#125;, <span class="hljs-number">1000</span>)    &#125;)&#125;我的payload我是携带的信息----------------------回调信息</code></pre><h4 id="6、modules：嵌套子模块"><a href="#6、modules：嵌套子模块" class="headerlink" title="6、modules：嵌套子模块"></a>6、modules：嵌套子模块</h4><pre><code class="hljs javascript">modules: &#123;  <span class="hljs-attr">a</span>: moduleA&#125;<span class="hljs-keyword">const</span> moduleA = &#123;  <span class="hljs-attr">state</span>: &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">'zhangsan'</span>,  &#125;,  <span class="hljs-attr">mutations</span>: &#123;    updateName(state, payload) &#123;<span class="hljs-comment">//使用方法一样： this.$store.commit('updateName','lisi')</span>      state.name = payload    &#125;  &#125;,  <span class="hljs-attr">getters</span>: &#123;<span class="hljs-comment">//使用方法一样：&#123;&#123;$store.getters.fullName&#125;&#125;</span>    fullName(state) &#123;      <span class="hljs-keyword">return</span> state.name + <span class="hljs-string">'1111'</span>    &#125;,    fullName2(state, getters) &#123;      <span class="hljs-keyword">return</span> getters.fullName + <span class="hljs-string">'2222'</span>    &#125;,    fullName3(state, gettters, rootState) &#123;<span class="hljs-comment">//多了一个参数，可以拿到根的state</span>      <span class="hljs-keyword">return</span> gettters.fullName2 + rootState.counter    &#125;  &#125;,  <span class="hljs-attr">actions</span>: &#123;    aUpdateName(context) &#123;  <span class="hljs-comment">//context不再是store对象，而是指本模块，commit也只能是自己的</span>      setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;        context.commit(<span class="hljs-string">'updateName'</span>,<span class="hljs-string">'wangwu'</span>)      &#125;,<span class="hljs-number">1000</span>)    &#125;  &#125;&#125;</code></pre><h4 id="7、文件目录组织"><a href="#7、文件目录组织" class="headerlink" title="7、文件目录组织"></a>7、文件目录组织</h4><h5 id="1、对象的解构"><a href="#1、对象的解构" class="headerlink" title="1、对象的解构"></a>1、对象的解构</h5><pre><code class="hljs html">const obj = &#123;  name: 'hh',  age: 18,  height: 1.88,  address: '洛杉矶'&#125;const &#123;name,height,age&#125; = obj; //不用按顺序，按需取出cosole.log(name)  //直接使用</code></pre><h5 id="2、拆分"><a href="#2、拆分" class="headerlink" title="2、拆分"></a>2、拆分</h5><pre><code class="hljs html">store  |--modules|--moduleA.js  |mutations.js  |mutations-types.js  |getters.js  |actions.js  |index.js</code></pre><p align="right"><br>2020年08月4日 下午<br>Guzhz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VueX：管理组件间的共享资源&quot;&gt;&lt;a href=&quot;#VueX：管理组件间的共享资源&quot; class=&quot;headerlink&quot; title=&quot;VueX：管理组件间的共享资源&quot;&gt;&lt;/a&gt;VueX：管理组件间的共享资源&lt;/h1&gt;&lt;h4 id=&quot;1、安装和使用：npm-i
      
    
    </summary>
    
      <category term="学习类" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%B1%BB/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>VUE学习（六）：Promise的使用</title>
    <link href="http://yoursite.com/2020/08/01/VUE%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9APromise%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/08/01/VUE学习（六）：Promise的使用/</id>
    <published>2020-07-31T17:49:04.000Z</published>
    <updated>2020-08-01T16:50:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise的使用"><a href="#Promise的使用" class="headerlink" title="Promise的使用"></a>Promise的使用</h1><h4 id="1-Promise的基本使用"><a href="#1-Promise的基本使用" class="headerlink" title="1. Promise的基本使用"></a>1. Promise的基本使用</h4><pre><code class="hljs javascript">&lt;script&gt;  <span class="hljs-comment">//Promise：优雅的解决嵌套请求问题，使代码看起来更清晰，即链式编程</span>  <span class="hljs-comment">//什么情况下会用到Promise？</span>  <span class="hljs-comment">//有异步操作时，用Promise对这个异步操作进行封装</span>  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;      <span class="hljs-comment">//成功的时候执行，然后走then</span>      <span class="hljs-comment">// resolve('hello world')</span>      <span class="hljs-comment">//失败则调用reject</span>      reject(<span class="hljs-string">'error message'</span>)    &#125;, <span class="hljs-number">1000</span>)  &#125;).then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;    <span class="hljs-comment">// 拿到数据，然后处理</span>    <span class="hljs-built_in">console</span>.log(data);    <span class="hljs-built_in">console</span>.log(data);    <span class="hljs-built_in">console</span>.log(data);    <span class="hljs-built_in">console</span>.log(data);    <span class="hljs-built_in">console</span>.log(data);  &#125;).catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;    <span class="hljs-built_in">console</span>.log(err);  &#125;)&lt;<span class="hljs-regexp">/script&gt;</span></code></pre><h4 id="2-Promise的另一种写法"><a href="#2-Promise的另一种写法" class="headerlink" title="2. Promise的另一种写法"></a>2. Promise的另一种写法</h4><pre><code class="hljs javascript">&lt;script&gt;  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;      <span class="hljs-comment">// resolve('hello resolve')</span>      reject(<span class="hljs-string">'error message'</span>)    &#125;,<span class="hljs-number">1000</span>)  &#125;).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;    <span class="hljs-built_in">console</span>.log(data);  &#125;, err =&gt; &#123;    <span class="hljs-built_in">console</span>.log(err);  &#125;)&lt;<span class="hljs-regexp">/script&gt;</span></code></pre><h4 id="3-Promise的链式调用"><a href="#3-Promise的链式调用" class="headerlink" title="3. Promise的链式调用"></a>3. Promise的链式调用</h4><pre><code class="hljs javascript">&lt;script&gt;  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;    <span class="hljs-comment">//1</span>    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;      resolve()    &#125;,<span class="hljs-number">1000</span>)  &#125;).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'第一次处理'</span>);    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;      <span class="hljs-comment">//2</span>      setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;        resolve()      &#125;,<span class="hljs-number">1000</span>)    &#125;)  &#125;).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'第二次处理'</span>);    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;      <span class="hljs-comment">//3</span>      setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;        resolve()      &#125;,<span class="hljs-number">1000</span>)    &#125;)  &#125;).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"第三次处理"</span>);  &#125;)&lt;<span class="hljs-regexp">/script&gt;</span></code></pre><h4 id="4-Promise的简洁写法"><a href="#4-Promise的简洁写法" class="headerlink" title="4. Promise的简洁写法"></a>4. Promise的简洁写法</h4><pre><code class="hljs javascript">&lt;script&gt;  //需求：aaa-&gt;自己处理10行  //处理：aaa111-&gt;自己处理10行  //处理：aaa111222 -&gt; 自己处理  new Promise((resolve, reject) =&gt; &#123;    setTimeout(() =&gt; &#123;      resolve('aaa')    &#125;,1000)  &#125;).then(res =&gt; &#123;    //1    console.log(res + '第一次处理');    //2，对结果进行第一次处理    return Promise.resolve(res + '111')  &#125;).then(res =&gt; &#123;    console.log(res + '第二次处理');    return Promise.resolve(res + '222')  &#125;).then(res =&gt; &#123;    console.log(res + "第三次处理");  &#125;).catch(err =&gt; &#123;    console.log(err);  &#125;)&lt;/script&gt;//&gt;return new Promise((resolve, reject) =&gt; &#123;  resolve(res + '111')&#125;)//&gt;return Promise.resolve(res + '111')//reject同理//&gt;return res + '111'//throw 'err message'</code></pre><h4 id="5-Promise的all方法的使用"><a href="#5-Promise的all方法的使用" class="headerlink" title="5. Promise的all方法的使用"></a>5. Promise的all方法的使用</h4><pre><code class="hljs javascript">&lt;script&gt;  //处理多个请求的结果，传入可迭代的容器：数组，数组存放请求  //伪代码  Promise.all([      new Promise((resolve, reject) =&gt; &#123;        $ajax([            url: 'url1',            success: function (data) &#123;              resolve(data)            &#125;        ])      &#125;),    new Promise((resolve, reject) =&gt; &#123;      $ajax([        url: 'url2',          success: function (data) &#123;            resolve(data)        &#125;      ])    &#125;)  ]).then(results =&gt; &#123;  //这里的参数也是数组    console.log(results[0]);    console.log(results[1]);  &#125;)&lt;/script&gt;//模拟使用&lt;script&gt;  //处理多个请求的结果，传入可迭代的容器：数组，数组存放请求  Promise.all([    new Promise((resolve, reject) =&gt; &#123;      setTimeout(() =&gt; &#123;        resolve(&#123;name: 'result1', age: 18&#125;)      &#125;,2000)    &#125;),    new Promise((resolve, reject) =&gt; &#123;      setTimeout(() =&gt; &#123;        resolve("result2")      &#125;,1000)    &#125;)  ]).then(results =&gt; &#123;  //这里的参数也是数组    console.log(results[0].age);    console.log(results[1]);  &#125;)&lt;/script&gt;</code></pre><p align="right"><br>2020年08月4日 下午<br>Guzhz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Promise的使用&quot;&gt;&lt;a href=&quot;#Promise的使用&quot; class=&quot;headerlink&quot; title=&quot;Promise的使用&quot;&gt;&lt;/a&gt;Promise的使用&lt;/h1&gt;&lt;h4 id=&quot;1-Promise的基本使用&quot;&gt;&lt;a href=&quot;#1-Promi
      
    
    </summary>
    
      <category term="学习类" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%B1%BB/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>VUE学习（五）：vue-router的使用</title>
    <link href="http://yoursite.com/2020/07/29/VUE%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9Avue-router%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/07/29/VUE学习（五）：vue-router的使用/</id>
    <published>2020-07-29T15:49:04.000Z</published>
    <updated>2020-07-29T16:50:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、vue-router的使用"><a href="#一、vue-router的使用" class="headerlink" title="一、vue-router的使用"></a>一、vue-router的使用</h1><h4 id="1、使用方法"><a href="#1、使用方法" class="headerlink" title="1、使用方法"></a>1、使用方法</h4><blockquote><p>1、components文件夹新建vue文件；</p><p>2、index.js添加映射路径（导入组件）；</p><p>3、App.vue使用组件</p></blockquote><h4 id="2、改hash路径为history路径"><a href="#2、改hash路径为history路径" class="headerlink" title="2、改hash路径为history路径"></a>2、改hash路径为history路径</h4><blockquote><p>index.js -&gt; Router对象：mode: ‘history’,</p></blockquote><h4 id="3、router-link的使用"><a href="#3、router-link的使用" class="headerlink" title="3、router-link的使用"></a>3、router-link的使用</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是app组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-comment">&lt;!--默认a标签，tag指定标签，replace：replaceState（禁止来回返回）--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/home"</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">replace</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/about"</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">replace</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></pre><h4 id="4、router-link-active"><a href="#4、router-link-active" class="headerlink" title="4、router-link-active"></a>4、router-link-active</h4><pre><code class="hljs html">//当<span class="hljs-tag">&lt;<span class="hljs-name">router-link</span>&gt;</span>对应的路由匹配成功时，会自动给元素设置一个router-link-active的class，可以对这个类进行样式设置.router-link-active &#123;color: red;&#125;//修改默认的名称：index.js，使用linkActiveClass: 'active'，则会修改陈active.active &#123;color: red;&#125;</code></pre><h4 id="5、绑定方法，使用this-router-push-‘-home’-跳转页面"><a href="#5、绑定方法，使用this-router-push-‘-home’-跳转页面" class="headerlink" title="5、绑定方法，使用this.$router.push(‘/home’)跳转页面"></a>5、绑定方法，使用this.$router.push(‘/home’)跳转页面</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是app组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"clickHome"</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"clickAbout"</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>export default &#123;  name: 'App',  methods: &#123;    clickHome() &#123;      this.$router.replace('/home').catch(err =&gt; &#123;&#125;);  //区别push      console.log('clickHome');    &#125;,    clickAbout() &#123;      this.$router.replace('/about').catch(err =&gt; &#123;&#125;);      console.log('clickAbout');    &#125;  &#125;&#125;</code></pre><h4 id="6、-router、-route、routes的区别"><a href="#6、-router、-route、routes的区别" class="headerlink" title="6、$router、$route、routes的区别"></a>6、$router、$route、routes的区别</h4><blockquote><p>1、$router：代指Router对象，使用：this.$router；</p><p>2、$route：指当前正在活跃(使用)的路由：通过this.$route.params.参数，可以拿到参数</p><p>3、routes：index.js路由管理里面，Router对象里的属性，也是映射管理；</p></blockquote><h4 id="7、动态路由（路由传参）"><a href="#7、动态路由（路由传参）" class="headerlink" title="7、动态路由（路由传参）"></a>7、动态路由（路由传参）</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">v-bind:to</span>=<span class="hljs-string">"'/user/'+uId"</span>&gt;</span>用户<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>data() &#123;  return &#123;    uId: 'ss'  &#125;&#125;,------User.vue------<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是用户界面<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是用户的相关信息，略略略<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;userId&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-comment">&lt;!--展示--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;$route.params.uId&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-comment">&lt;!--直接拿--&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">"user"</span>,    <span class="hljs-attr">computed</span>: &#123;      userId() &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.$route.params.uId<span class="hljs-comment">//获得参数</span>      &#125;    &#125;  &#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h4 id="8、路由的懒加载"><a href="#8、路由的懒加载" class="headerlink" title="8、路由的懒加载"></a>8、路由的懒加载</h4><blockquote><p>把不同的路由拆分为多个js文件，不一起打包，用到的时候再加载。</p></blockquote><pre><code class="hljs html">/*懒加载*/const Home = () =&gt; import('../components/Home')const About = () =&gt; import('../components/About')const User = () =&gt; import('../components/User')在index.js里，把之前直接引入的方式，改为声明为一个变量（常量），用到时候再引用，即加载</code></pre><h4 id="9、嵌套子路由"><a href="#9、嵌套子路由" class="headerlink" title="9、嵌套子路由"></a>9、嵌套子路由</h4><blockquote><p>1、新建vue：HomeNews.vue/HomeMessage.vue</p><p>2、配置子路由映射children[{},{}] ，不需要”/“</p><p>3、父vue模板，也加上<router-link><router-view></router-view></router-link></p><p>4、注意：router-link to=”完整路径”</p></blockquote><pre><code class="hljs html">&#123;  path: '/home',  component: Home,  children: [    &#123;      path: 'news',  //不需要加 '/'      component: HomeNews    &#125;,    &#123;      path: 'message',  //不需要加 '/'      component: HomeMessage    &#125;  ]&#125;,<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是首页<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是首页内容，嘻嘻嘻<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/home/news"</span>&gt;</span>新闻<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/home/message"</span>&gt;</span>消息<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></pre><h4 id="10、路由参数传递"><a href="#10、路由参数传递" class="headerlink" title="10、路由参数传递"></a>10、路由参数传递</h4><h5 id="1-方式一：restful风格"><a href="#1-方式一：restful风格" class="headerlink" title="1. 方式一：restful风格"></a>1. 方式一：restful风格</h5><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">v-bind:to</span>=<span class="hljs-string">"'/user/'+uId"</span>&gt;</span>用户<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>&#123;path: '/user/:uId',component: User&#125;,&#123;&#123;$route.params.uId&#125;&#125;</code></pre><h5 id="2-方式二：query传递"><a href="#2-方式二：query传递" class="headerlink" title="2. 方式二：query传递"></a>2. 方式二：query传递</h5><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">v-bind:to</span>=<span class="hljs-string">"&#123;path: '/profile', query: &#123;name: 'guzhz', age: 18&#125;&#125;"</span>&gt;</span>档案<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>&#123;&#123;$route.query.name&#125;&#125;&#123;&#123;$route.query.age&#125;&#125;</code></pre><h4 id="11、全局导航守卫"><a href="#11、全局导航守卫" class="headerlink" title="11、全局导航守卫"></a>11、全局导航守卫</h4><h5 id="1-生命周期的方式实现"><a href="#1-生命周期的方式实现" class="headerlink" title="1. 生命周期的方式实现"></a>1. 生命周期的方式实现</h5><pre><code class="hljs javascript">created() &#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'组件被创建的时候回调'</span>);<span class="hljs-built_in">document</span>.title = <span class="hljs-string">'首页'</span>;&#125;,mounted() &#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'dom被挂载的时候回调'</span>);&#125;,updated() &#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'界面刷新则回调'</span>);&#125;</code></pre><h5 id="2-前置钩子：全局导航守卫（cil4里则用to-name即可）"><a href="#2-前置钩子：全局导航守卫（cil4里则用to-name即可）" class="headerlink" title="2. 前置钩子：全局导航守卫（cil4里则用to.name即可）"></a>2. 前置钩子：全局导航守卫（cil4里则用to.name即可）</h5><pre><code class="hljs javascript"><span class="hljs-comment">//router调用beforeEach，参数是一个函数</span><span class="hljs-comment">//matched[0],解决嵌套的时候undefined的问题</span>router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span> ,next</span>) =&gt;</span> &#123;  <span class="hljs-built_in">document</span>.title = to.matched[<span class="hljs-number">0</span>].meta.title;  next(); <span class="hljs-comment">//必须调用，才能下一步</span>&#125;)<span class="hljs-comment">//在各自的route里面添加meta(元数据，描述数据的数据)</span>&#123;  <span class="hljs-attr">path</span>: <span class="hljs-string">'/user/:uId'</span>,  <span class="hljs-attr">component</span>: User,  <span class="hljs-attr">meta</span>: &#123;    <span class="hljs-attr">title</span>: <span class="hljs-string">'用户'</span>  &#125;&#125;,</code></pre><h5 id="3-补充：后置钩子（没有next）"><a href="#3-补充：后置钩子（没有next）" class="headerlink" title="3. 补充：后置钩子（没有next）"></a>3. 补充：后置钩子（没有next）</h5><pre><code class="hljs javascript">router.afterEach(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'after'</span>);&#125;)</code></pre><h5 id="4-补充：独享钩子"><a href="#4-补充：独享钩子" class="headerlink" title="4. 补充：独享钩子"></a>4. 补充：独享钩子</h5><pre><code class="hljs javascript"><span class="hljs-comment">//对指定的route配置</span>beforeEnter: <span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'beforeEnter'</span>);  next();&#125;,</code></pre><h5 id="5-补充：组件补充"><a href="#5-补充：组件补充" class="headerlink" title="5. 补充：组件补充"></a>5. 补充：组件补充</h5><h4 id="12、keep-alive的使用：提供组件缓存"><a href="#12、keep-alive的使用：提供组件缓存" class="headerlink" title="12、keep-alive的使用：提供组件缓存"></a>12、keep-alive的使用：提供组件缓存</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span>//有缓存activated()和deactivated()才能使用</code></pre><h5 id="1-嵌套子组件引发问题"><a href="#1-嵌套子组件引发问题" class="headerlink" title="1. 嵌套子组件引发问题"></a>1. 嵌套子组件引发问题</h5><blockquote><p>问题：嵌套的子组件由于缺省设定的问题，导致切换回来的时候，子组件永远是缺省的那个</p><p>思路：去掉缺省值，动态添加默认显示的子组件，同时记录路径，使切换回来的时候仍然是切换走的时候那个子组件</p></blockquote><pre><code class="hljs javascript"><span class="hljs-comment">//index.js的Home的route去掉写死的缺省值</span>children: [        <span class="hljs-comment">// &#123;</span>        <span class="hljs-comment">//   path: '',</span>        <span class="hljs-comment">//   redirect: 'news'</span>        <span class="hljs-comment">// &#125;,</span>        &#123;          <span class="hljs-attr">path</span>: <span class="hljs-string">'news'</span>,  <span class="hljs-comment">//不需要加 '/'</span>          component: HomeNews        &#125;,        &#123;          <span class="hljs-attr">path</span>: <span class="hljs-string">'message'</span>,  <span class="hljs-comment">//不需要加 '/'</span>          component: HomeMessage        &#125;      ],<span class="hljs-comment">//Home.vue，data()添加一个路径变量记录路径：path</span>data() &#123;      <span class="hljs-keyword">return</span> &#123;        <span class="hljs-attr">message</span>: <span class="hljs-string">'你好啊'</span>,        <span class="hljs-attr">path</span>: <span class="hljs-string">'/home/news'</span>      &#125;    &#125;,<span class="hljs-comment">//Home.vue配合activated()活跃时动态创建，beforeRouteLeave()离开时记录path</span>activated() &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'activated'</span>);  <span class="hljs-keyword">this</span>.$router.push(<span class="hljs-keyword">this</span>.path).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;&#125;);&#125;,deactivated()&#123;    <span class="hljs-comment">//这个方法来不及获取path路径，所以不能使用</span>&#125;beforeRouteLeave(to, <span class="hljs-keyword">from</span>, next) &#123;  <span class="hljs-keyword">this</span>.path = <span class="hljs-keyword">this</span>.$route.path;  next();&#125;</code></pre><h5 id="2-排除个别不需要缓存"><a href="#2-排除个别不需要缓存" class="headerlink" title="2. 排除个别不需要缓存"></a>2. 排除个别不需要缓存</h5><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">exclude</span>=<span class="hljs-string">"Profile,User"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></code></pre><h1 id="二、vue-router底部栏项目知识点"><a href="#二、vue-router底部栏项目知识点" class="headerlink" title="二、vue-router底部栏项目知识点"></a>二、vue-router底部栏项目知识点</h1><h4 id="1-目录文件管理与逻辑分离"><a href="#1-目录文件管理与逻辑分离" class="headerlink" title="1. 目录文件管理与逻辑分离"></a>1. 目录文件管理与逻辑分离</h4><blockquote><p>1、共同的vue放在components里</p><p>2、主要视图放在views里，然后详细页面再分包</p><p>3、App.vue如果太多代码，还可以继续抽离</p><p>4、大组件继续拆分小组件，用插槽</p><p>5、div(设置属性)包裹插槽，可以避免属性被覆盖</p></blockquote><h4 id="2-获得活跃路径和动态修改样式"><a href="#2-获得活跃路径和动态修改样式" class="headerlink" title="2. 获得活跃路径和动态修改样式"></a>2. 获得活跃路径和动态修改样式</h4><pre><code class="hljs html">//父传子<span class="hljs-tag">&lt;<span class="hljs-name">tab-bar-item</span> <span class="hljs-attr">path</span>=<span class="hljs-string">"/profile"</span> <span class="hljs-attr">activeColor</span>=<span class="hljs-string">"blue"</span>&gt;</span>props: &#123;    path: String,    activeColor: &#123;    type: String,    default: 'deeppink'    &#125;&#125;,computed: &#123;  isActive() &#123;    //获得活跃路径    return this.$route.path.indexOf(this.path) !== -1;  &#125;,  activeStyle() &#123;    return this.isActive ? &#123;color: this.activeColor&#125; : &#123;&#125;  &#125;&#125;,</code></pre><h4 id="3-点击跳转"><a href="#3-点击跳转" class="headerlink" title="3. 点击跳转"></a>3. 点击跳转</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tab-bar-item"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"itemClick"</span>&gt;</span>    //父传子，pathmethods: &#123;    itemClick() &#123;    this.$router.push(this.path).catch(err =&gt; &#123;&#125;);    &#125;&#125;</code></pre><h4 id="4-文件路径起别名"><a href="#4-文件路径起别名" class="headerlink" title="4. 文件路径起别名"></a>4. 文件路径起别名</h4><blockquote><p>1、webpack.base.conf.js修改</p><pre><code class="hljs JavaScript">&gt; resolve: &#123;&gt; extensions: [<span class="hljs-string">'.js'</span>, <span class="hljs-string">'.vue'</span>, <span class="hljs-string">'.json'</span>],&gt; alias: &#123;&gt;  <span class="hljs-string">'@'</span>: resolve(<span class="hljs-string">'src'</span>),&gt;  <span class="hljs-string">'assets'</span>: resolve(<span class="hljs-string">'src/assets'</span>),&gt;  <span class="hljs-string">'components'</span>: resolve(<span class="hljs-string">'src/components'</span>),&gt;  <span class="hljs-string">'views'</span>: resolve(<span class="hljs-string">'src/views'</span>),&gt; &#125;&gt; &#125;,&gt;</code></pre></blockquote><blockquote><p>2、使用</p><pre><code class="hljs html">&gt; //如果是import from 的路径则直接使用别名&gt; import TabBar from "components/tabbar/TabBar";&gt; import TabBarItem from "components/tabbar/TabBarItem";&gt; &gt; //src引用，则需要在别名前面加“~”&gt; <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"item-icon"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"~assets/img/tabbar/category.svg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span>&gt;</code></pre></blockquote><p align="right"><br>2020年08月4日 下午<br>Guzhz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、vue-router的使用&quot;&gt;&lt;a href=&quot;#一、vue-router的使用&quot; class=&quot;headerlink&quot; title=&quot;一、vue-router的使用&quot;&gt;&lt;/a&gt;一、vue-router的使用&lt;/h1&gt;&lt;h4 id=&quot;1、使用方法&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="学习类" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%B1%BB/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>VUE学习（四）：脚手架和箭头函数的使用</title>
    <link href="http://yoursite.com/2020/07/28/VUE%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E8%84%9A%E6%89%8B%E6%9E%B6%E5%92%8C%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/07/28/VUE学习（四）：脚手架和箭头函数的使用/</id>
    <published>2020-07-28T15:49:04.000Z</published>
    <updated>2020-07-28T16:50:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、脚手架2-3的使用"><a href="#一、脚手架2-3的使用" class="headerlink" title="一、脚手架2/3的使用"></a>一、脚手架2/3的使用</h1><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><p>cil3：npm install @vue/cli -g</p><p>拉取2.x：npm install @vue/cli-init -g</p><h4 id="2-初始化cli2：vue-init-webpack-xxx"><a href="#2-初始化cli2：vue-init-webpack-xxx" class="headerlink" title="2. 初始化cli2：vue init webpack xxx"></a>2. 初始化cli2：vue init webpack xxx</h4><p>runtime-compiler和runtime-only的区别</p><pre><code class="hljs html">runtime-compiler：template -&gt; ast -&gt; render -&gt; vdom -&gt; UI（）runtime-only：render -&gt; vdom -&gt; UI （性能高，代码量少）1、vue文件的template不需要解析了2、因为被vue-template-compiler解析成render函数了</code></pre><h4 id="3-初始化cil3：vue-create-xxx"><a href="#3-初始化cil3：vue-create-xxx" class="headerlink" title="3. 初始化cil3：vue create xxx"></a>3. 初始化cil3：vue create xxx</h4><ul><li><p>可视化界面 &gt; vue ui</p></li><li><p>cil3把许多配置文件隐藏起来了，需要配置则在根目录下创建：</p><ul><li>vue.config.js（固定名字，红色）</li><li>git commit -m “添加文件”（绿色）</li></ul></li></ul><h1 id="二、箭头函数的使用"><a href="#二、箭头函数的使用" class="headerlink" title="二、箭头函数的使用"></a>二、箭头函数的使用</h1><h4 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h4><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sum = <span class="hljs-function">(<span class="hljs-params">num1, num2</span>) =&gt;</span> &#123;    <span class="hljs-keyword">return</span> num1 + num2;  &#125;<span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));</code></pre><h4 id="2-只有一个参数，括号可以省略"><a href="#2-只有一个参数，括号可以省略" class="headerlink" title="2. 只有一个参数，括号可以省略"></a>2. 只有一个参数，括号可以省略</h4><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> power = <span class="hljs-function"><span class="hljs-params">num</span> =&gt;</span> &#123;  <span class="hljs-keyword">return</span> num * num;&#125;<span class="hljs-built_in">console</span>.log(power(<span class="hljs-number">100</span>));</code></pre><h4 id="3-内容只有一行代码"><a href="#3-内容只有一行代码" class="headerlink" title="3. 内容只有一行代码"></a>3. 内容只有一行代码</h4><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mul = <span class="hljs-function">(<span class="hljs-params">num1,num2</span>) =&gt;</span> num1 * num2;<span class="hljs-built_in">console</span>.log(mul(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>));</code></pre><h4 id="4-没有参数，没有返回值"><a href="#4-没有参数，没有返回值" class="headerlink" title="4. 没有参数，没有返回值"></a>4. 没有参数，没有返回值</h4><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> print = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'hello'</span>);print()</code></pre><h4 id="5-箭头函数的this的使用"><a href="#5-箭头函数的this的使用" class="headerlink" title="5. 箭头函数的this的使用"></a>5. 箭头函数的this的使用</h4><p>问题：箭头函数中的this是如何查找的？</p><p>答案：向外层作用域查找，一层层查找this，知道有this的定义</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> obj = &#123;    aaa() &#123;        setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;                <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);      <span class="hljs-comment">//window，这种无参格式都是window</span>            &#125;);            setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;                <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);      <span class="hljs-comment">//上一层是function()，所以this也是window</span>            &#125;);        &#125;);        setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;            setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;                <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);      <span class="hljs-comment">//window</span>            &#125;);            setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;                <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);      <span class="hljs-comment">//上一层没有，再上一层是aaa，所以this是aaa</span>            &#125;)        &#125;)    &#125;&#125;;</code></pre><p align="right"><br>2020年08月4日 下午<br>Guzhz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、脚手架2-3的使用&quot;&gt;&lt;a href=&quot;#一、脚手架2-3的使用&quot; class=&quot;headerlink&quot; title=&quot;一、脚手架2/3的使用&quot;&gt;&lt;/a&gt;一、脚手架2/3的使用&lt;/h1&gt;&lt;h4 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;
      
    
    </summary>
    
      <category term="学习类" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%B1%BB/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>VUE学习（三）：webpack详解</title>
    <link href="http://yoursite.com/2020/07/27/VUE%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9Awebpack%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/07/27/VUE学习（三）：webpack详解/</id>
    <published>2020-07-27T15:49:04.000Z</published>
    <updated>2020-07-27T16:50:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、传统的模块化"><a href="#一、传统的模块化" class="headerlink" title="一、传统的模块化"></a>一、传统的模块化</h1><h4 id="1-导入导出"><a href="#1-导入导出" class="headerlink" title="1. 导入导出"></a>1. 导入导出</h4><pre><code class="hljs javascript"><span class="hljs-comment">//commonJS</span>导出：<span class="hljs-built_in">module</span>.exports = &#123;add&#125;导入：<span class="hljs-keyword">const</span> &#123;add&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./mathUtils.js'</span>);<span class="hljs-comment">//es6</span>导出：<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> name = <span class="hljs-string">'哈哈哈'</span>;导入：<span class="hljs-keyword">import</span> &#123;name&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./info'</span>;</code></pre><h4 id="2-打包"><a href="#2-打包" class="headerlink" title="2. 打包"></a>2. 打包</h4><blockquote><p>webpack ./src/main.js ./dist/bundle.js</p></blockquote><h1 id="二、webpack初体验"><a href="#二、webpack初体验" class="headerlink" title="二、webpack初体验"></a>二、webpack初体验</h1><h4 id="1-自定义打包命令：webpack（配置固定路径）"><a href="#1-自定义打包命令：webpack（配置固定路径）" class="headerlink" title="1. 自定义打包命令：webpack（配置固定路径）"></a>1. 自定义打包命令：webpack（配置固定路径）</h4><pre><code class="hljs javascript"><span class="hljs-comment">//npm init 生成 package.json</span><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);<span class="hljs-comment">// 需要用到node依赖path</span><span class="hljs-built_in">module</span>.exports = &#123;  <span class="hljs-attr">entry</span>: <span class="hljs-string">'./src/main.js'</span>,  <span class="hljs-attr">output</span>: &#123;    <span class="hljs-attr">path</span>: path.resolve(__dirname,<span class="hljs-string">'dist'</span>),   <span class="hljs-comment">//绝对路径</span>    filename: <span class="hljs-string">'bundle.js'</span>  &#125;&#125;</code></pre><h4 id="2、映射路径为局部命令：npm-run-build"><a href="#2、映射路径为局部命令：npm-run-build" class="headerlink" title="2、映射路径为局部命令：npm run build"></a>2、映射路径为局部命令：npm run build</h4><pre><code class="hljs javascript"><span class="hljs-number">1.</span> 由于实际开发中大多数是用到局部webpack版本，则需要使用局部webpack<span class="hljs-number">2.</span> 使用局部命令    (<span class="hljs-number">1</span>)修改package.json里的scripts，添加自定义命令      <span class="hljs-string">"scripts"</span>: &#123;        <span class="hljs-string">"build"</span>: <span class="hljs-string">"webpack"</span>      &#125;,</code></pre><h4 id="3、配置开发环境-npm-install-webpack-3-6-0-–save-dev"><a href="#3、配置开发环境-npm-install-webpack-3-6-0-–save-dev" class="headerlink" title="3、配置开发环境 npm install webpack@3.6.0 –save-dev"></a>3、配置开发环境 npm install <a href="mailto:webpack@3.6.0" target="_blank" rel="noopener">webpack@3.6.0</a> –save-dev</h4><blockquote><p>安装开发环境的webpack，局部命令则优先去node_modules里面找webpack包</p></blockquote><h1 id="三、webpack的各种加载器"><a href="#三、webpack的各种加载器" class="headerlink" title="三、webpack的各种加载器"></a>三、webpack的各种加载器</h1><blockquote><p>webpack官网：<a href="https://www.webpackjs.com/loaders" target="_blank" rel="noopener">https://www.webpackjs.com/loaders</a></p></blockquote><h4 id="1-依赖css"><a href="#1-依赖css" class="headerlink" title="1. 依赖css"></a>1. 依赖css</h4><ol><li>main.js依赖：require(‘./css/normal.css’);</li><li>npm install <a href="mailto:css-loader@2.0.2" target="_blank" rel="noopener">css-loader@2.0.2</a> –save-dev</li><li>npm install style-loader –save-dev    //同时需要样式加载器</li><li>修改webpack.config.js</li></ol><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>: &#123;    <span class="hljs-attr">rules</span>: [      &#123;        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,        <span class="hljs-comment">// 使用多个loader，是从右向左读，先css在style</span>        use: [<span class="hljs-string">'style-loader'</span>,<span class="hljs-string">'css-loader'</span>]      &#125;    ]  &#125;</code></pre><h4 id="2-依赖less"><a href="#2-依赖less" class="headerlink" title="2. 依赖less"></a>2. 依赖less</h4><ol><li>npm install –save-dev <a href="mailto:less-loader@4.1.0" target="_blank" rel="noopener">less-loader@4.1.0</a> less</li></ol><pre><code class="hljs javascript"><span class="hljs-number">2.</span> &#123;            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,            <span class="hljs-attr">use</span>: [&#123;                <span class="hljs-attr">loader</span>: <span class="hljs-string">"style-loader"</span> <span class="hljs-comment">// creates style nodes from JS strings</span>            &#125;, &#123;                <span class="hljs-attr">loader</span>: <span class="hljs-string">"css-loader"</span> <span class="hljs-comment">// translates CSS into CommonJS</span>            &#125;, &#123;                <span class="hljs-attr">loader</span>: <span class="hljs-string">"less-loader"</span> <span class="hljs-comment">// compiles Less to CSS</span>            &#125;]    &#125;</code></pre><h4 id="3-1-依赖图片"><a href="#3-1-依赖图片" class="headerlink" title="3.1 依赖图片"></a>3.1 依赖图片</h4><ol><li>npm install –save-dev <a href="mailto:url-loader@1.1.2" target="_blank" rel="noopener">url-loader@1.1.2</a></li></ol><pre><code class="hljs javascript"><span class="hljs-number">2.</span> rules: [       &#123;         <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(png|jpg|gif)$/</span>,         <span class="hljs-attr">use</span>: [           &#123;             <span class="hljs-attr">loader</span>: <span class="hljs-string">'url-loader'</span>,             <span class="hljs-attr">options</span>: &#123;               <span class="hljs-comment">//图片大小，小于limit时，会转化成base64形式并直接使用</span>               limit: <span class="hljs-number">8192</span>             &#125;           &#125;         ]       &#125;     ]</code></pre><h4 id="3-2-依赖图片-gt-依赖文件"><a href="#3-2-依赖图片-gt-依赖文件" class="headerlink" title="3.2 依赖图片 -&gt; 依赖文件"></a>3.2 依赖图片 -&gt; 依赖文件</h4><ol><li>如果大于limit，需要用到file-loader但不需要配置</li><li><p>npm install <a href="mailto:file-loader@3.0.1" target="_blank" rel="noopener">file-loader@3.0.1</a> –save-dev</p><p>问题一：自动生成的图片在dist文件夹里，而写的路径在img里<br>解决：需要配置图片路径，自动拼接dist/才能显示</p></li></ol><pre><code class="hljs javascript"> webpack.config.js：  output: &#123;    <span class="hljs-attr">path</span>: path.resolve(__dirname,<span class="hljs-string">'dist'</span>),   <span class="hljs-comment">//绝对路径</span>    filename: <span class="hljs-string">'bundle.js'</span>,    <span class="hljs-attr">publicPath</span>: <span class="hljs-string">'dist/'</span>  &#125;,<span class="hljs-comment">//后续需要把index.html放到dist中，就不要配置了</span></code></pre><p>问题二：解决文件命名问题</p><pre><code class="hljs javascript">options: &#123;   <span class="hljs-attr">limit</span>: <span class="hljs-number">8192</span>,   <span class="hljs-attr">name</span>: <span class="hljs-string">'img/[name].[hash:8].[ext]'</span>&#125;</code></pre><h4 id="4-ES6转ES5"><a href="#4-ES6转ES5" class="headerlink" title="4. ES6转ES5"></a>4. ES6转ES5</h4><p>npm install –save-dev babel-loader@7 babel-core babel-preset-es2015</p><pre><code class="hljs javascript">    &#123;      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,      <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/(node_modules|bower_components)/</span>,      <span class="hljs-attr">use</span>: &#123;        <span class="hljs-attr">loader</span>: <span class="hljs-string">'babel-loader'</span>,        <span class="hljs-attr">options</span>: &#123;          <span class="hljs-attr">presets</span>: [<span class="hljs-string">'@babel/preset-env'</span>]        &#125;      &#125;    &#125;改：    options: &#123;        <span class="hljs-attr">presets</span>: [<span class="hljs-string">'es2015'</span>]    &#125;</code></pre><h1 id="四、依赖-vue"><a href="#四、依赖-vue" class="headerlink" title="四、依赖.vue"></a>四、依赖.vue</h1><ol><li>npm install vue –save（不加-dev，是因为开发和发布都需要用）</li><li>配置</li></ol><pre><code class="hljs javascript">resolve: &#123;    <span class="hljs-comment">//起别名，指定路径</span>    alias: &#123;      <span class="hljs-string">'vue$'</span>: <span class="hljs-string">'vue/dist/vue.esm.js'</span>  <span class="hljs-comment">//(runtime-compiler 而不使用 runtime-only（不能编译template）)</span>    &#125;&#125;resolve: &#123;    <span class="hljs-comment">//去后缀</span>    extensions: [<span class="hljs-string">'.js'</span>,<span class="hljs-string">'.css'</span>,<span class="hljs-string">'.vue'</span>],</code></pre><h1 id="五、index-js代码抽离"><a href="#五、index-js代码抽离" class="headerlink" title="五、index.js代码抽离"></a>五、index.js代码抽离</h1><h4 id="1-对象化"><a href="#1-对象化" class="headerlink" title="1. 对象化"></a>1. 对象化</h4><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">"app"</span>&gt;<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-number">2.</span> 写成对象<span class="hljs-keyword">const</span> App = &#123;  <span class="hljs-attr">template</span>: <span class="hljs-string">`  &lt;div&gt;    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;    &lt;button @click="btnClick"&gt;按钮&lt;/button&gt;    &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;  &lt;/div&gt;  `</span>,  data() &#123;    <span class="hljs-keyword">return</span> &#123;      <span class="hljs-attr">message</span>: <span class="hljs-string">'Hello,Webpack'</span>,      <span class="hljs-attr">name</span>: <span class="hljs-string">'哈哈哈'</span>    &#125;  &#125;,  <span class="hljs-attr">methods</span>: &#123;    btnClick() &#123;&#125;  &#125;&#125;;<span class="hljs-number">3.</span> <span class="hljs-keyword">new</span> Vue(&#123;  <span class="hljs-attr">el</span>: <span class="hljs-string">'#app'</span>,  <span class="hljs-comment">//编译后，会直接把div替换掉</span>  template: <span class="hljs-string">'&lt;App/&gt;'</span>,  <span class="hljs-comment">//使用</span>  components: &#123;     <span class="hljs-comment">//注册</span>    App  &#125;&#125;);</code></pre><h4 id="2-文件化"><a href="#2-文件化" class="headerlink" title="2. 文件化"></a>2. 文件化</h4><blockquote><p>新建vue/app.js,把App代码拿过去，用导入导出的方式使用</p></blockquote><h4 id="3-演变成：使用app-vue"><a href="#3-演变成：使用app-vue" class="headerlink" title="3. 演变成：使用app.vue"></a>3. 演变成：使用app.vue</h4><ol><li><p>安装npm install –save-dev vue-loader vue-template-compiler</p></li><li><p>配置webpack.config.js</p></li></ol><pre><code class="hljs javascript">&#123;    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.vue$/</span>,    <span class="hljs-attr">use</span>: [<span class="hljs-string">'vue-loader'</span>]&#125;<span class="hljs-comment">// webpack.config.js</span><span class="hljs-keyword">const</span> VueLoaderPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'vue-loader/lib/plugin'</span>)<span class="hljs-built_in">module</span>.exports = &#123;  <span class="hljs-comment">// ...</span>  plugins: [    <span class="hljs-keyword">new</span> VueLoaderPlugin()  ]&#125;</code></pre><h1 id="六、插件的使用"><a href="#六、插件的使用" class="headerlink" title="六、插件的使用"></a>六、插件的使用</h1><h4 id="1-版权插件"><a href="#1-版权插件" class="headerlink" title="1. 版权插件"></a>1. 版权插件</h4><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack'</span>);plugins: [    <span class="hljs-keyword">new</span> VueLoaderPlugin(),<span class="hljs-keyword">new</span> webpack.BannerPlugin(<span class="hljs-string">'最终版权归Guzhz所有'</span>)]</code></pre><h4 id="2-打包生成index-html到dist中的插件"><a href="#2-打包生成index-html到dist中的插件" class="headerlink" title="2. 打包生成index.html到dist中的插件"></a>2. 打包生成index.html到dist中的插件</h4><p>安装：npm install html-webpack-plugin –save-dev</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'html-webpack-plugin'</span>);<span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;    <span class="hljs-attr">template</span>: <span class="hljs-string">'index.html'</span> <span class="hljs-comment">//不在需要手动引入script（删除）</span>&#125;)</code></pre><p><code>注意：删除配置的 publicPath: &#39;dist/&#39;</code></p><h4 id="3-丑化插件uglifyjs"><a href="#3-丑化插件uglifyjs" class="headerlink" title="3. 丑化插件uglifyjs"></a>3. 丑化插件uglifyjs</h4><p>安装：npm install <a href="mailto:uglifyjs-webpack-plugin@1.1.1" target="_blank" rel="noopener">uglifyjs-webpack-plugin@1.1.1</a> –save-dev</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> UglifyjsWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'uglifyjs-webpack-plugin'</span>);    <span class="hljs-keyword">new</span> UglifyjsWebpackPlugin()</code></pre><h4 id="4-搭建本地服务器（热部署）"><a href="#4-搭建本地服务器（热部署）" class="headerlink" title="4. 搭建本地服务器（热部署）"></a>4. 搭建本地服务器（热部署）</h4><p>安装：<a href="mailto:webpack-dev-server@2.9.1" target="_blank" rel="noopener">webpack-dev-server@2.9.1</a></p><pre><code>devServer: {   contextBase: &apos;./dist&apos;,   inline: true    //实时监听}</code></pre><p><code>把上面注释掉，配置webpack.json命令&quot;dev&quot;: &quot;webpack-dev-server --open&quot;</code></p><p>启动：npm run dev</p><p>部署：npm run build</p><h4 id="5-合并插件：环境的分离"><a href="#5-合并插件：环境的分离" class="headerlink" title="5. 合并插件：环境的分离"></a>5. 合并插件：环境的分离</h4><p>安装：npm install <a href="mailto:webpack-merge@4.1.5" target="_blank" rel="noopener">webpack-merge@4.1.5</a> –save-dev</p><pre><code class="hljs javascript">prod:    <span class="hljs-keyword">const</span> UglifyjsWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'uglifyjs-webpack-plugin'</span>);    <span class="hljs-keyword">const</span> WebpackMerge = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack-merge'</span>);    <span class="hljs-keyword">const</span> baseConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./base.config'</span>);    <span class="hljs-built_in">module</span>.exports = WebpackMerge(baseConfig, &#123;      <span class="hljs-attr">plugins</span>: [        <span class="hljs-keyword">new</span> UglifyjsWebpackPlugin()      ]    &#125;);dev:    <span class="hljs-keyword">const</span> WebpackMerge = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack-merge'</span>);    <span class="hljs-keyword">const</span> baseConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./base.config'</span>);    <span class="hljs-built_in">module</span>.exports = WebpackMerge (baseConfig, &#123;      <span class="hljs-attr">devServer</span>: &#123;        <span class="hljs-attr">contextBase</span>: <span class="hljs-string">'./dist'</span>,        <span class="hljs-attr">inline</span>: <span class="hljs-literal">true</span>    <span class="hljs-comment">//实时监听</span>      &#125;    &#125;);</code></pre><p>配置：</p><pre><code class="hljs javascript">package.json  <span class="hljs-string">"scripts"</span>: &#123;    <span class="hljs-string">"test"</span>: <span class="hljs-string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,    <span class="hljs-string">"build"</span>: <span class="hljs-string">"webpack --config ./build/prod.config.js"</span>,    <span class="hljs-string">"dev"</span>: <span class="hljs-string">"webpack-dev-server --open --config ./build/dev.config.js"</span>  &#125;,  <span class="hljs-attr">path</span>: path.resolve(__dirname,<span class="hljs-string">'../dist'</span>),   <span class="hljs-comment">//绝对路径</span></code></pre><p align="right"><br>2020年08月4日 中午<br>Guzhz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、传统的模块化&quot;&gt;&lt;a href=&quot;#一、传统的模块化&quot; class=&quot;headerlink&quot; title=&quot;一、传统的模块化&quot;&gt;&lt;/a&gt;一、传统的模块化&lt;/h1&gt;&lt;h4 id=&quot;1-导入导出&quot;&gt;&lt;a href=&quot;#1-导入导出&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="学习类" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%B1%BB/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>VUE学习（二）：组件化开发</title>
    <link href="http://yoursite.com/2020/07/26/VUE%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2020/07/26/VUE学习（二）：组件化开发/</id>
    <published>2020-07-26T15:49:04.000Z</published>
    <updated>2020-07-26T16:50:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、组件使用"><a href="#一、组件使用" class="headerlink" title="一、组件使用"></a>一、组件使用</h1><h4 id="1-1、组件化的基本使用（Vue-extend）"><a href="#1-1、组件化的基本使用（Vue-extend）" class="headerlink" title="1.1、组件化的基本使用（Vue.extend）"></a>1.1、组件化的基本使用（Vue.extend）</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  //使用  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-comment">//创建组件构造器对象</span>  <span class="hljs-keyword">const</span> cpnC = Vue.extend(&#123;    <span class="hljs-attr">template</span>: <span class="hljs-string">`      &lt;div&gt;        &lt;h2&gt;我是标题&lt;/h2&gt;        &lt;p&gt;我的内容&lt;/p&gt;        &lt;p&gt;我的内容，嘻嘻嘻&lt;/p&gt;      &lt;/div&gt;`</span>  &#125;);  <span class="hljs-comment">//注册为全局组件</span>  Vue.component(<span class="hljs-string">'my-cpn'</span>, cpnC)  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">message</span>: <span class="hljs-string">'你好啊'</span>    &#125;  &#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>底层实现原理就是通过，Vue.extend实现的</code></pre><h4 id="1-2、全局组件和局部组件"><a href="#1-2、全局组件和局部组件" class="headerlink" title="1.2、全局组件和局部组件"></a>1.2、全局组件和局部组件</h4><pre><code class="hljs javascript">&lt;script&gt;  <span class="hljs-comment">//在外部则为全局组件，多个vue对象都可用</span>  <span class="hljs-keyword">const</span> cpnC = Vue.extend(&#123;    <span class="hljs-attr">template</span>: <span class="hljs-string">`      &lt;div&gt;        &lt;h2&gt;我是标题&lt;/h2&gt;        &lt;p&gt;哈哈哈哈&lt;/p&gt;      &lt;/div&gt;    `</span>  &#125;);  <span class="hljs-comment">//全局注册</span>  <span class="hljs-comment">// Vue.component('cpn',cpnC);</span>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">message</span>: <span class="hljs-string">'你好啊'</span>    &#125;,    <span class="hljs-comment">//局部注册</span>    components: &#123;      <span class="hljs-attr">cpn</span>: cpnC    &#125;  &#125;);    <span class="hljs-comment">//多个Vue对象可以使用全局组件</span>  <span class="hljs-keyword">const</span> app2 = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">'#app2'</span>  &#125;)&lt;<span class="hljs-regexp">/script&gt;</span></code></pre><h4 id="1-3、父组件和子组件"><a href="#1-3、父组件和子组件" class="headerlink" title="1.3、父组件和子组件"></a>1.3、父组件和子组件</h4><pre><code class="hljs javascript">&lt;script&gt;  <span class="hljs-keyword">const</span> cpnC1 = Vue.extend(&#123;    <span class="hljs-attr">template</span>: <span class="hljs-string">`      &lt;div&gt;        &lt;h2&gt;子组件&lt;/h2&gt;        &lt;h2&gt;哈哈哈&lt;/h2&gt;      &lt;/div&gt;    `</span>  &#125;);  <span class="hljs-keyword">const</span> cpnC2 = Vue.extend(&#123;    <span class="hljs-attr">template</span>: <span class="hljs-string">`      &lt;div&gt;        &lt;h2&gt;父组件&lt;/h2&gt;        &lt;h2&gt;哈哈哈&lt;/h2&gt;        &lt;cpn1&gt;&lt;/cpn1&gt;      &lt;/div&gt;    `</span>,    <span class="hljs-attr">components</span>: &#123;      <span class="hljs-comment">//C2注册C1</span>      cpn1: cpnC1    &#125;  &#125;);  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">message</span>: <span class="hljs-string">'你好啊'</span>    &#125;,    <span class="hljs-attr">components</span>: &#123;      <span class="hljs-comment">//root组件使用C2(同时使用了C1)</span>      cpn2: cpnC2,      <span class="hljs-comment">//root组件也使用C1，则也要注册</span>      cpn1: cpnC1    &#125;  &#125;)&lt;<span class="hljs-regexp">/script&gt;</span></code></pre><h4 id="1-4、组件的语法糖注册方式（Vue-component）"><a href="#1-4、组件的语法糖注册方式（Vue-component）" class="headerlink" title="1.4、组件的语法糖注册方式（Vue.component）"></a>1.4、组件的语法糖注册方式（Vue.component）</h4><pre><code class="hljs javascript"><span class="hljs-comment">//开发中也是用这种方式，但底层还是使用Vue.extend</span>&lt;script&gt;  <span class="hljs-comment">//全局创建并注册，名字叫cpn1</span>  Vue.component(<span class="hljs-string">'cpn1'</span>,&#123;    <span class="hljs-attr">template</span>: <span class="hljs-string">`      &lt;div&gt;        &lt;h2&gt;语法糖写法&lt;/h2&gt;        &lt;h2&gt;哈哈哈&lt;/h2&gt;      &lt;/div&gt;    `</span>  &#125;);  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">message</span>: <span class="hljs-string">'你好啊'</span>    &#125;,    <span class="hljs-comment">//局部创建并注册，名字叫cpn2</span>    components: &#123;      <span class="hljs-string">'cpn2'</span>: &#123;        <span class="hljs-attr">template</span>: <span class="hljs-string">`          &lt;div&gt;            &lt;h2&gt;局部组件语法糖写法&lt;/h2&gt;            &lt;h2&gt;哈哈哈&lt;/h2&gt;          &lt;/div&gt;        `</span>      &#125;    &#125;  &#125;)&lt;<span class="hljs-regexp">/script&gt;</span></code></pre><h4 id="1-5、组件模板的分离写法（开发中使用）"><a href="#1-5、组件模板的分离写法（开发中使用）" class="headerlink" title="1.5、组件模板的分离写法（开发中使用）"></a>1.5、组件模板的分离写法（开发中使用）</h4><pre><code class="hljs html">1、分离创建<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/x-template"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>html分离写法<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>2、template标签创建<span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>template标签分离写法<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-comment">//创建并注册为全局</span>  Vue.component(<span class="hljs-string">'cpn'</span>,&#123;    <span class="hljs-attr">template</span>: <span class="hljs-string">'#cpn'</span>  &#125;);  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">message</span>: <span class="hljs-string">'你好啊'</span>    &#125;  &#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h4 id="1-6、组件中的数据存放问题"><a href="#1-6、组件中的数据存放问题" class="headerlink" title="1.6、组件中的数据存放问题"></a>1.6、组件中的数据存放问题</h4><pre><code class="hljs html">//函数、返回值为对象（存放属性）<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  Vue.component(<span class="hljs-string">'cpn'</span>,&#123;    <span class="hljs-attr">template</span>: <span class="hljs-string">'#cpn'</span>,    data() &#123;        <span class="hljs-keyword">return</span> &#123;        <span class="hljs-attr">title</span>: <span class="hljs-string">'我是大标题ccc'</span>      &#125;    &#125;  &#125;);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h4 id="1-7、组件中的data为什么是函数"><a href="#1-7、组件中的data为什么是函数" class="headerlink" title="1.7、组件中的data为什么是函数"></a>1.7、组件中的data为什么是函数</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!--创建三个实例对象，互不影响--&gt;</span>  <span class="hljs-comment">&lt;!--所以设计data为函数。就是为了互不干扰--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前计数：&#123;&#123;counter&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"increment"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"decrement"</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  Vue.component(<span class="hljs-string">'cpn'</span>,&#123;    <span class="hljs-attr">template</span>: <span class="hljs-string">'#cpn'</span>,    data() &#123;      <span class="hljs-keyword">return</span> &#123;        <span class="hljs-comment">//每次都new一个对象</span>        counter: <span class="hljs-number">0</span>      &#125;    &#125;,    <span class="hljs-attr">methods</span>: &#123;      increment() &#123;        <span class="hljs-keyword">this</span>.counter++;      &#125;,      decrement() &#123;        <span class="hljs-keyword">this</span>.counter--;      &#125;    &#125;  &#125;);  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">message</span>: <span class="hljs-string">'你好啊'</span>    &#125;  &#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h1 id="二、组件通信"><a href="#二、组件通信" class="headerlink" title="二、组件通信"></a>二、组件通信</h1><h4 id="2-1、父组件向子组件传递参数（props）"><a href="#2-1、父组件向子组件传递参数（props）" class="headerlink" title="2.1、父组件向子组件传递参数（props）"></a>2.1、父组件向子组件传递参数（props）</h4><pre><code class="hljs html">//在引用cpn时传递参数并起名字，子组件用的props接收，然后就在template里使用<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">:cmovies</span>=<span class="hljs-string">"movies"</span> <span class="hljs-attr">:cmessage</span>=<span class="hljs-string">"message"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;cmovies&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;cmessage&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-comment">//父传子 props</span>  <span class="hljs-keyword">const</span> cpn = &#123;    <span class="hljs-attr">template</span>: <span class="hljs-string">'#cpn'</span>,    <span class="hljs-comment">// props: ['cmovies','cmessage'],          //1 数组类型</span>    props: &#123;      <span class="hljs-comment">// cmovies: Array,  /*限定为数组*/         //2 限定类型</span>      <span class="hljs-comment">// cmessage: String</span>      cmovies: &#123;        <span class="hljs-comment">//3 限定类型同时设置默认值</span>        type: <span class="hljs-built_in">Array</span>,        <span class="hljs-keyword">default</span>() &#123;  <span class="hljs-comment">//高级版本必须以函数的形式返回</span>          <span class="hljs-keyword">return</span> []        &#125;      &#125;,      <span class="hljs-attr">cmessage</span>: &#123;                                        <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,        <span class="hljs-attr">default</span>: <span class="hljs-string">'aaaaaaaaaaa'</span>,        <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>  <span class="hljs-comment">//必须传值</span>      &#125;    &#125;  &#125;  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">message</span>: <span class="hljs-string">'你好啊1'</span>,      <span class="hljs-attr">movies</span>: [<span class="hljs-string">'aaa'</span>,<span class="hljs-string">'bbb'</span>,<span class="hljs-string">'ccc'</span>]<span class="hljs-comment">//定义数据</span>    &#125;,    <span class="hljs-attr">components</span>: &#123;      <span class="hljs-attr">cpn</span>: cpn    &#125;  &#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h4 id="2-2、父传子（props中的驼峰标识）"><a href="#2-2、父传子（props中的驼峰标识）" class="headerlink" title="2.2、父传子（props中的驼峰标识）"></a>2.2、父传子（props中的驼峰标识）</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!--html不能识别驼峰，需要把cInfo - 改为c-info--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">:c-info</span>=<span class="hljs-string">"info"</span> <span class="hljs-attr">:child-my-message</span>=<span class="hljs-string">"message"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>  <span class="hljs-comment">&lt;!--有多个参数需要显示，必须用东西包起来--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;cInfo&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;childMyMessage&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>props: &#123;cInfo: &#123;type: Object,default() &#123;return &#123;&#125;&#125;&#125;,    childMyMessage: &#123;   type: String,    default: ''    &#125;&#125;</code></pre><h4 id="2-3、子传父（自定义事件-emit）"><a href="#2-3、子传父（自定义事件-emit）" class="headerlink" title="2.3、子传父（自定义事件$emit）"></a>2.3、子传父（自定义事件$emit）</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!--不写参数默认传item过去--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> @<span class="hljs-attr">item-click</span>=<span class="hljs-string">"cpnClick"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span> //使用方法名绑定自己的方法<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>  <span class="hljs-comment">&lt;!--有多个参数需要显示，必须用东西包起来--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-comment">&lt;!--通过自定义事件，把参数传下去--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in categorys"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btnClick(item)"</span>&gt;</span>      &#123;&#123;item.name&#125;&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-keyword">const</span> cpn = &#123;    <span class="hljs-attr">template</span>: <span class="hljs-string">'#cpn'</span>,    data() &#123;      <span class="hljs-keyword">return</span> &#123;        <span class="hljs-attr">categorys</span>: [          &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">'aaa'</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">'热门推荐'</span>&#125;,          &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">'bbb'</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">'手机数码'</span>&#125;,          &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">'ccc'</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">'家用家电'</span>&#125;,          &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">'ddd'</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">'电脑办公'</span>&#125;        ]      &#125;    &#125;,    <span class="hljs-attr">methods</span>: &#123;      <span class="hljs-comment">//在这里把具体参数传给父组件</span>      btnClick(item) &#123;        <span class="hljs-comment">//(方法名，参数)</span>        <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'item-click'</span>,item);      &#125;    &#125;  &#125;  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">message</span>: <span class="hljs-string">'你好啊'</span>    &#125;,    <span class="hljs-attr">components</span>: &#123;      cpn    &#125;,    <span class="hljs-attr">methods</span>: &#123;      <span class="hljs-comment">//取得具体参数</span>      cpnClick(item)&#123;        <span class="hljs-built_in">console</span>.log(item.name);      &#125;    &#125;  &#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h4 id="2-4、父子组件通信案例"><a href="#2-4、父子组件通信案例" class="headerlink" title="2.4、父子组件通信案例"></a>2.4、父子组件通信案例</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">:number1</span>=<span class="hljs-string">"num1"</span> <span class="hljs-attr">:number2</span>=<span class="hljs-string">"num2"</span> @<span class="hljs-attr">dnumber1tofather</span>=<span class="hljs-string">"num1change"</span> @<span class="hljs-attr">dnumber2tofather</span>=<span class="hljs-string">"num2change"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>父组件-传给props：&#123;&#123;number1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-comment">&lt;!--    &lt;input type="text" v-model="dnumber1"&gt;--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>子组件-props赋值给data:&#123;&#123;dnumber1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"dnumber1"</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">"num1Input"</span>&gt;</span>  <span class="hljs-comment">&lt;!--拆分,通过方法发送$emit()--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>父组件-传给props：&#123;&#123;number2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-comment">&lt;!--    &lt;input type="text" v-model="dnumber2"&gt;--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>子组件-props赋值给data:&#123;&#123;dnumber2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"dnumber2"</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">"num2Input"</span>&gt;</span>  <span class="hljs-comment">&lt;!--拆分,通过方法发送$emit()--&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">num1</span>: <span class="hljs-number">1</span>,      <span class="hljs-attr">num2</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">methods</span>: &#123;      num1change(value) &#123;        <span class="hljs-keyword">this</span>.num1 = <span class="hljs-built_in">parseFloat</span>(value);      &#125;,      num2change(value) &#123;        <span class="hljs-keyword">this</span>.num2 = <span class="hljs-built_in">parseFloat</span>(value);      &#125;    &#125;,    <span class="hljs-attr">components</span>: &#123;      <span class="hljs-attr">cpn</span>: &#123;        <span class="hljs-attr">template</span>: <span class="hljs-string">'#cpn'</span>,        <span class="hljs-comment">//不能直接绑定到props里，会报错，需要绑定到data里</span>        props: &#123;          <span class="hljs-attr">number1</span>: <span class="hljs-built_in">Number</span>,          <span class="hljs-attr">number2</span>: <span class="hljs-built_in">Number</span>        &#125;,        data() &#123;          <span class="hljs-keyword">return</span> &#123;            <span class="hljs-attr">dnumber1</span>: <span class="hljs-keyword">this</span>.number1,            <span class="hljs-attr">dnumber2</span>: <span class="hljs-keyword">this</span>.number2          &#125;        &#125;,        <span class="hljs-attr">methods</span>: &#123;          num1Input(event) &#123;            <span class="hljs-keyword">this</span>.dnumber1 = event.target.value;            <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'dnumber1tofather'</span>,<span class="hljs-keyword">this</span>.dnumber1);            <span class="hljs-keyword">this</span>.dnumber2 = <span class="hljs-keyword">this</span>.dnumber1*<span class="hljs-number">100</span>;  <span class="hljs-comment">//num1 * 100 -&gt; num2  ，控制num2</span>            <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'dnumber2tofather'</span>,<span class="hljs-keyword">this</span>.dnumber2);          &#125;,          num2Input(event) &#123;            <span class="hljs-keyword">this</span>.dnumber2 = event.target.value;            <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'dnumber2tofather'</span>,<span class="hljs-keyword">this</span>.dnumber2);            <span class="hljs-keyword">this</span>.dnumber1 = <span class="hljs-keyword">this</span>.dnumber2/<span class="hljs-number">100</span>;  <span class="hljs-comment">//num1 * 100 -&gt; num2  ，控制num2</span>            <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'dnumber1tofather'</span>,<span class="hljs-keyword">this</span>.dnumber1);          &#125;        &#125;      &#125;    &#125;  &#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>需求：1、父传子2、子双向绑定3、子同步父4、通过子参数1修改子参数2，子参数参数1是子参数2的100倍，子参数2是子参数1的1/100，同时子同步父总结：1、父传子，子取得的参数不能直接绑定到子的props中，会报错，需要绑定到子的data中。2、拆分v-model为v-bind和v-on，并通过@input="num1Input"实时监听输入的数据，绑定方法，通过$emit修改父3、父接受，修改父参数。4、父参数修改时要注意类型不同的问题，需要把string转化为int</code></pre><h4 id="2-5、父子组件通信案例watch的使用"><a href="#2-5、父子组件通信案例watch的使用" class="headerlink" title="2.5、父子组件通信案例watch的使用"></a>2.5、父子组件通信案例watch的使用</h4><pre><code class="hljs html">//不拆分，直接双向绑定<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"dnumber1"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"dnumber2"</span>&gt;</span>//使用watch自己监听变量是否改变：有两个参数（newVaule，oldValue）watch: &#123;    //配合v-model，实时绑定，监听变量是否发生改变    dnumber1(newValue) &#123;        this.dnumber2 = this.dnumber1*100;        //一旦改变，就可以监听到dnumber2        this.$emit('dnumber1tofather',newValue);  //改变自身的props    &#125;,    dnumber2(newValue) &#123;        this.dnumber1 = this.dnumber2/100;       //num1 * 100 -&gt; num2  ，控制num2        this.$emit('dnumber2tofather',newValue);    &#125;&#125;</code></pre><h4 id="2-6、父访问子（-children和-refs）"><a href="#2-6、父访问子（-children和-refs）" class="headerlink" title="2.6、父访问子（$children和$refs）"></a>2.6、父访问子（$children和$refs）</h4><pre><code class="hljs html">//需求：多个子组件，点击按钮获得子组件的参数<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"aaa"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"bbb"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"ccc"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btnClick"</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是子组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">message</span>: <span class="hljs-string">'你好啊'</span>    &#125;,    <span class="hljs-attr">methods</span>: &#123;      btnClick() &#123;        <span class="hljs-comment">//$children 不好，不常用，一旦多个子组件顺序发生变化，则可能获得的组件会错乱</span>        <span class="hljs-comment">// console.log(this.$children);</span>        <span class="hljs-comment">// for (let c of this.$children) &#123;</span>        <span class="hljs-comment">//   console.log(c.name);</span>        <span class="hljs-comment">//   c.showMessage();</span>        <span class="hljs-comment">// &#125;</span>        <span class="hljs-comment">//开发中用$ref，绑定ref属性作为key，可以不受索引的影响 =&gt; 默认是空对象</span>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.$refs.aaa.name);      &#125;    &#125;,    <span class="hljs-attr">components</span>: &#123;      <span class="hljs-attr">cpn</span>: &#123;        <span class="hljs-attr">template</span>: <span class="hljs-string">'#cpn'</span>,        data() &#123;          <span class="hljs-keyword">return</span> &#123;            <span class="hljs-attr">name</span>: <span class="hljs-string">'我是子组件的name'</span>          &#125;        &#125;,        <span class="hljs-attr">methods</span>: &#123;          showMessage() &#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'showMessage的内容被访问了'</span>);          &#125;        &#125;      &#125;    &#125;  &#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h4 id="2-7-子访问父（-parent和-root）"><a href="#2-7-子访问父（-parent和-root）" class="headerlink" title="2.7 子访问父（$parent和$root）"></a>2.7 子访问父（$parent和$root）</h4><pre><code class="hljs html">//代码大意：ccpn通过按钮访问cpn的参数，和vue(root)的参数<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    我是cpn组件    <span class="hljs-tag">&lt;<span class="hljs-name">ccpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ccpn</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ccpn"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是子子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btnClick"</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">message</span>: <span class="hljs-string">'你好啊'</span>    &#125;,    <span class="hljs-comment">//cpn------------</span>    components: &#123;      <span class="hljs-attr">cpn</span>: &#123;        <span class="hljs-attr">template</span>: <span class="hljs-string">'#cpn'</span>,        data() &#123;          <span class="hljs-keyword">return</span> &#123;            <span class="hljs-attr">name</span>: <span class="hljs-string">'我的cpn的name'</span>          &#125;        &#125;,        <span class="hljs-comment">//ccpn---------------</span>        components: &#123;          <span class="hljs-attr">ccpn</span>: &#123;            <span class="hljs-attr">template</span>: <span class="hljs-string">'#ccpn'</span>,            <span class="hljs-attr">methods</span>: &#123;              btnClick() &#123;                <span class="hljs-comment">//1、访问父组件</span>                <span class="hljs-comment">// console.log(this.$parent);</span>                <span class="hljs-comment">// console.log(this.$parent.name);</span>                <span class="hljs-comment">//2、直接访问根组件$root</span>                <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.$root);                <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.$root.message);              &#125;            &#125;          &#125;        &#125;      &#125;    &#125;  &#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h1 id="三、插槽使用"><a href="#三、插槽使用" class="headerlink" title="三、插槽使用"></a>三、插槽使用</h1><h4 id="3-1、slot-插槽的基本使用"><a href="#3-1、slot-插槽的基本使用" class="headerlink" title="3.1、slot-插槽的基本使用"></a>3.1、slot-插槽的基本使用</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>哈哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>//直接替代  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span>  //多个一起替代    <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>嘻嘻嘻<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>可以多个<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>一起替代<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是组件、哈哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>  <span class="hljs-comment">&lt;!--插槽并有默认值--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></pre><h4 id="3-2、slot-具名插槽的使用"><a href="#3-2、slot-具名插槽的使用" class="headerlink" title="3.2、slot-具名插槽的使用"></a>3.2、slot-具名插槽的使用</h4><pre><code class="hljs html">//顾名思义，为了解决多个插槽，如何指定使用某个插槽，的问题<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!--不指定名字则把没有名字的都替换掉--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span>    //先插入，再指定名字    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"center"</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-comment">&lt;!--指定使用中间那个--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"left"</span>&gt;</span>返回<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-comment">&lt;!--指定使用左边那个--&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>  <span class="hljs-comment">&lt;!--name：指定哪一个--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"left"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>左边<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"center"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>中间<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"right"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>右边<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></pre><h4 id="3-3、关于插槽，父子参数的编译作用域"><a href="#3-3、关于插槽，父子参数的编译作用域" class="headerlink" title="3.3、关于插槽，父子参数的编译作用域"></a>3.3、关于插槽，父子参数的编译作用域</h4><pre><code class="hljs html">//总结：是谁，就用谁的参数，父不能直接使用子的参数，反之亦然<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!--变量是在vue实例里找的，这些cpn当于普通标签--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"isShow"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>  //可以显示<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是内容，哈哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-comment">&lt;!--这个变量就在组件里找，这里是false--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"isShow"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>const app = new Vue(&#123;    el: "#app",    data: &#123;      isShow: true    &#125;,    components: &#123;      cpn: &#123;        template: '#cpn'      &#125;,      data() &#123;        return &#123;          isShow: false        &#125;      &#125;    &#125;&#125;)</code></pre><h4 id="3-4、编译作用域插槽的案例（解决参数传递）"><a href="#3-4、编译作用域插槽的案例（解决参数传递）" class="headerlink" title="3.4、编译作用域插槽的案例（解决参数传递）"></a>3.4、编译作用域插槽的案例（解决参数传递）</h4><pre><code class="hljs html"><span class="hljs-comment">&lt;!--需求：获得子组件的data，另起格式排列，主要是获得data--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span>    <span class="hljs-comment">&lt;!--通过slot传递参数，2.5.x以下必须使用template包裹--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"slot"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;slot.data.join(' - ')&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span>    <span class="hljs-comment">&lt;!--通过slot传递参数，2.5.x以下必须使用template包裹--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"slot"</span>&gt;</span>  <span class="hljs-comment">&lt;!--拿到插槽对象--&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;slot.data.join(' * ')&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-comment">&lt;!--把数据传上去--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">"pLanguages"</span>&gt;</span>  <span class="hljs-comment">&lt;!--起名字为data（随意）--&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in pLanguages"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">message</span>: <span class="hljs-string">'你好啊'</span>    &#125;,    <span class="hljs-attr">components</span>: &#123;      <span class="hljs-attr">cpn</span>: &#123;        <span class="hljs-attr">template</span>: <span class="hljs-string">'#cpn'</span>,        data() &#123;          <span class="hljs-keyword">return</span> &#123;            <span class="hljs-attr">pLanguages</span>: [<span class="hljs-string">'C'</span>,<span class="hljs-string">'Javascript'</span>,<span class="hljs-string">'C++'</span>,<span class="hljs-string">'C#'</span>,<span class="hljs-string">'Python'</span>]          &#125;        &#125;      &#125;    &#125;  &#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p align="right"><br>2020年07月26日 晚上<br>Guzhz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、组件使用&quot;&gt;&lt;a href=&quot;#一、组件使用&quot; class=&quot;headerlink&quot; title=&quot;一、组件使用&quot;&gt;&lt;/a&gt;一、组件使用&lt;/h1&gt;&lt;h4 id=&quot;1-1、组件化的基本使用（Vue-extend）&quot;&gt;&lt;a href=&quot;#1-1、组件化的基本使用（
      
    
    </summary>
    
      <category term="学习类" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%B1%BB/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>VUE学习（一）：基础语法</title>
    <link href="http://yoursite.com/2020/07/26/VUE%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2020/07/26/VUE学习（一）：基础语法/</id>
    <published>2020-07-26T14:49:04.000Z</published>
    <updated>2020-07-26T16:50:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>前言：本笔记为VUE基础语法的使用。<a href="https://www.bilibili.com/video/BV15741177Eh" title="点击查看" target="_blank" rel="noopener">B站视频链接</a></p><hr><h1 id="一、插值的操作"><a href="#一、插值的操作" class="headerlink" title="一、插值的操作"></a>一、插值的操作</h1><h4 id="1-1、Mustache语法"><a href="#1-1、Mustache语法" class="headerlink" title="1.1、Mustache语法"></a>1.1、Mustache语法</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;，嘻嘻嘻！<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;first + " " + end&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;counter * 3&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>直接包裹变量、变量拼接、变量数学运算</code></pre><h4 id="1-2、v-once指令的使用"><a href="#1-2、v-once指令的使用" class="headerlink" title="1.2、v-once指令的使用"></a>1.2、v-once指令的使用</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> <span class="hljs-comment">&lt;!--不可以被修改--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>使用了v-once后，变量被修改，值不影响</code></pre><h4 id="1-3、v-html指令的使用"><a href="#1-3、v-html指令的使用" class="headerlink" title="1.3、v-html指令的使用"></a>1.3、v-html指令的使用</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">"url"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>url: '<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://www.baidu.com"</span>&gt;</span>百度一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>'</code></pre><h4 id="1-4、v-text指令的使用"><a href="#1-4、v-text指令的使用" class="headerlink" title="1.4、v-text指令的使用"></a>1.4、v-text指令的使用</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">"message"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>不用Mustache语法包裹</code></pre><h4 id="1-5、v-pre指令的使用"><a href="#1-5、v-pre指令的使用" class="headerlink" title="1.5、v-pre指令的使用"></a>1.5、v-pre指令的使用</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> <span class="hljs-comment">&lt;!--不解析 Previous--&gt;</span>原样输出内容：&#123;&#123;message&#125;&#125; -&gt; &#123;&#123;message&#125;&#125;</code></pre><h4 id="1-6、v-cloak指令的使用"><a href="#1-6、v-cloak指令的使用" class="headerlink" title="1.6、v-cloak指令的使用"></a>1.6、v-cloak指令的使用</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-attr">[v-cloak]</span> &#123;        <span class="hljs-attribute">display</span>: none;    &#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span> <span class="hljs-attr">v-cloak</span>&gt;</span>  <span class="hljs-comment">&lt;!--消除闪烁问题，斗篷--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><h1 id="二、动态绑定属性：v-bind"><a href="#二、动态绑定属性：v-bind" class="headerlink" title="二、动态绑定属性：v-bind"></a>二、动态绑定属性：v-bind</h1><h4 id="2-1、v-bind（-）"><a href="#2-1、v-bind（-）" class="headerlink" title="2.1、v-bind（:）"></a>2.1、v-bind（:）</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">"myhref"</span>&gt;</span>bilibili<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>   <span class="hljs-comment">&lt;!--语法糖：只写“:”--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>data: &#123;message: '你好啊',myhref: 'https://www.bilibili.com/'&#125;VUE托管属性、绑定属性</code></pre><h4 id="2-2、v-bind动态绑定class属性（对象语法）"><a href="#2-2、v-bind动态绑定class属性（对象语法）" class="headerlink" title="2.2、v-bind动态绑定class属性（对象语法）"></a>2.2、v-bind动态绑定class属性（对象语法）</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"&#123;active: isActive, line: isLine&#125;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"getClasses()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"btnClick"</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>data: &#123; message: '你好啊',     isActive: true,     isLine: true&#125;,methods: &#123;btnClick: function () &#123;this.isActive = !this.isActive;&#125;,getClasses: function () &#123;return &#123;active: this.isActive, line: this.isLine&#125;&#125;&#125;效果：点击按钮，切换active</code></pre><h4 id="2-3、v-bind动态绑定class属性（数组语法）"><a href="#2-3、v-bind动态绑定class属性（数组语法）" class="headerlink" title="2.3、v-bind动态绑定class属性（数组语法）"></a>2.3、v-bind动态绑定class属性（数组语法）</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"['active','line']"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>//这里为字符串  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"[active,line]"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>//这里为数组变量  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"getClasses()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>//通过方法获得数组变量<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">message</span>: <span class="hljs-string">'你好啊'</span>,      <span class="hljs-attr">active</span>: <span class="hljs-string">'aaa'</span>,      <span class="hljs-attr">line</span>: <span class="hljs-string">'bbb'</span>    &#125;,    <span class="hljs-attr">methods</span>: &#123;      <span class="hljs-attr">getClasses</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">return</span> [<span class="hljs-keyword">this</span>.active,<span class="hljs-keyword">this</span>.line]      &#125;    &#125;  &#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h4 id="2-4、v-bind动态绑定style属性（对象语法）"><a href="#2-4、v-bind动态绑定style属性（对象语法）" class="headerlink" title="2.4、v-bind动态绑定style属性（对象语法）"></a>2.4、v-bind动态绑定style属性（对象语法）</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"&#123;fontSize: finalSize + 'px',background: finalColor&#125;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"getStyle()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"&#123;'font-size': '50px'&#125;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">message</span>: <span class="hljs-string">'你好啊'</span>,      <span class="hljs-attr">finalSize</span>: <span class="hljs-number">100</span>,      <span class="hljs-attr">finalColor</span>: <span class="hljs-string">'red'</span>    &#125;,    <span class="hljs-attr">methods</span>: &#123;      <span class="hljs-attr">getStyle</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">fontSize</span>: <span class="hljs-keyword">this</span>.finalSize + <span class="hljs-string">'px'</span>,<span class="hljs-attr">background</span>: <span class="hljs-keyword">this</span>.finalColor&#125;      &#125;    &#125;  &#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h4 id="2-5、v-bind动态绑定style属性（数组语法）"><a href="#2-5、v-bind动态绑定style属性（数组语法）" class="headerlink" title="2.5、v-bind动态绑定style属性（数组语法）"></a>2.5、v-bind动态绑定style属性（数组语法）</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"[baseStyle]"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">message</span>: <span class="hljs-string">'你好啊'</span>,      <span class="hljs-attr">baseStyle</span>: &#123;<span class="hljs-attr">background</span>: <span class="hljs-string">'red'</span>&#125;    &#125;  &#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>比较少用、这种用法相当于套娃</code></pre><h1 id="三、计算属性：computed（有缓存、效率高）"><a href="#三、计算属性：computed（有缓存、效率高）" class="headerlink" title="三、计算属性：computed（有缓存、效率高）"></a>三、计算属性：computed（有缓存、效率高）</h1><h4 id="3-1、计算属性的基本用法"><a href="#3-1、计算属性的基本用法" class="headerlink" title="3.1、计算属性的基本用法"></a>3.1、计算属性的基本用法</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>computed: &#123;//计算属性，注重“属性”，命名方式不用get set，直接用就可以了fullName: function () &#123;return this.firstName + ' ' + this.lastName&#125;&#125;</code></pre><h4 id="3-2、计算属性的复杂操作"><a href="#3-2、计算属性的复杂操作" class="headerlink" title="3.2、计算属性的复杂操作"></a>3.2、计算属性的复杂操作</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格：&#123;&#123;totalPrice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">books</span>: [        &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">110</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">'Unix编程艺术'</span>,<span class="hljs-attr">price</span>: <span class="hljs-number">119</span>&#125;,        &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">111</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">'代码大全'</span>,<span class="hljs-attr">price</span>: <span class="hljs-number">105</span>&#125;,        &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">112</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">'计算机原理'</span>,<span class="hljs-attr">price</span>: <span class="hljs-number">98</span>&#125;,        &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">113</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">'现代操作系统'</span>,<span class="hljs-attr">price</span>: <span class="hljs-number">97</span>&#125;,      ]    &#125;,    <span class="hljs-comment">//有缓存，效率高</span>    computed: &#123;      <span class="hljs-attr">totalPrice</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-keyword">this</span>.books.length; i++)&#123;          result += <span class="hljs-keyword">this</span>.books[i].price;        &#125;        <span class="hljs-keyword">return</span> result;      &#125;    &#125;  &#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h4 id="3-3、计算属性的setter和getter"><a href="#3-3、计算属性的setter和getter" class="headerlink" title="3.3、计算属性的setter和getter"></a>3.3、计算属性的setter和getter</h4><pre><code class="hljs js">computed: &#123;<span class="hljs-comment">//简写,默认是get</span>fullName: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fullName'</span>);<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName +<span class="hljs-string">' '</span>+ <span class="hljs-keyword">this</span>.lastName;&#125;&#125;<span class="hljs-comment">// 原理写法，一般我们用不到set，所以省略</span>computed: &#123;<span class="hljs-attr">fullName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-keyword">set</span>() &#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'只要值改变，就会默认调用'</span>)&#125;<span class="hljs-keyword">get</span>() &#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fullName'</span>);<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName +<span class="hljs-string">' '</span>+ <span class="hljs-keyword">this</span>.lastName;&#125;&#125;&#125;</code></pre><h1 id="四、事件监听：v-on"><a href="#四、事件监听：v-on" class="headerlink" title="四、事件监听：v-on"></a>四、事件监听：v-on</h1><h4 id="4-1、v-on的基本使用：计数器"><a href="#4-1、v-on的基本使用：计数器" class="headerlink" title="4.1、v-on的基本使用：计数器"></a>4.1、v-on的基本使用：计数器</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>计数器：&#123;&#123;counter&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"increment"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"decrement"</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,    <span class="hljs-attr">data</span>: &#123;      <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">methods</span>: &#123;      increment() &#123;        <span class="hljs-keyword">this</span>.counter++;      &#125;,      decrement() &#123;        <span class="hljs-keyword">this</span>.counter--;      &#125;    &#125;  &#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h4 id="4-2、v-on的参数问题"><a href="#4-2、v-on的参数问题" class="headerlink" title="4.2、v-on的参数问题"></a>4.2、v-on的参数问题</h4><pre><code class="hljs html">无参：两者一样@click="btn1Click"@click="btn1Click()" 有参：正常：    @click="btn2Click(123)"undefined：   @click="btn2Click()"传进去了event：@click="btn2Click"指定获得event：@click="btn3Click(123,$event)"</code></pre><h4 id="4-3、v-on的修饰符"><a href="#4-3、v-on的修饰符" class="headerlink" title="4.3、v-on的修饰符"></a>4.3、v-on的修饰符</h4><pre><code class="hljs html">1：.stop的使用：阻止冒泡，点击div不冒泡button（div包裹button）<span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"divClick"</span>&gt;</span>    aa    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">"btnClick"</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>2：.prevent的使用：阻止提交<span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"http://www.baidu.com"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">"submitClick"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>3：@keyup键帽监听：弹起键帽执行事件<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">"keyUp"</span>&gt;</span> //指定为enter键4：.once：只能点击一次<span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.once</span>=<span class="hljs-string">"btn2Click"</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></code></pre><h1 id="五、条件判断"><a href="#五、条件判断" class="headerlink" title="五、条件判断"></a>五、条件判断</h1><h4 id="5-1、if-else-if-else"><a href="#5-1、if-else-if-else" class="headerlink" title="5.1、if else-if else"></a>5.1、if else-if else</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"score&gt;=90"</span>&gt;</span>优秀<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"score&gt;=80"</span>&gt;</span>良好<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"score&gt;=60"</span>&gt;</span>及格<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else</span>&gt;</span>不及格<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><h4 id="5-2、用户登录切换案例：问题（组件复用导致input值滞留）"><a href="#5-2、用户登录切换案例：问题（组件复用导致input值滞留）" class="headerlink" title="5.2、用户登录切换案例：问题（组件复用导致input值滞留）"></a>5.2、用户登录切换案例：问题（组件复用导致input值滞留）</h4><pre><code class="hljs html">需求：不需要复用，则加入key属性，给每个input添加key后则不会被复用<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isUser"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"username"</span>&gt;</span>用户账号<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"账号"</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"username"</span>&gt;</span> <span class="hljs-comment">&lt;!--标识，不一样则不复用--&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"email"</span>&gt;</span>用户邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"邮箱"</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"email"</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    //思想：直接取反即可，不需要写方法  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"isUser = !isUser"</span>&gt;</span>切换类型<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>data: &#123;isUser: true&#125;</code></pre><h4 id="5-3、v-if和v-show的区别"><a href="#5-3、v-if和v-show的区别" class="headerlink" title="5.3、v-if和v-show的区别"></a>5.3、v-if和v-show的区别</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"aaa"</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"false"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-comment">&lt;!--修改样式 display:none--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"bbb"</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"false"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-comment">&lt;!--移除dom 不解析--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><h1 id="六、循环遍历：v-for"><a href="#六、循环遍历：v-for" class="headerlink" title="六、循环遍历：v-for"></a>六、循环遍历：v-for</h1><h4 id="6-1、v-for遍历数组"><a href="#6-1、v-for遍历数组" class="headerlink" title="6.1、v-for遍历数组"></a>6.1、v-for遍历数组</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(i,index) in names"</span>&gt;</span>&#123;&#123;index+1&#125;&#125;.&#123;&#123;i&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>//取得下标从1开始显示<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>data: &#123;names: ['aa','bb','cc','dd']&#125;</code></pre><h4 id="6-2、v-for遍历对象"><a href="#6-2、v-for遍历对象" class="headerlink" title="6.2、v-for遍历对象"></a>6.2、v-for遍历对象</h4><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- value在左 ，一个item默认取value值--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(value,key) in info"</span>&gt;</span>&#123;&#123;key&#125;&#125; = &#123;&#123;value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><span class="hljs-comment">&lt;!-- 也取下标 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>      =    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(value,key,index) in info"</span>&gt;</span>&#123;&#123;index&#125;&#125;.&#123;&#123;key&#125;&#125; = &#123;&#123;value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>data: &#123;    info: &#123;        name: 'aa',        age: 18,        height: 1.88    &#125;&#125;</code></pre><h4 id="6-3、哪些数组方法是响应式"><a href="#6-3、哪些数组方法是响应式" class="headerlink" title="6.3、哪些数组方法是响应式"></a>6.3、哪些数组方法是响应式</h4><pre><code class="hljs js">响应式：<span class="hljs-number">1</span>、追加push()：<span class="hljs-keyword">this</span>.letters.push(<span class="hljs-string">'aaa'</span>);    <span class="hljs-number">2</span>、删除最后一个pop()：<span class="hljs-keyword">this</span>.letters.pop();    <span class="hljs-number">3</span>、删除第一个shift()：<span class="hljs-keyword">this</span>.letters.shift();<span class="hljs-number">4</span>、在前面追加unshift()：<span class="hljs-keyword">this</span>.letters.unshift(<span class="hljs-string">'aaa'</span>,<span class="hljs-string">'bbb'</span>);  * <span class="hljs-number">5</span>、切片splice(位置、删除个数（空则删除后面所有）、插入)：- <span class="hljs-keyword">this</span>.letters.splice(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);  <span class="hljs-comment">//删除第二个元素</span>- <span class="hljs-keyword">this</span>.letters.splice(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">'cc'</span>,<span class="hljs-string">'dd'</span>,<span class="hljs-string">'ee'</span>) <span class="hljs-comment">//替换三个</span>- <span class="hljs-keyword">this</span>.letters.splice(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-string">"aaa"</span>,<span class="hljs-string">'ccc'</span>);      <span class="hljs-comment">//二号位插入两个</span><span class="hljs-number">6</span>、排序：sort()：<span class="hljs-keyword">this</span>.letters.sort();<span class="hljs-number">7</span>、反转：reverse()：<span class="hljs-keyword">this</span>.letters.reverse();非响应式：直接通过下标修改值：<span class="hljs-keyword">this</span>.letters[<span class="hljs-number">0</span>] = <span class="hljs-string">'aaa'</span>;解决：<span class="hljs-number">1</span>、<span class="hljs-keyword">this</span>.letters.splice(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-string">"aaa"</span>);   <span class="hljs-comment">//替换</span> <span class="hljs-number">2</span>、Vue.set(<span class="hljs-keyword">this</span>.letters,<span class="hljs-number">0</span>,<span class="hljs-string">'aaaaaa'</span>); <span class="hljs-comment">//对象、索引、修改值</span></code></pre><h1 id="七、书籍购物车案例知识点"><a href="#七、书籍购物车案例知识点" class="headerlink" title="七、书籍购物车案例知识点"></a>七、书籍购物车案例知识点</h1><h4 id="7-1、for循环的另一种用法（js"><a href="#7-1、for循环的另一种用法（js" class="headerlink" title="7.1、for循环的另一种用法（js)"></a>7.1、for循环的另一种用法（js)</h4><pre><code class="hljs js"><span class="hljs-comment">//of直接取值</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> book <span class="hljs-keyword">of</span> <span class="hljs-keyword">this</span>.books) &#123;totalPrice += book.price * book.count;&#125;</code></pre><h4 id="7-2、VUE高级函数用法"><a href="#7-2、VUE高级函数用法" class="headerlink" title="7.2、VUE高级函数用法"></a>7.2、VUE高级函数用法</h4><pre><code class="hljs js">需求：过滤数组的为<span class="hljs-number">100</span>以内然后乘<span class="hljs-number">2</span>的累加值。<span class="hljs-keyword">const</span> nums = [<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>];<span class="hljs-comment">//分开写法</span><span class="hljs-keyword">let</span> newNums = nums.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;    <span class="hljs-keyword">return</span> n&lt;<span class="hljs-number">100</span>;<span class="hljs-comment">//条件过滤</span>&#125;);<span class="hljs-keyword">let</span> newNums2 = newNums.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;    <span class="hljs-keyword">return</span> n*<span class="hljs-number">2</span>;<span class="hljs-comment">//进一步操作</span>&#125;);<span class="hljs-comment">//两个参数，第一个与上一个的返回值有关。默认从0为第一次遍历的上一个个值，</span><span class="hljs-keyword">let</span> total = newNums2.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">previousValue,n</span>) </span>&#123;    <span class="hljs-keyword">return</span> previousValue + n;<span class="hljs-comment">//递归遍历</span>&#125;,<span class="hljs-number">0</span>);<span class="hljs-comment">//合并写法：</span><span class="hljs-keyword">let</span> total = nums.filter(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n&lt;<span class="hljs-number">100</span>).map(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n*<span class="hljs-number">2</span>).reduce(<span class="hljs-function">(<span class="hljs-params">pre,n</span>) =&gt;</span> pre+n);</code></pre><h4 id="7-3、filters过滤器"><a href="#7-3、filters过滤器" class="headerlink" title="7.3、filters过滤器"></a>7.3、filters过滤器</h4><pre><code class="hljs html">//使用<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.price | showPrice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>//指定格式显示filters: &#123;    showPrice(price) &#123;    return "￥" + price.toFixed(2); //保留两位小数    &#125;&#125;</code></pre><h1 id="八、双向绑定：v-model"><a href="#八、双向绑定：v-model" class="headerlink" title="八、双向绑定：v-model"></a>八、双向绑定：v-model</h1><h4 id="8-1、v-model的基本使用"><a href="#8-1、v-model的基本使用" class="headerlink" title="8.1、v-model的基本使用"></a>8.1、v-model的基本使用</h4><pre><code class="hljs html"><span class="hljs-comment">&lt;!--双向绑定：同步修改--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"message"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>message: '你好啊'</code></pre><h4 id="8-2、v-model的原理"><a href="#8-2、v-model的原理" class="headerlink" title="8.2、v-model的原理"></a>8.2、v-model的原理</h4><pre><code class="hljs html">//v-bind和v-on的结合体：原理就是修改了input内容的值，通过v-on绑定事件修改了值，然后用v-bind显示值<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"message"</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">"message = $event.target.value"</span>&gt;</span>//内容监听的简写</code></pre><h4 id="8-3、v-model结合radio类型"><a href="#8-3、v-model结合radio类型" class="headerlink" title="8.3、v-model结合radio类型"></a>8.3、v-model结合radio类型</h4><pre><code class="hljs html"><span class="hljs-comment">&lt;!--双向绑定同一个变量，默认就互斥，可以不需要name--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"male"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"男"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"sex"</span>&gt;</span>男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"female"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"女"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"sex"</span>&gt;</span>女<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>性别：&#123;&#123;sex&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>sex: '女'  //默认</code></pre><h4 id="8-4、v-model结合checkbox类型"><a href="#8-4、v-model结合checkbox类型" class="headerlink" title="8.4、v-model结合checkbox类型"></a>8.4、v-model结合checkbox类型</h4><pre><code class="hljs html">//checkbox单选：同意协议场景，同意了则给点击<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"agree"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"isAgree"</span>&gt;</span>同意协议<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"!isAgree"</span>&gt;</span>下一步<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>isAgree: false, //选中了则改为true</code></pre><pre><code class="hljs html">//checkbox多选<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"唱"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"hobbies"</span>&gt;</span>唱<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"跳"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"hobbies"</span>&gt;</span>跳<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"rap"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"hobbies"</span>&gt;</span>rap<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"篮球"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"hobbies"</span>&gt;</span>篮球<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>您的爱好是：&#123;&#123;hobbies&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>hobbies: [],   //选中了则存到数组中</code></pre><pre><code class="hljs html">//值绑定：使用场景为，不写死，动态获取，给定初始值<span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">:for</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in originHobbies"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"hobbies"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>originHobbies: ['唱','跳','rap','篮球','足球','排球']</code></pre><h4 id="8-5、v-model结合select类型"><a href="#8-5、v-model结合select类型" class="headerlink" title="8.5、v-model结合select类型"></a>8.5、v-model结合select类型</h4><pre><code class="hljs html"> <span class="hljs-comment">&lt;!--单选--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"fruit"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"fruit"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"苹果"</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"香蕉"</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"榴莲"</span>&gt;</span>榴莲<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"葡萄"</span>&gt;</span>葡萄<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"西瓜"</span>&gt;</span>西瓜<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你选中的是：&#123;&#123;fruit&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>fruit: '香蕉', //默认选中香蕉<span class="hljs-comment">&lt;!--多选--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"fruits"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">""</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"fruits"</span> <span class="hljs-attr">multiple</span>&gt;</span>//按住ctrl多选    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"苹果"</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"香蕉"</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"榴莲"</span>&gt;</span>榴莲<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"葡萄"</span>&gt;</span>葡萄<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"西瓜"</span>&gt;</span>西瓜<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你选中的是：&#123;&#123;fruits&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>fruits: []  //用数组存值</code></pre><h4 id="8-6、v-model修饰符的使用"><a href="#8-6、v-model修饰符的使用" class="headerlink" title="8.6、v-model修饰符的使用"></a>8.6、v-model修饰符的使用</h4><pre><code class="hljs html">//1、修饰符.lazy：懒加载<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">"message"</span>&gt;</span>  <span class="hljs-comment">&lt;!--不实时，回车、或者失去焦点才同步--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>//2、修饰符.number：改变input默认获得string类型为number类型（免去转化）<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"number"</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">"age"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;typeof age&#125;&#125;类型：&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>//3、修饰符.trim：去首尾空格<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">"name"</span>&gt;</span>message: '你好啊',age: 0,name: ''</code></pre><p align="right"><br>2020年07月26日 凌晨<br>Guzhz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：本笔记为VUE基础语法的使用。&lt;a href=&quot;https://www.bilibili.com/video/BV15741177Eh&quot; title=&quot;点击查看&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站视频链接&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;
      
    
    </summary>
    
      <category term="学习类" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%B1%BB/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>在线订餐系统知识点总结</title>
    <link href="http://yoursite.com/2020/07/12/%E5%9C%A8%E7%BA%BF%E8%AE%A2%E9%A4%90%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/07/12/在线订餐系统知识点总结/</id>
    <published>2020-07-12T14:49:04.000Z</published>
    <updated>2020-08-04T15:26:53.264Z</updated>
    
    <content type="html"><![CDATA[<p>项目背景：在线订餐系统是基于springboot和bootstrap的JavaEE项目，主要实现用户订餐，管理员接单等操作。</p><h1 id="SpringBoot基本配置"><a href="#SpringBoot基本配置" class="headerlink" title="SpringBoot基本配置"></a>SpringBoot基本配置</h1><h4 id="1、阿里巴巴druid配置"><a href="#1、阿里巴巴druid配置" class="headerlink" title="1、阿里巴巴druid配置"></a>1、阿里巴巴druid配置</h4><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><pre><code class="hljs properties">spring:  datasource:    username: root    password: 123456    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://localhost:3306/springboot_orderfood_end?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&amp;allowPublicKeyRetrieval=true    type: com.alibaba.druid.pool.DruidDataSource    initialSize: 5    minIdle: 5    maxActive: 20    maxWait: 60000    timeBetweenEvictionRunsMillis: 60000    minEvictableIdleTimeMillis: 300000    validationQuery: SELECT 1 FROM DUAL    testWhileIdle: true    testOnBorrow: false    testOnReturn: false    poolPreparedStatements: true    filters: stat,wall    maxPoolPreparedStatementPerConnectionSize: 20    useGlobalDataSourceStat: true    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</code></pre><h4 id="2、整合swagger"><a href="#2、整合swagger" class="headerlink" title="2、整合swagger"></a>2、整合swagger</h4><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>Config配置类添加注解：@EnableSwagger2使用 http://localhost:8080/swagger-ui.html#/</code></pre><h1 id="MybatisPlus以及代码生成器"><a href="#MybatisPlus以及代码生成器" class="headerlink" title="MybatisPlus以及代码生成器"></a>MybatisPlus以及代码生成器</h1><h4 id="1、基本依赖"><a href="#1、基本依赖" class="headerlink" title="1、基本依赖"></a>1、基本依赖</h4><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--代码生成器--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.velocity<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>velocity-engine-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><h4 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h4><pre><code class="hljs properties">mybatis-plus:       # 日志log    configuration:      log-impl: org.apache.ibatis.logging.stdout.StdOutImpl    global-config:  # 配置逻辑删除      db-config:        logic-delete-value: 1        logic-not-delete-value: 0    # 如果手写mapper映射文件，需要配置扫描路径    mapper-locations: classpath:/com/guzhz/mapper/xml/*.xml</code></pre><h4 id="3、代码生成器类"><a href="#3、代码生成器类" class="headerlink" title="3、代码生成器类"></a>3、代码生成器类</h4><pre><code class="hljs java"><span class="hljs-comment">//代码生成器CodeGenerator</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CodeGenerator</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        String tableName = <span class="hljs-string">"order_detail"</span>;        String deletedCol = <span class="hljs-string">"md_deleted"</span>;        String versionCol = <span class="hljs-string">"md_version"</span>;        AutoGenerator mpg = <span class="hljs-keyword">new</span> AutoGenerator();        GlobalConfig gc = <span class="hljs-keyword">new</span> GlobalConfig();        String projectPath = System.getProperty(<span class="hljs-string">"user.dir"</span>);        gc.setOutputDir(projectPath + <span class="hljs-string">"/src/main/java"</span>);        gc.setAuthor(<span class="hljs-string">"Guzhz"</span>);        gc.setFileOverride(<span class="hljs-keyword">false</span>);        gc.setOpen(<span class="hljs-keyword">false</span>);        gc.setSwagger2(<span class="hljs-keyword">true</span>);        gc.setBaseResultMap(<span class="hljs-keyword">true</span>);        gc.setBaseColumnList(<span class="hljs-keyword">true</span>);        gc.setServiceName(<span class="hljs-string">"%sService"</span>);        gc.setIdType(IdType.AUTO);        gc.setDateType(DateType.ONLY_DATE);        mpg.setGlobalConfig(gc);        <span class="hljs-comment">// 数据源配置</span>        DataSourceConfig dsc = <span class="hljs-keyword">new</span> DataSourceConfig();        dsc.setUrl(<span class="hljs-string">"jdbc:mysql://localhost:3306/springboot_orderfood_end?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&amp;allowPublicKeyRetrieval=true"</span>);        dsc.setDriverName(<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span>);        dsc.setUsername(<span class="hljs-string">"root"</span>);        dsc.setPassword(<span class="hljs-string">"123456"</span>);        dsc.setDbType(DbType.MYSQL);        mpg.setDataSource(dsc);        <span class="hljs-comment">// 包配置</span>        PackageConfig pc = <span class="hljs-keyword">new</span> PackageConfig();        pc.setParent(<span class="hljs-string">"com.guzhz"</span>);        pc.setEntity(<span class="hljs-string">"entity"</span>);        pc.setMapper(<span class="hljs-string">"mapper"</span>);        pc.setService(<span class="hljs-string">"service"</span>);        pc.setController(<span class="hljs-string">"controller"</span>);        mpg.setPackageInfo(pc);        <span class="hljs-comment">//4、策略配置（只需要改这里的表名即可）</span>        StrategyConfig strategy = <span class="hljs-keyword">new</span> StrategyConfig();        strategy.setNaming(NamingStrategy.underline_to_camel);        strategy.setColumnNaming(NamingStrategy.underline_to_camel);        strategy.setEntityLombokModel(<span class="hljs-keyword">true</span>); <span class="hljs-comment">// 自动lombok；</span>        strategy.setLogicDeleteFieldName(deletedCol);  <span class="hljs-comment">//逻辑删除字段</span>        strategy.setInclude(<span class="hljs-keyword">new</span> String[]&#123;tableName&#125;);   <span class="hljs-comment">//可以传入多个值</span>        <span class="hljs-comment">//5、自动填充配置</span>        TableFill gmtCreate = <span class="hljs-keyword">new</span> TableFill(<span class="hljs-string">"gmt_create"</span>, FieldFill.INSERT);        TableFill gmtModified = <span class="hljs-keyword">new</span> TableFill(<span class="hljs-string">"gmt_modified"</span>, FieldFill.INSERT_UPDATE);        ArrayList&lt;TableFill&gt; tableFills = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        tableFills.add(gmtCreate);        tableFills.add(gmtModified);        strategy.setTableFillList(tableFills);        <span class="hljs-comment">//6、乐观锁</span>        strategy.setVersionFieldName(versionCol);           <span class="hljs-comment">//乐观锁字段名</span>        strategy.setRestControllerStyle(<span class="hljs-keyword">true</span>);               <span class="hljs-comment">//restful api风格控制器</span>        strategy.setControllerMappingHyphenStyle(<span class="hljs-keyword">true</span>);       <span class="hljs-comment">//url中驼峰转连字符</span>        mpg.setStrategy(strategy);        mpg.execute();    &#125;&#125;</code></pre><h4 id="4、实体类关键成员的注解"><a href="#4、实体类关键成员的注解" class="headerlink" title="4、实体类关键成员的注解"></a>4、实体类关键成员的注解</h4><pre><code class="hljs java"><span class="hljs-meta">@TableLogic</span><span class="hljs-keyword">private</span> Integer mdDeleted;<span class="hljs-meta">@Version</span><span class="hljs-keyword">private</span> Integer mdVersion;<span class="hljs-meta">@JsonFormat</span>(pattern=<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>,timezone = <span class="hljs-string">"GMT+8"</span>)<span class="hljs-meta">@DateTimeFormat</span>(pattern=<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>)<span class="hljs-meta">@TableField</span>(value = <span class="hljs-string">"od_createTime"</span>,fill = FieldFill.INSERT)<span class="hljs-keyword">private</span> Date odCreateTime;</code></pre><h4 id="5、配置分页、乐观锁的配置类"><a href="#5、配置分页、乐观锁的配置类" class="headerlink" title="5、配置分页、乐观锁的配置类"></a>5、配置分页、乐观锁的配置类</h4><pre><code class="hljs java"><span class="hljs-meta">@MapperScan</span>(<span class="hljs-string">"com.guzhz.mapper"</span>)<span class="hljs-meta">@ConditionalOnClass</span>(value = &#123;PaginationInterceptor.class&#125;)<span class="hljs-meta">@Configuration</span> <span class="hljs-comment">// 配置类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config</span> </span>&#123;    <span class="hljs-comment">// 注册乐观锁插件</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> OptimisticLockerInterceptor <span class="hljs-title">optimisticLockerInterceptor</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OptimisticLockerInterceptor();    &#125;    <span class="hljs-comment">/*配置分页插件*/</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title">paginationInterceptor</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PaginationInterceptor();    &#125;&#125;</code></pre><h4 id="6、自动更新时间配置类"><a href="#6、自动更新时间配置类" class="headerlink" title="6、自动更新时间配置类"></a>6、自动更新时间配置类</h4><pre><code class="hljs java"><span class="hljs-comment">//自动更新时间</span><span class="hljs-meta">@Slf</span>4j      <span class="hljs-comment">//日志注解</span><span class="hljs-meta">@Component</span> <span class="hljs-comment">// 一定不要忘记把处理器加到IOC容器中！</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MetaObjectHandler</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;        <span class="hljs-comment">//实体类成员</span>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">"odCreateTime"</span>,<span class="hljs-keyword">new</span> Date(),metaObject);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;    &#125;&#125;</code></pre><h4 id="7、时间个格式化json包"><a href="#7、时间个格式化json包" class="headerlink" title="7、时间个格式化json包"></a>7、时间个格式化json包</h4><pre><code class="hljs xml">//时间格式化<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>th:text="$&#123;#dates.format(order.getOdCreateTime(),'yyyy-MM-dd HH:mm:ss')&#125;"</code></pre><h1 id="SpringSecurity5"><a href="#SpringSecurity5" class="headerlink" title="SpringSecurity5"></a>SpringSecurity5</h1><h4 id="1、基本依赖-1"><a href="#1、基本依赖-1" class="headerlink" title="1、基本依赖"></a>1、基本依赖</h4><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h4 id="2、配置类"><a href="#2、配置类" class="headerlink" title="2、配置类"></a>2、配置类</h4><pre><code class="hljs java"><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;    <span class="hljs-meta">@Resource</span>    TbUserServiceImpl tbUserService;    <span class="hljs-meta">@Override</span>   <span class="hljs-comment">//授权规则</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        http.authorizeRequests().antMatchers(<span class="hljs-string">"/"</span>,<span class="hljs-string">"/index"</span>,<span class="hljs-string">"/main"</span>,<span class="hljs-string">"/search"</span>).permitAll()                .antMatchers(<span class="hljs-string">"/userInfo"</span>,<span class="hljs-string">"/insertUserInfo"</span>,<span class="hljs-string">"/edUserInfo"</span>,<span class="hljs-string">"/deleteUser/**"</span>).hasAnyRole(<span class="hljs-string">"admin"</span>)                .antMatchers(<span class="hljs-string">"/menuManage"</span>,<span class="hljs-string">"/deleteOneMenu/**"</span>,<span class="hljs-string">"/upLoadImg"</span>,<span class="hljs-string">"/insertMenu"</span>,<span class="hljs-string">"/updateMenu"</span>).hasAnyRole(<span class="hljs-string">"admin"</span>)                .antMatchers(<span class="hljs-string">"/insertType"</span>,<span class="hljs-string">"/updateType"</span>,<span class="hljs-string">"/deleteType"</span>).hasAnyRole(<span class="hljs-string">"admin"</span>)                .antMatchers(<span class="hljs-string">"/orderManage"</span>,<span class="hljs-string">"/changeStatusToOne"</span>).hasAnyRole(<span class="hljs-string">"admin"</span>)                .antMatchers(<span class="hljs-string">"/myInfo"</span>,<span class="hljs-string">"/updateMyImg"</span>,<span class="hljs-string">"/updateMyInfo"</span>).hasAnyRole(<span class="hljs-string">"admin"</span>,<span class="hljs-string">"user"</span>)                .antMatchers(<span class="hljs-string">"/shoppingCart"</span>,<span class="hljs-string">"/shoppingCart-plus"</span>,<span class="hljs-string">"/shoppingCart-minus"</span>,<span class="hljs-string">"/addShoppingCart"</span>).hasAnyRole(<span class="hljs-string">"user"</span>)                .antMatchers(<span class="hljs-string">"/toOrder"</span>,<span class="hljs-string">"/myOrder"</span>,<span class="hljs-string">"/changeStatusToTwo"</span>).hasAnyRole(<span class="hljs-string">"user"</span>);        http.formLogin().loginPage(<span class="hljs-string">"/toLogin"</span>).usernameParameter(<span class="hljs-string">"uUsername"</span>).passwordParameter(<span class="hljs-string">"uPassword"</span>)                .loginProcessingUrl(<span class="hljs-string">"/login"</span>)   <span class="hljs-comment">//表单提交的请求，可以不需要路由（走security的路由）</span>                .failureUrl(<span class="hljs-string">"/toLogin?error=true"</span>);                http.csrf().disable();  <span class="hljs-comment">//取消ajax拦截（post），如果改为post/get则可能不会报错</span>        http.logout().logoutSuccessUrl(<span class="hljs-string">"/toLogin"</span>);        <span class="hljs-comment">//解决中文乱码问题</span>        CharacterEncodingFilter filter = <span class="hljs-keyword">new</span> CharacterEncodingFilter();        filter.setEncoding(<span class="hljs-string">"UTF-8"</span>); filter.setForceEncoding(<span class="hljs-keyword">true</span>);        http.addFilterBefore(filter, CsrfFilter.class);<span class="hljs-comment">/*        //开启记住我功能        http.rememberMe().rememberMeParameter("remember");*/</span>    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-comment">//验证规则</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        auth.userDetailsService(tbUserService).passwordEncoder(<span class="hljs-keyword">new</span> NoPasswordEncoder());    &#125;&#125;</code></pre><h4 id="3、取消加密类"><a href="#3、取消加密类" class="headerlink" title="3、取消加密类"></a>3、取消加密类</h4><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoPasswordEncoder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PasswordEncoder</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">encode</span><span class="hljs-params">(CharSequence charSequence)</span> </span>&#123;        <span class="hljs-comment">//不做任何加密处理</span>        <span class="hljs-keyword">return</span> charSequence.toString();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">matches</span><span class="hljs-params">(CharSequence charSequence, String s)</span> </span>&#123;        <span class="hljs-comment">//charSequence是前端传过来的密码，s是数据库中查到的密码</span>        <span class="hljs-keyword">if</span> (charSequence.toString().equals(s)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;&#125;</code></pre><h4 id="4、TbUserServiceImpl实现类对接数据库（implements-TbUserService）"><a href="#4、TbUserServiceImpl实现类对接数据库（implements-TbUserService）" class="headerlink" title="4、TbUserServiceImpl实现类对接数据库（implements TbUserService）"></a>4、TbUserServiceImpl实现类对接数据库（implements TbUserService）</h4><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TbUserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">TbUserMapper</span>, <span class="hljs-title">TbUser</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">TbUserService</span> , <span class="hljs-title">UserDetailsService</span></span>&#123;    <span class="hljs-comment">//security验证用户名</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String uUsername)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException </span>&#123;        <span class="hljs-comment">//我们自己定义的 TbUserServiceImpl 需要实现 UserDetailsService 接口，实现该接口，就要实现接口中的方法，</span>        <span class="hljs-comment">// 也就是 loadUserByUsername ，这个方法的参数就是用户在登录的时候传入的用户名，</span>        <span class="hljs-comment">// 根据用户名去查询用户信息（查出来之后，系统会自动进行密码比对）</span>        <span class="hljs-comment">//根据前端传过来的uUsername找到对应的user</span>        TbUser user = tbUserMapper.selectOne(<span class="hljs-keyword">new</span> QueryWrapper&lt;TbUser&gt;().eq(<span class="hljs-string">"u_username"</span>, uUsername));        <span class="hljs-keyword">if</span> (user==<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UsernameNotFoundException(<span class="hljs-string">"用户不存在!"</span>);        &#125;        <span class="hljs-keyword">return</span> user;    &#125;&#125;</code></pre><h4 id="5、在后台获取当前用户的session信息"><a href="#5、在后台获取当前用户的session信息" class="headerlink" title="5、在后台获取当前用户的session信息"></a>5、在后台获取当前用户的session信息</h4><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UpdateSession</span> </span>&#123;    <span class="hljs-comment">//刷新权限</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reloadUserAuthority</span><span class="hljs-params">(HttpSession session , TbUser user)</span></span>&#123;        <span class="hljs-comment">//1.从HttpServletRequest中获取SecurityContextImpl对象</span>        SecurityContextImpl securityContextImpl = (SecurityContextImpl) session.getAttribute(<span class="hljs-string">"SPRING_SECURITY_CONTEXT"</span>);        <span class="hljs-comment">//2.从SecurityContextImpl中获取Authentication对象</span>        Authentication authentication = securityContextImpl.getAuthentication();        <span class="hljs-comment">//3.初始化UsernamePasswordAuthenticationToken实例 ，这里的参数user就是我们要更新的用户信息</span>        UsernamePasswordAuthenticationToken auth = <span class="hljs-keyword">new</span> UsernamePasswordAuthenticationToken(user, authentication.getCredentials());        auth.setDetails(authentication.getDetails());        <span class="hljs-comment">//4.重新设置SecurityContextImpl对象的Authentication</span>        securityContextImpl.setAuthentication(auth);    &#125;    <span class="hljs-comment">//获得当前session对象，用于判断是否跨用户访问,返回当前所登录的用户的id；</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">getSessionUId</span><span class="hljs-params">(HttpSession session)</span></span>&#123;        SecurityContextImpl securityContextImpl = (SecurityContextImpl) session.getAttribute(<span class="hljs-string">"SPRING_SECURITY_CONTEXT"</span>);        Authentication authentication = securityContextImpl.getAuthentication();        TbUser user = (TbUser) authentication.getPrincipal();        <span class="hljs-keyword">return</span> user.getUId();    &#125;&#125;</code></pre><h4 id="6、前端获取权限"><a href="#6、前端获取权限" class="headerlink" title="6、前端获取权限"></a>6、前端获取权限</h4><pre><code class="hljs java">//导入命名空间xmlns:th="http://www.thymeleaf.org"xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity5"//获得权限sec:authorize="hasRole('admin')"//获得内存中的值$&#123;#authentication.getPrincipal().uId&#125;&#125;</code></pre><h1 id="多表联合查询"><a href="#多表联合查询" class="headerlink" title="多表联合查询"></a>多表联合查询</h1><pre><code class="hljs java"><span class="hljs-comment">//自定义接口</span><span class="hljs-meta">@Mapper</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MenuDetailMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">MenuDetail</span>&gt; </span>&#123;    <span class="hljs-function">List&lt;MenuDetail&gt; <span class="hljs-title">selectByType</span><span class="hljs-params">(<span class="hljs-keyword">int</span> mtId)</span></span>;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.guzhz.mapper.MenuDetailMapper"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 通用查询映射结果 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"BaseResultMap"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.guzhz.entity.MenuDetail"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"md_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"mdId"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"md_name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"mdName"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"md_price"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"mdPrice"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"md_amount"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"mdAmount"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"md_url"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"mdUrl"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"md_new"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"mdNew"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"md_star"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"mdStar"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"md_deleted"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"mdDeleted"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"md_version"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"mdVersion"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"mt_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"mtId"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"menuType"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"com.guzhz.entity.MenuType"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"mt_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"mtId"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"mt_name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"mtName"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"mt_deleted"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"mtDeleted"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"mt_version"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"mtVersion"</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 通用查询结果列 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"Base_Column_List"</span>&gt;</span>        md_id, md_name, md_price, md_amount, md_url, md_new, md_star, md_deleted, md_version    <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selectByType"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"int"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"BaseResultMap"</span>&gt;</span>        select md_id, md_name, md_price, md_amount, md_url, md_new, md_star, md_deleted, md_version,               b.mt_id, mt_name, mt_deleted, mt_version        from menu_detail a, menu_type b        where a.mt_id = b.mt_id and b.mt_id = #&#123;mtId&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h4 id="1、配置类"><a href="#1、配置类" class="headerlink" title="1、配置类"></a>1、配置类</h4><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyWebAppConfigurer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>&#123;        registry.addResourceHandler(<span class="hljs-string">"/images/**"</span>).addResourceLocations(<span class="hljs-string">"file:F:/Study/Book6/JavaEE/images/"</span>);    &#125;&#125;</code></pre><h4 id="2、实现类"><a href="#2、实现类" class="headerlink" title="2、实现类"></a>2、实现类</h4><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileUpload</span> </span>&#123;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">uploadFile</span><span class="hljs-params">(MultipartFile upLoadFile)</span></span>&#123;        <span class="hljs-keyword">if</span> (upLoadFile.isEmpty()) &#123;            System.out.println(<span class="hljs-string">"文件为空空"</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        String filePath = <span class="hljs-string">"F:\\Study\\Book6\\JavaEE\\images"</span>;                <span class="hljs-comment">//获取原始文件名</span>        String fileName = upLoadFile.getOriginalFilename();        <span class="hljs-comment">/*新的文件名*/</span>        fileName =  UUID.randomUUID().toString().replace(<span class="hljs-string">"-"</span>, <span class="hljs-string">""</span>) + fileName.substring(fileName.lastIndexOf(<span class="hljs-string">"."</span>));        File file = <span class="hljs-keyword">new</span> File(filePath,fileName);        <span class="hljs-keyword">if</span> (!file.getParentFile().exists()) &#123;            file.getParentFile().mkdirs();            System.out.println(<span class="hljs-string">"创建成功！"</span>);        &#125;        <span class="hljs-keyword">try</span> &#123;            upLoadFile.transferTo(file);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;        String imgPath = <span class="hljs-string">"/images/"</span>+fileName;        <span class="hljs-keyword">return</span> imgPath;    &#125;&#125;</code></pre><h4 id="3、工具类"><a href="#3、工具类" class="headerlink" title="3、工具类"></a>3、工具类</h4><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomNo</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getRandomNo</span><span class="hljs-params">()</span></span>&#123;        SimpleDateFormat sdf=<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyyMMddHHmmss"</span>);        String newDate=sdf.format(<span class="hljs-keyword">new</span> Date());        String result=<span class="hljs-string">""</span>;        Random random=<span class="hljs-keyword">new</span> Random();        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;            result+=random.nextInt(<span class="hljs-number">10</span>);        &#125;        <span class="hljs-keyword">return</span> newDate+result;    &#125;&#125;</code></pre><h1 id="前端知识总结"><a href="#前端知识总结" class="headerlink" title="前端知识总结"></a>前端知识总结</h1><h4 id="1、bootStrap、JQuery三件套"><a href="#1、bootStrap、JQuery三件套" class="headerlink" title="1、bootStrap、JQuery三件套"></a>1、bootStrap、JQuery三件套</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>//semantic-ui<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span>&gt;</span>//图标库<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://use.fontawesome.com/releases/v5.0.9/css/all.css"</span>&gt;</span></code></pre><h4 id="2、思想：获得循环出来的值，通过Ajax请求"><a href="#2、思想：获得循环出来的值，通过Ajax请求" class="headerlink" title="2、思想：获得循环出来的值，通过Ajax请求"></a>2、思想：获得循环出来的值，通过Ajax请求</h4><pre><code class="hljs html">把必要元素放进a标签里，设置为input hidden，绑定点击事件<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"getDetail(this)"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getDetail"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#successTips"</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">"modal"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"add-to-cart"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span>  <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;menu.getMdName()&#125;"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span>  <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;menu.getMdAmount()&#125;"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span>  <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;menu.getMdPrice()&#125;"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span>  <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;menu.getMdUrl()&#125;"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span>  <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;menu.getMdId()&#125;"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span>  <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">"isAuthenticated()"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;#authentication.getPrincipal().uId&#125; "</span>&gt;</span>   <span class="hljs-comment">&lt;!--登录后获得用户id--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span>  <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">"isAuthenticated()"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;#authentication.getPrincipal().uRole&#125;   "</span>&gt;</span>   <span class="hljs-comment">&lt;!--登录后判断账号权限--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDetail</span>(<span class="hljs-params">a</span>) </span>&#123;        <span class="hljs-keyword">let</span> list = $(a).children(<span class="hljs-string">'input'</span>);      <span class="hljs-comment">//获得当前元素下的所有子input</span>        <span class="hljs-keyword">if</span> (list.length == <span class="hljs-number">5</span>)&#123;                  <span class="hljs-comment">//5个说明处于未登录状态</span>            alert(<span class="hljs-string">"请先登录，再订餐哦~"</span>);            $(a).attr(<span class="hljs-string">"href"</span>,<span class="hljs-string">"#"</span>);            <span class="hljs-keyword">return</span> ;        &#125;        <span class="hljs-keyword">if</span>($(list[<span class="hljs-number">6</span>]).val() == <span class="hljs-string">"ROLE_admin"</span>)&#123;            alert(<span class="hljs-string">"你就是老板啦，你不能下单哦~"</span>);            $(a).attr(<span class="hljs-string">"href"</span>,<span class="hljs-string">"#"</span>);            <span class="hljs-keyword">return</span> ;        &#125;<span class="hljs-keyword">if</span>($(list[<span class="hljs-number">1</span>]).val() == <span class="hljs-string">"0"</span>)&#123;            alert(<span class="hljs-string">"加入购物车失败！该菜品已售罄，等待补货！"</span>);            $(a).attr(<span class="hljs-string">"href"</span>,<span class="hljs-string">"#"</span>);            <span class="hljs-keyword">return</span> ;        &#125; <span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">let</span> mdName = $(list[<span class="hljs-number">0</span>]).val();            <span class="hljs-keyword">let</span> mdPrice = $(list[<span class="hljs-number">2</span>]).val();            $(<span class="hljs-string">'#tips-name'</span>).html(<span class="hljs-string">"【名称】"</span>+mdName);            $(<span class="hljs-string">'#tips-price'</span>).html(<span class="hljs-string">"【价格】"</span>+mdPrice+<span class="hljs-string">'元'</span>);            <span class="hljs-comment">/*发起请求*/</span>            <span class="hljs-keyword">let</span> postData = &#123;&#125;;            postData[<span class="hljs-string">'scName'</span>] = mdName;            postData[<span class="hljs-string">'scAmount'</span>] = <span class="hljs-number">1</span>;            postData[<span class="hljs-string">'scPrice'</span>] = mdPrice;            postData[<span class="hljs-string">'scImg'</span>] = $(list[<span class="hljs-number">3</span>]).val();            postData[<span class="hljs-string">'mdId'</span>] = $(list[<span class="hljs-number">4</span>]).val();            postData[<span class="hljs-string">'uId'</span>] = $(list[<span class="hljs-number">5</span>]).val();            $.ajax(&#123;                <span class="hljs-attr">url</span>: <span class="hljs-string">"/addShoppingCart"</span>,                <span class="hljs-attr">type</span>: <span class="hljs-string">'POST'</span>,                <span class="hljs-attr">data</span>: postData,                <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">arg</span>) </span>&#123;                    <span class="hljs-keyword">if</span>(arg == <span class="hljs-string">"0"</span>)&#123;                        $(<span class="hljs-string">'#myModalLabel'</span>).text(<span class="hljs-string">"当前菜品加购已达到上限！"</span>)                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arg == <span class="hljs-string">"1"</span>)&#123;                        $(<span class="hljs-string">'#myModalLabel'</span>).text(<span class="hljs-string">"加入成功！"</span>)                    &#125;<span class="hljs-keyword">else</span>&#123;                        $(<span class="hljs-string">'#myModalLabel'</span>).text(<span class="hljs-string">"数量加+1成功！"</span>)                    &#125;                    <span class="hljs-comment">// window.location.reload();</span>                &#125;            &#125;)        &#125;    &#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h4 id="3、技巧：修改头像"><a href="#3、技巧：修改头像" class="headerlink" title="3、技巧：修改头像"></a>3、技巧：修改头像</h4><pre><code class="hljs html"><span class="hljs-comment">&lt;!--更新头像模态框--&gt;</span>//修改点：模态框的id，img的id，模块脚的button<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal fade"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"headImgModal"</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">"-1"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"dialog"</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">"myModalLabel"</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">"true"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal-dialog"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal-content"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin: 0 auto;width: 450px"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal-header"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"close"</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">"modal"</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">"true"</span>&gt;</span>&amp;times;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal-title"</span>&gt;</span>修改头像<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">""</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal-body text-center"</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>                        <span class="hljs-comment">&lt;!--预览图片位置，默认图片--&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"headImg"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 250px;height: 250px"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;$&#123;#authentication.getPrincipal().uUrl&#125;&#125;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"img-rounded"</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal-footer"</span>&gt;</span>                    <span class="hljs-comment">&lt;!--点击选择文件 触发隐藏form，通过id--&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"$('#updateHeadImg').click();"</span>&gt;</span>浏览<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>                    <span class="hljs-comment">&lt;!--点击提交表单--&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"submitBtn"</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- 隐藏form --&gt;</span>//修改点：form的id，form的action，input的id<span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updateHeadImgForm"</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">"@&#123;'/updateMyImg?uId='+$&#123;#authentication.getPrincipal().uId&#125;&#125;"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updateHeadImg"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"updateHeadImg"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display: none"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-comment">&lt;!-- 触发模态框按钮 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"tips()"</span> <span class="hljs-attr">th:name</span>=<span class="hljs-string">"$&#123;#authentication.getPrincipal().uId&#125;"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin-right: 75px; float: right"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary"</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">"modal"</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">"#headImgModal"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"glyphicon glyphicon-picture"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>修改头像<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></code></pre><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    $(<span class="hljs-string">"#updateHeadImg"</span>).change(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-comment">//点击“浏览”后会触发隐藏文件表单。监听一旦发生改变则</span>        <span class="hljs-keyword">var</span> file = <span class="hljs-keyword">this</span>.files[<span class="hljs-number">0</span>];                   <span class="hljs-comment">// 获取input上传的图片数据;</span>        <span class="hljs-built_in">console</span>.log(file);        <span class="hljs-keyword">var</span> url = <span class="hljs-built_in">window</span>.URL.createObjectURL(file);  <span class="hljs-comment">// 得到file对象路径，可当成普通的文件路径一样使用，赋值给src;</span>        $(<span class="hljs-string">"#headImg"</span>).attr(<span class="hljs-string">"src"</span>, url);                <span class="hljs-comment">//修改模态框的头像</span>    &#125;);    <span class="hljs-comment">//  JQ点击提交表单</span>    $(<span class="hljs-string">"#submitBtn"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">var</span> file = $(<span class="hljs-string">"#updateHeadImg"</span>).val();                   <span class="hljs-comment">// 获取input上传的图片数据;</span>        <span class="hljs-keyword">if</span>(file!=<span class="hljs-string">''</span>)&#123;            alert(<span class="hljs-string">"修改头像成功，正在前往登录页~"</span>);            $(<span class="hljs-string">'#updateHeadImgForm'</span>).submit();        &#125;<span class="hljs-keyword">else</span>&#123;            alert(<span class="hljs-string">'请先浏览图片！'</span>)        &#125;    &#125;);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h4 id="4、简单的模态框的使用"><a href="#4、简单的模态框的使用" class="headerlink" title="4、简单的模态框的使用"></a>4、简单的模态框的使用</h4><pre><code class="hljs html">//关键点：id，下单按钮的事件绑定<span class="hljs-comment">&lt;!--填充收货信息模态框--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal fade"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fillInfoModal"</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">"-1"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"dialog"</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">"exampleModalLabel"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal-dialog"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"document"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal-content"</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">"margin: 0 auto;width: 450px"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal-header"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"close"</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">"modal"</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">"Close"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">"true"</span>&gt;</span>&amp;times;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal-title"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"addTypeModalLabel"</span>&gt;</span>请编辑收货信息（可前往个人中心修改）：<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal-body"</span>&gt;</span>                <span class="hljs-comment">&lt;!--模块体填充数据--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">""</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fill-uId"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;#authentication.getPrincipal().uId&#125;"</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"fill-name"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"control-label"</span>&gt;</span>姓名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">"fill-name"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;#authentication.getPrincipal().uName&#125;"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"odName"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"fill-phone"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"control-label"</span>&gt;</span>手机号：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">"fill-phone"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;#authentication.getPrincipal().uPhone&#125;"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"odPhone"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"fill-address"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"control-label"</span>&gt;</span>地址：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fill-address"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;#authentication.getPrincipal().uAddress&#125;"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"odAddress"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> &gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"fill-remarks"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"control-label"</span>&gt;</span>备注：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fill-remarks"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"odRemarks"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"有啥要求可以备注说明哦~"</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal-footer"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">"modal"</span>&gt;</span>关闭<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"toOrder()"</span>&gt;</span>确认下单<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toOrder</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">let</span> postData = &#123;&#125;;        <span class="hljs-keyword">let</span> uId = $(<span class="hljs-string">'#fill-uId'</span>).val();        <span class="hljs-keyword">let</span> odName = $(<span class="hljs-string">'#fill-name'</span>).val();        <span class="hljs-keyword">let</span> odPhone = $(<span class="hljs-string">'#fill-phone'</span>).val();        <span class="hljs-keyword">let</span> odAddress = $(<span class="hljs-string">'#fill-address'</span>).val();        <span class="hljs-keyword">let</span> odRemarks = $(<span class="hljs-string">'#fill-remarks'</span>).val();        <span class="hljs-keyword">if</span> (odName === <span class="hljs-string">""</span>) &#123;            alert(<span class="hljs-string">"姓名不能为空！"</span>);            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-keyword">if</span> (odPhone === <span class="hljs-string">""</span>) &#123;            alert(<span class="hljs-string">"手机号不能为空"</span>);            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-keyword">if</span> (odAddress === <span class="hljs-string">""</span>) &#123;            alert(<span class="hljs-string">"地址不能为空"</span>);            <span class="hljs-keyword">return</span>;        &#125;        postData[<span class="hljs-string">'odName'</span>] = odName;        postData[<span class="hljs-string">'odPhone'</span>] = odPhone;        postData[<span class="hljs-string">'odAddress'</span>] = odAddress;        postData[<span class="hljs-string">'odRemarks'</span>] = odRemarks;        postData[<span class="hljs-string">'uId'</span>] = uId;        <span class="hljs-built_in">console</span>.log(postData);        $.ajax(&#123;            <span class="hljs-attr">url</span>: <span class="hljs-string">"/toOrder"</span>,            <span class="hljs-attr">type</span>: <span class="hljs-string">'POST'</span>,            <span class="hljs-attr">data</span>: postData,            <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">arg</span>) </span>&#123;                alert(arg);                <span class="hljs-built_in">window</span>.location.reload();            &#125;        &#125;);    &#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h4 id="5、表格获取单元数据、简单的删除提示"><a href="#5、表格获取单元数据、简单的删除提示" class="headerlink" title="5、表格获取单元数据、简单的删除提示"></a>5、表格获取单元数据、简单的删除提示</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-warning"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"edit_table_btn"</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">"modal"</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">"#edUser"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"getData()"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"glyphicon glyphicon-pencil"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-comment">/*被绑定的按钮，先执行onclick，获得表格当前行的值并设置为模态框的值*/</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getData</span>(<span class="hljs-params"></span>) </span>&#123;    $(<span class="hljs-string">"#userInfoTable tbody"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-string">"tr"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();        <span class="hljs-keyword">let</span> td = $(<span class="hljs-keyword">this</span>).find(<span class="hljs-string">"td"</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; td.length; i++) &#123;            data.push(td.eq(i).text());        &#125;        $(<span class="hljs-string">'#ed-uId'</span>).attr(<span class="hljs-string">'value'</span>,data[<span class="hljs-number">0</span>]);        <span class="hljs-built_in">console</span>.log(data[<span class="hljs-number">0</span>]);        $(<span class="hljs-string">'#ed-uUsername'</span>).attr(<span class="hljs-string">'value'</span>,data[<span class="hljs-number">2</span>]);        $(<span class="hljs-string">'#ed-uPassword'</span>).attr(<span class="hljs-string">'value'</span>,data[<span class="hljs-number">3</span>]);        $(<span class="hljs-string">'#ed-uName'</span>).attr(<span class="hljs-string">'value'</span>,data[<span class="hljs-number">4</span>]);        $(<span class="hljs-string">'#ed-uPhone'</span>).attr(<span class="hljs-string">'value'</span>,data[<span class="hljs-number">5</span>]);        $(<span class="hljs-string">'#ed-uAddress'</span>).attr(<span class="hljs-string">'value'</span>,data[<span class="hljs-number">6</span>]);    &#125;);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;'/deleteUser/'+$&#123;user.getUId()&#125;&#125;"</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">"return confirm('确定删除?');"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-danger"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"glyphicon glyphicon-remove"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><h4 id="6、翻页"><a href="#6、翻页" class="headerlink" title="6、翻页"></a>6、翻页</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row clearfix"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12 column"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"text-align: center;"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"font-size: 16px;color:grey;"</span>&gt;</span>                总查询到&amp;nbsp;<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;page.getTotal()&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&amp;nbsp;条数据            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-comment">&lt;!--遍历页数--&gt;</span>            <span class="hljs-comment">&lt;!--th:each="i:$&#123;#numbers.sequence(1,page.getPages())&#125;"--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pagination"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;!page.hasPrevious()&#125;"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"javascript:alert('已经是第一页啦！');"</span>&gt;</span>上一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;page.hasPrevious()&#125;"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;'/userInfo?pageNum='+ $&#123;page.getCurrent() - 1&#125;&#125;"</span>&gt;</span>上一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">"i:$&#123;#numbers.sequence(1,page.getPages())&#125;"</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span>  <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;page.getCurrent() == i&#125;"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;'/uuserInfo?pageNum='+ $&#123;i&#125;&#125;"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;i&#125;"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"background: #aefff8"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span>  <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;!(page.getCurrent() == i)&#125;"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;'/userInfo?pageNum='+ $&#123;i&#125;&#125;"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;i&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;!page.hasNext()&#125;"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"javascript:alert('已经是最后一页啦！');"</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;page.hasNext()&#125;"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;'/userInfo?pageNum='+ $&#123;page.getCurrent() + 1&#125;&#125;"</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><p align="right"><br>2020年07月12日 晚上<br>Guzhz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目背景：在线订餐系统是基于springboot和bootstrap的JavaEE项目，主要实现用户订餐，管理员接单等操作。&lt;/p&gt;
&lt;h1 id=&quot;SpringBoot基本配置&quot;&gt;&lt;a href=&quot;#SpringBoot基本配置&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="学习类" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%B1%BB/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>MyBatisPlus学习笔记</title>
    <link href="http://yoursite.com/2020/06/13/MyBatisPlus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/06/13/MyBatisPlus学习笔记/</id>
    <published>2020-06-13T08:50:30.000Z</published>
    <updated>2020-06-26T13:50:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>前言：MyBatisPlus可以节省我们大量工作时间，所有的CRUD代码它都可以自动化完成！</p><hr><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li>无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li>损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作， BaseMapper</li><li>强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分CRUD 操作，更有强大的条件构造器，满足各类使用需求, 以后简单的CRUD操作，它不用自己编写了！</li><li>支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li>支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li>支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li>支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）</li><li>内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用（自动帮你生成代码）</li><li>内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li>分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li>内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li>内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><hr><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>1、创建数据库<br>2、创建表(id自增)<br><pre><code class="hljs java">DROP TABLE IF EXISTS user;<span class="hljs-function">CREATE TABLE <span class="hljs-title">user</span><span class="hljs-params">(    id BIGINT(<span class="hljs-number">20</span>)</span> NOT NULL COMMENT '主键ID',    name <span class="hljs-title">VARCHAR</span><span class="hljs-params">(<span class="hljs-number">30</span>)</span> NULL DEFAULT NULL COMMENT '姓名',    age <span class="hljs-title">INT</span><span class="hljs-params">(<span class="hljs-number">11</span>)</span> NULL DEFAULT NULL COMMENT '年龄',    email <span class="hljs-title">VARCHAR</span><span class="hljs-params">(<span class="hljs-number">50</span>)</span> NULL DEFAULT NULL COMMENT '邮箱',    PRIMARY <span class="hljs-title">KEY</span> <span class="hljs-params">(id)</span>)</span>;<span class="hljs-function">INSERT INTO <span class="hljs-title">user</span> <span class="hljs-params">(id, name, age, email)</span> <span class="hljs-title">VALUES</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-string">'Jone'</span>, <span class="hljs-number">18</span>, <span class="hljs-string">'test1@baomidou.com'</span>)</span>,<span class="hljs-params">(<span class="hljs-number">2</span>, <span class="hljs-string">'Jack'</span>, <span class="hljs-number">20</span>, <span class="hljs-string">'test2@baomidou.com'</span>)</span>,<span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">'Tom'</span>, <span class="hljs-number">28</span>, <span class="hljs-string">'test3@baomidou.com'</span>)</span>,<span class="hljs-params">(<span class="hljs-number">4</span>, <span class="hljs-string">'Sandy'</span>, <span class="hljs-number">21</span>, <span class="hljs-string">'test4@baomidou.com'</span>)</span>,<span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-string">'Billie'</span>, <span class="hljs-number">24</span>, <span class="hljs-string">'test5@baomidou.com'</span>)</span></span>;-- 真实开发中，version（乐观锁）、deleted（逻辑删除）、gmt_create、gmt_modified</code></pre></p><p>3、编写项目，初始化项目，使用SpringBoot初始化<br>4、导入依赖<br><pre><code class="hljs java">&lt;!-- 数据库驱动 --&gt;&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- lombok --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;    &lt;artifactId&gt;lombok&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- mybatis-plus --&gt;&lt;!-- mybatis-plus 是自己开发，并非官方的！ --&gt;&lt;dependency&gt;    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;    &lt;version&gt;3.0.5&lt;/version&gt;&lt;/dependency&gt;</code></pre></p><p>5、连接数据库<br><pre><code class="hljs java">spring.datasource.username=rootspring.datasource.password=<span class="hljs-number">123456</span>spring.datasource.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/mybatis_plus?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span>spring.datasource.driver-<span class="hljs-class"><span class="hljs-keyword">class</span>-<span class="hljs-title">name</span></span>=com.mysql.cj.jdbc.Driver</code></pre></p><p>6、编写基本pojo类<br><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-keyword">private</span> String email;&#125;</code></pre></p><p>7、mapper接口<br><pre><code class="hljs java"><span class="hljs-meta">@Repository</span> <span class="hljs-comment">// 代表持久层</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;    <span class="hljs-comment">// 所有的CRUD操作都已经编写完成了</span>    <span class="hljs-comment">// 你不需要像以前的配置一大堆文件了！</span>&#125;</code></pre></p><ul><li><p>注意点：我们需要在主启动类上去扫描我们的mapper包下的所有接口<br><code>@MapperScan(&quot;com.kuang.mapper&quot;)</code></p></li><li><p>测试类：</p><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusApplicationTests</span> </span>&#123;    <span class="hljs-comment">// 继承了BaseMapper，所有的方法都来自己父类</span>    <span class="hljs-comment">// 我们也可以编写自己的扩展方法！</span>    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserMapper userMapper;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// 参数是一个 Wrapper ，条件构造器，这里我们先不用 null</span>        <span class="hljs-comment">// 查询全部用户</span>        List&lt;User&gt; users = userMapper.selectList(<span class="hljs-keyword">null</span>);        users.forEach(System.out::println);    &#125;&#125;</code></pre></li></ul><hr><h1 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h1><p>我们所有的sql现在是不可见的，我们希望知道它是怎么执行的，所以我们必须要看日志！<br><pre><code class="hljs java">mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</code></pre></p><hr><h1 id="CRUD拓展"><a href="#CRUD拓展" class="headerlink" title="CRUD拓展"></a>CRUD拓展</h1><h4 id="1、插入操作"><a href="#1、插入操作" class="headerlink" title="1、插入操作"></a>1、插入操作</h4><pre><code class="hljs java"><span class="hljs-comment">// 测试插入</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span></span>&#123;    User user = <span class="hljs-keyword">new</span> User();    user.setName(<span class="hljs-string">"狂神说Java"</span>);    user.setAge(<span class="hljs-number">3</span>);    user.setEmail(<span class="hljs-string">"24736743@qq.com"</span>);    <span class="hljs-keyword">int</span> result = userMapper.insert(user); <span class="hljs-comment">// 帮我们自动生成id</span>    System.out.println(result); <span class="hljs-comment">// 受影响的行数</span>    System.out.println(user); <span class="hljs-comment">// 发现，id会自动回填</span>&#125;</code></pre><p>？出现的问题：默认id为全局唯一id：ID_WORKER，是根据雪花算法生成的。</p><h4 id="2、主键生成策略"><a href="#2、主键生成策略" class="headerlink" title="2、主键生成策略"></a>2、主键生成策略</h4><p><strong>雪花算法：</strong><br>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。可以保证几乎全球唯一！<br><strong>配置id自增方法：</strong><br>1、实体类字段上 <code>@TableId(type = IdType.AUTO)</code><br>2、数据库自增<br><pre><code class="hljs java">IdType解释：<span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> IdType &#123;    AUTO(<span class="hljs-number">0</span>), <span class="hljs-comment">// 数据库id自增</span>    NONE(<span class="hljs-number">1</span>), <span class="hljs-comment">// 未设置主键</span>    INPUT(<span class="hljs-number">2</span>), <span class="hljs-comment">// 手动输入</span>    ID_WORKER(<span class="hljs-number">3</span>), <span class="hljs-comment">// 默认的全局唯一id</span>    UUID(<span class="hljs-number">4</span>), <span class="hljs-comment">// 全局唯一id uuid</span>    ID_WORKER_STR(<span class="hljs-number">5</span>); <span class="hljs-comment">//ID_WORKER 字符串表示法</span>&#125;</code></pre></p><h4 id="3、更新操作"><a href="#3、更新操作" class="headerlink" title="3、更新操作"></a>3、更新操作</h4><pre><code class="hljs java"><span class="hljs-comment">// 测试更新</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span></span>&#123;    User user = <span class="hljs-keyword">new</span> User();    <span class="hljs-comment">// 通过条件自动拼接动态sql</span>    user.setId(<span class="hljs-number">6L</span>);    user.setName(<span class="hljs-string">"关注公众号：狂神说"</span>);    user.setAge(<span class="hljs-number">18</span>);    <span class="hljs-comment">// 注意：updateById 但是参数是一个 对象！</span>    <span class="hljs-keyword">int</span> i = userMapper.updateById(user);    System.out.println(i);&#125;</code></pre><h4 id="4、自动填充机制：创建时间、更新时间"><a href="#4、自动填充机制：创建时间、更新时间" class="headerlink" title="4、自动填充机制：创建时间、更新时间"></a>4、自动填充机制：创建时间、更新时间</h4><p>创建时间、修改时间！这些个操作一遍都是自动化完成的，我们不希望手动更新！<br>阿里巴巴开发手册：所有的数据库表：gmt_create、gmt_modified几乎所有的表都要配置上！而且需要自动化！</p><blockquote><p>方式一：修改数据库设置（工作中不允许你直接修改数据库）</p></blockquote><p>1、在表中新增字段 create_time, update_time（提供更新）<br>2、再次测试插入方法，我们需要先把实体类同步！<br><pre><code class="hljs java"><span class="hljs-keyword">private</span> Date createTime;<span class="hljs-keyword">private</span> Date updateTime;</code></pre></p><blockquote><p>方式二：代码操作</p></blockquote><p>1、只添加字段<br>2、实体类字段属性上需要增加注解<br><pre><code class="hljs java"><span class="hljs-comment">// 字段添加填充内容</span><span class="hljs-meta">@TableField</span>(fill = FieldFill.INSERT)<span class="hljs-keyword">private</span> Date createTime;<span class="hljs-meta">@TableField</span>(fill = FieldFill.INSERT_UPDATE)<span class="hljs-keyword">private</span> Date updateTime;</code></pre></p><p>3、处理器类处理注解<br><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.handler;<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<span class="hljs-keyword">import</span> org.apache.ibatis.reflection.MetaObject;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-meta">@Slf</span>4j      <span class="hljs-comment">//日志注解</span><span class="hljs-meta">@Component</span> <span class="hljs-comment">// 一定不要忘记把处理器加到IOC容器中！</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MetaObjectHandler</span> </span>&#123;    <span class="hljs-comment">// 插入时的填充策略</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;        log.info(<span class="hljs-string">"start insert fill....."</span>);        <span class="hljs-comment">// setFieldValByName(String fieldName, Object fieldVal, MetaObject</span>        metaObject        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">"createTime"</span>,<span class="hljs-keyword">new</span> Date(),metaObject);        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">"updateTime"</span>,<span class="hljs-keyword">new</span> Date(),metaObject);    &#125;    <span class="hljs-comment">// 更新时的填充策略</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;        log.info(<span class="hljs-string">"start update fill....."</span>);        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">"updateTime"</span>,<span class="hljs-keyword">new</span> Date(),metaObject);    &#125;&#125;</code></pre></p><p>4、测试插入、更新操作</p><h4 id="5、乐观锁"><a href="#5、乐观锁" class="headerlink" title="5、乐观锁"></a>5、乐观锁</h4><blockquote><p>乐观锁 : 故名思意十分乐观，它总是认为不会出现问题，无论干什么不去上锁！如果出现了问题，再次更新值测试<br>悲观锁：故名思意十分悲观，它总是认为总是出现问题，无论干什么都会上锁！再去操作！</p></blockquote><p>实现原理：添加version字段</p><ul><li>取出记录时，获取当前 version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ul><pre><code class="hljs java">乐观锁：<span class="hljs-number">1</span>、先查询，获得版本号 version = <span class="hljs-number">1</span>-- Aupdate user set name = <span class="hljs-string">"kuangshen"</span>, version = version + <span class="hljs-number">1</span>where id = <span class="hljs-number">2</span> and version = <span class="hljs-number">1</span>-- B 线程抢先完成，这个时候 version = <span class="hljs-number">2</span>，会导致 A 修改失败！update user set name = <span class="hljs-string">"kuangshen"</span>, version = version + <span class="hljs-number">1</span>where id = <span class="hljs-number">2</span> and version = <span class="hljs-number">1</span></code></pre><p>1、数据库添加version字段，int，默认值为1<br>2、实体类添加对应的字段<br><pre><code class="hljs java"><span class="hljs-meta">@Version</span> <span class="hljs-comment">//乐观锁Version注解</span><span class="hljs-keyword">private</span> Integer version;</code></pre></p><p>3、注册插件：编写配置类，把扫描声明放来这里，添加事务管理注解<br><pre><code class="hljs java"><span class="hljs-comment">// 扫描我们的 mapper 文件夹</span><span class="hljs-meta">@MapperScan</span>(<span class="hljs-string">"com.kuang.mapper"</span>)<span class="hljs-meta">@EnableTransactionManagement</span><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">// 配置类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisPlusConfig</span> </span>&#123;    <span class="hljs-comment">// 注册乐观锁插件</span>    <span class="hljs-meta">@Bean</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> OptimisticLockerInterceptor <span class="hljs-title">optimisticLockerInterceptor</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OptimisticLockerInterceptor();    &#125;&#125;</code></pre></p><p>4、测试<br><pre><code class="hljs java"><span class="hljs-comment">// 测试乐观锁成功！</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testOptimisticLocker</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">// 1、查询用户信息</span>    User user = userMapper.selectById(<span class="hljs-number">1L</span>);    <span class="hljs-comment">// 2、修改用户信息</span>    user.setName(<span class="hljs-string">"kuangshen"</span>);    user.setEmail(<span class="hljs-string">"24736743@qq.com"</span>);    <span class="hljs-comment">// 3、执行更新操作</span>    userMapper.updateById(user);&#125;</code></pre></p><pre><code class="hljs java"><span class="hljs-comment">// 测试乐观锁失败！多线程下</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testOptimisticLocker2</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">// 线程 1</span>    User user = userMapper.selectById(<span class="hljs-number">1L</span>);    user.setName(<span class="hljs-string">"kuangshen111"</span>);    user.setEmail(<span class="hljs-string">"24736743@qq.com"</span>);    <span class="hljs-comment">// 模拟另外一个线程执行了插队操作</span>    User user2 = userMapper.selectById(<span class="hljs-number">1L</span>);    user2.setName(<span class="hljs-string">"kuangshen222"</span>);    user2.setEmail(<span class="hljs-string">"24736743@qq.com"</span>);    userMapper.updateById(user2);    <span class="hljs-comment">// 自旋锁来多次尝试提交！</span>    userMapper.updateById(user); <span class="hljs-comment">// 如果没有乐观锁就会覆盖插队线程的值！</span>&#125;</code></pre><h4 id="6、查询操作"><a href="#6、查询操作" class="headerlink" title="6、查询操作"></a>6、查询操作</h4><pre><code class="hljs java"><span class="hljs-comment">// 测试查询</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectById</span><span class="hljs-params">()</span></span>&#123;    User user = userMapper.selectById(<span class="hljs-number">1L</span>);    System.out.println(user);&#125;<span class="hljs-comment">// 测试批量查询！</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectByBatchId</span><span class="hljs-params">()</span></span>&#123;    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));    users.forEach(System.out::println);&#125;<span class="hljs-comment">// 按条件查询之一使用map操作</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectByBatchIds</span><span class="hljs-params">()</span></span>&#123;    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    <span class="hljs-comment">// 自定义要查询</span>    map.put(<span class="hljs-string">"name"</span>,<span class="hljs-string">"狂神说Java"</span>);    map.put(<span class="hljs-string">"age"</span>,<span class="hljs-number">3</span>);    List&lt;User&gt; users = userMapper.selectByMap(map);    users.forEach(System.out::println);&#125;</code></pre><h4 id="7、分页查询（内置）"><a href="#7、分页查询（内置）" class="headerlink" title="7、分页查询（内置）"></a>7、分页查询（内置）</h4><p>1、配置组件<br><pre><code class="hljs java"><span class="hljs-comment">// 分页插件</span><span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title">paginationInterceptor</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PaginationInterceptor();&#125;</code></pre></p><p>2、直接使用Page对象<br><pre><code class="hljs java"><span class="hljs-comment">// 测试分页查询</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPage</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">// 参数一：当前页</span>    <span class="hljs-comment">// 参数二：页面大小</span>    <span class="hljs-comment">// 使用了分页插件之后，所有的分页操作也变得简单的！</span>    Page&lt;User&gt; page = <span class="hljs-keyword">new</span> Page&lt;&gt;(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);    userMapper.selectPage(page,<span class="hljs-keyword">null</span>);    page.getRecords().forEach(System.out::println);    System.out.println(page.getTotal());&#125;</code></pre></p><h4 id="8、删除操作"><a href="#8、删除操作" class="headerlink" title="8、删除操作"></a>8、删除操作</h4><p>1、根据id删除记录<br><pre><code class="hljs java"><span class="hljs-comment">// 测试删除</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteById</span><span class="hljs-params">()</span></span>&#123;    userMapper.deleteById(<span class="hljs-number">1240620674645544965L</span>);&#125;<span class="hljs-comment">// 通过id批量删除</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteBatchId</span><span class="hljs-params">()</span></span>&#123;    userMapper.deleteBatchIds(Arrays.asList(<span class="hljs-number">1L</span>,<span class="hljs-number">2L</span>));&#125;<span class="hljs-comment">// 通过map删除</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteMap</span><span class="hljs-params">()</span></span>&#123;    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">"name"</span>,<span class="hljs-string">"狂神说Java"</span>);    userMapper.deleteByMap(map);&#125;</code></pre></p><h4 id="9、逻辑删除"><a href="#9、逻辑删除" class="headerlink" title="9、逻辑删除"></a>9、逻辑删除</h4><blockquote><p>物理删除 ：从数据库中直接移除<br>逻辑删除 ：再数据库中没有被移除，而是通过一个变量来让他失效！ deleted = 0 =&gt; deleted = 1</p></blockquote><p>管理员可以查看被删除的记录！防止数据的丢失，类似于回收站！<br>（原理：更新deleted字段，但同时查询也是将无结果）<br>1、在数据表中增加一个 deleted 字段（int 默认0）<br>2、实体类中增加属性<br><pre><code class="hljs java"><span class="hljs-meta">@TableLogic</span> <span class="hljs-comment">//逻辑删除</span><span class="hljs-keyword">private</span> Integer deleted;</code></pre></p><p>3、配置组件<br><pre><code class="hljs java"><span class="hljs-comment">// 逻辑删除组件！</span><span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> ISqlInjector <span class="hljs-title">sqlInjector</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LogicSqlInjector();&#125;</code></pre></p><pre><code class="hljs java"># 配置逻辑删除mybatis-plus.global-config.db-config.logic-delete-value=1mybatis-plus.global-config.db-config.logic-not-delete-value=0</code></pre><h4 id="10、性能分析插件"><a href="#10、性能分析插件" class="headerlink" title="10、性能分析插件"></a>10、性能分析插件</h4><p>我们在平时的开发中，会遇到一些慢sql。测试！ druid……<br>作用：性能分析拦截器，用于输出每条 SQL 语句及其执行时间，<br>MyBatisPlus也提供性能分析插件，如果超过这个时间就停止运行！<br>1、导入插件<br><pre><code class="hljs java"><span class="hljs-comment">/*** SQL执行效率插件*/</span><span class="hljs-meta">@Bean</span><span class="hljs-meta">@Profile</span>(&#123;<span class="hljs-string">"dev"</span>,<span class="hljs-string">"test"</span>&#125;)<span class="hljs-comment">// 设置 dev test 环境开启，保证我们的效率</span><span class="hljs-function"><span class="hljs-keyword">public</span> PerformanceInterceptor <span class="hljs-title">performanceInterceptor</span><span class="hljs-params">()</span> </span>&#123;    PerformanceInterceptor performanceInterceptor = <span class="hljs-keyword">new</span> PerformanceInterceptor();    performanceInterceptor.setMaxTime(<span class="hljs-number">100</span>); <span class="hljs-comment">// ms设置sql执行的最大时间，如果超过了则不执行</span>    performanceInterceptor.setFormat(<span class="hljs-keyword">true</span>); <span class="hljs-comment">// 是否格式化代码</span>    <span class="hljs-keyword">return</span> performanceInterceptor;&#125;</code></pre></p><p><code>记住，要在SpringBoot中配置环境为dev或者 test 环境！</code><br>2、测试使用<br><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">// 参数是一个 Wrapper ，条件构造器，这里我们先不用 null</span>    <span class="hljs-comment">// 查询全部用户</span>    List&lt;User&gt; users = userMapper.selectList(<span class="hljs-keyword">null</span>);    users.forEach(System.out::println);&#125;</code></pre></p><h4 id="11、条件构造器"><a href="#11、条件构造器" class="headerlink" title="11、条件构造器"></a>11、条件构造器</h4><p>十分重要：Wrapper<br>我们写一些复杂的sql就可以使用它来替代！<br><strong>1、限定非空条件</strong><br><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">// 查询name不为空的用户，并且邮箱不为空的用户，年龄大于等于12</span>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();    wrapper        .isNotNull(<span class="hljs-string">"name"</span>)        .isNotNull(<span class="hljs-string">"email"</span>)        .ge(<span class="hljs-string">"age"</span>,<span class="hljs-number">12</span>);    userMapper.selectList(wrapper).forEach(System.out::println); <span class="hljs-comment">// 和我们刚才学习的map对比一下</span>&#125;</code></pre></p><p><strong>2、限定字段等于某个值</strong><br><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">// 查询名字狂神说</span>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();    wrapper.eq(<span class="hljs-string">"name"</span>,<span class="hljs-string">"狂神说"</span>);    User user = userMapper.selectOne(wrapper); <span class="hljs-comment">// 查询一个数据，出现多个结果使用List或者 Map</span>    System.out.println(user);&#125;</code></pre></p><p><strong>3、限定字段值为某个区间</strong><br><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">// 查询年龄在 20 ~ 30 岁之间的用户</span>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();    wrapper.between(<span class="hljs-string">"age"</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>); <span class="hljs-comment">// 区间</span>    Integer count = userMapper.selectCount(wrapper);<span class="hljs-comment">// 查询结果数</span>    System.out.println(count);&#125;</code></pre></p><p><strong>4、模糊查询</strong><br><pre><code class="hljs java"><span class="hljs-comment">// 模糊查询</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();    <span class="hljs-comment">// 左和右 t%</span>    wrapper        .notLike(<span class="hljs-string">"name"</span>,<span class="hljs-string">"e"</span>)        .likeRight(<span class="hljs-string">"email"</span>,<span class="hljs-string">"t"</span>);    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(wrapper);    maps.forEach(System.out::println);&#125;</code></pre></p><p><strong>5、id条件从子查询中得来</strong><br><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span>&#123;    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();    <span class="hljs-comment">// id 在子查询中查出来</span>    wrapper.inSql(<span class="hljs-string">"id"</span>,<span class="hljs-string">"select id from user where id&lt;3"</span>);    List&lt;Object&gt; objects = userMapper.selectObjs(wrapper);    objects.forEach(System.out::println);&#125;</code></pre></p><p>6、根据id进行排序<br><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span></span>&#123;    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();    <span class="hljs-comment">// 通过id进行升序排序</span>    wrapper.orderByAsc(<span class="hljs-string">"id"</span>);    List&lt;User&gt; users = userMapper.selectList(wrapper);    users.forEach(System.out::println);&#125;</code></pre></p><h4 id="12、代码自动生成器"><a href="#12、代码自动生成器" class="headerlink" title="12、代码自动生成器"></a>12、代码自动生成器</h4><p>dao、pojo、service、controller都给我自己去编写完成！<br>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p><p>代码：<br><pre><code class="hljs java">package com.kuang;import com.baomidou.mybatisplus.annotation.DbType;import com.baomidou.mybatisplus.annotation.FieldFill;import com.baomidou.mybatisplus.annotation.IdType;import com.baomidou.mybatisplus.annotation.TableField;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.config.DataSourceConfig;import com.baomidou.mybatisplus.generator.config.GlobalConfig;import com.baomidou.mybatisplus.generator.config.PackageConfig;import com.baomidou.mybatisplus.generator.config.StrategyConfig;import com.baomidou.mybatisplus.generator.config.po.TableFill;import com.baomidou.mybatisplus.generator.config.rules.DateType;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;import java.util.ArrayList;// 代码自动生成器public class KuangCode &#123;    public static void main(String[] args) &#123;        // 需要构建一个 代码自动生成器 对象        AutoGenerator mpg = new AutoGenerator();        // 配置策略        // 1、全局配置        GlobalConfig gc = new GlobalConfig();        String projectPath = System.getProperty("user.dir");        gc.setOutputDir(projectPath+"/src/main/java");        gc.setAuthor("狂神说");        gc.setOpen(false);        gc.setFileOverride(false); // 是否覆盖        gc.setServiceName("%sService"); // 去Service的I前缀        gc.setIdType(IdType.ID_WORKER);        gc.setDateType(DateType.ONLY_DATE);        gc.setSwagger2(true);        mpg.setGlobalConfig(gc);                //2、设置数据源        DataSourceConfig dsc = new DataSourceConfig();        dsc.setUrl("jdbc:mysql://localhost:3306/kuang_community?        useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8");        dsc.setDriverName("com.mysql.cj.jdbc.Driver");        dsc.setUsername("root");        dsc.setPassword("123456");        dsc.setDbType(DbType.MYSQL);        mpg.setDataSource(dsc);        //3、包的配置        PackageConfig pc = new PackageConfig();        pc.setModuleName("blog");        pc.setParent("com.kuang");        pc.setEntity("entity");        pc.setMapper("mapper");        pc.setService("service");        pc.setController("controller");        mpg.setPackageInfo(pc);        //4、策略配置（只需要改这里的表名即可）        StrategyConfig strategy = new StrategyConfig();        strategy.setInclude("blog_tags","course","links","sys_settings","user_record","user_say"); // 设置要映射的表名        strategy.setNaming(NamingStrategy.underline_to_camel);        strategy.setColumnNaming(NamingStrategy.underline_to_camel);        strategy.setEntityLombokModel(true); // 自动lombok；        strategy.setLogicDeleteFieldName("deleted");        //5、自动填充配置        TableFill gmtCreate = new TableFill("gmt_create", FieldFill.INSERT);        TableFill gmtModified = new TableFill("gmt_modified",        FieldFill.INSERT_UPDATE);        ArrayList&lt;TableFill&gt; tableFills = new ArrayList&lt;&gt;();        tableFills.add(gmtCreate);        tableFills.add(gmtModified);        strategy.setTableFillList(tableFills);        //6、乐观锁        strategy.setVersionFieldName("version");        strategy.setRestControllerStyle(true);        strategy.setControllerMappingHyphenStyle(true); //        localhost:8080/hello_id_2        mpg.setStrategy(strategy);        mpg.execute(); //执行    &#125;&#125;</code></pre></p><p align="right"><br>2020年06月13日 晚上<br>Guzhz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：MyBatisPlus可以节省我们大量工作时间，所有的CRUD代码它都可以自动化完成！&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;无侵入：只
      
    
    </summary>
    
      <category term="学习类" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%B1%BB/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的简单回顾</title>
    <link href="http://yoursite.com/2020/06/09/JavaScript%E7%9A%84%E7%AE%80%E5%8D%95%E5%9B%9E%E9%A1%BE/"/>
    <id>http://yoursite.com/2020/06/09/JavaScript的简单回顾/</id>
    <published>2020-06-09T08:50:30.000Z</published>
    <updated>2020-08-04T13:50:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>前言：<a href="https://www.bilibili.com/video/BV1JJ41177di" target="_blank" rel="noopener">教学视频</a>、<a href="https://blog.csdn.net/qq_36259143/article/details/106044195" target="_blank" rel="noopener">笔记参考</a></p><h3 id="一、快速入门"><a href="#一、快速入门" class="headerlink" title="一、快速入门"></a>一、快速入门</h3><h4 id="1-1、两种引入方式"><a href="#1-1、两种引入方式" class="headerlink" title="1.1、两种引入方式"></a>1.1、两种引入方式</h4><p><strong>内部标签</strong><br><pre><code class="hljs javascript">&lt;script&gt; <span class="hljs-comment">//....</span>&lt;script&gt;</code></pre></p><p><strong>外部引入</strong><br><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">"js/myjs.js"</span>&gt;<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre></p><h4 id="1-2、基本语法"><a href="#1-2、基本语法" class="headerlink" title="1.2、基本语法"></a>1.2、基本语法</h4><pre><code class="hljs javascript">&lt;script&gt;    <span class="xml"><span class="hljs-comment">&lt;!--JavaScript严格区分大小写--&gt;</span>    var score = 1 ;    if (score &gt; 60 &amp;&amp; score <span class="hljs-tag">&lt; <span class="hljs-attr">70</span>)&#123;        <span class="hljs-attr">alert</span>("<span class="hljs-attr">60</span>~<span class="hljs-attr">70</span>");    &#125;<span class="hljs-attr">else</span> <span class="hljs-attr">if</span>(<span class="hljs-attr">score</span> &gt;</span> 70 &amp;&amp; score <span class="hljs-tag">&lt; <span class="hljs-attr">80</span>)&#123;        <span class="hljs-attr">alert</span>("<span class="hljs-attr">70</span>~<span class="hljs-attr">80</span>");    &#125;<span class="hljs-attr">else</span>&#123;        <span class="hljs-attr">alert</span>("<span class="hljs-attr">other</span>")    &#125;&lt;/<span class="hljs-attr">script</span>&gt;</span></span></code></pre><h4 id="1-3、数据类型"><a href="#1-3、数据类型" class="headerlink" title="1.3、数据类型"></a>1.3、数据类型</h4><pre><code class="hljs javascript">· 变量：<span class="hljs-keyword">var</span> a· number：js不区分小树和整数· 字符串：<span class="hljs-string">'abc'</span> <span class="hljs-string">"abc"</span>· 布尔值：<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>· 逻辑运算：    &amp;&amp; 两个都为真，结果为真    || 一个为真，结果为真    ! 真即假，假即真· 比较运算符：    == 等于（类型不一样，值一样，也会判断为<span class="hljs-literal">true</span>）    === 绝对等于（类型一样，值一样，结果为<span class="hljs-literal">true</span>）· <span class="hljs-literal">NaN</span> === <span class="hljs-literal">NaN</span>，这个与所有的数值都不相等，包括自己    只能通过<span class="hljs-built_in">isNaN</span>（<span class="hljs-literal">NaN</span>）来判断这个数是否是<span class="hljs-literal">NaN</span>· 尽量避免使用浮点数进行运算，存在精度问题！· <span class="hljs-literal">null</span> 空· <span class="hljs-literal">undefined</span> 未定义· Java的数组必须是相同类型的对象~，JS中不需要这样    <span class="hljs-comment">//保证代码的可读性，尽量使用[]</span>    <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-string">'hello'</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">true</span>];    <span class="hljs-comment">//第二种定义方法</span>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-string">'hello'</span>);· 对象    <span class="hljs-keyword">var</span> person = &#123;        <span class="hljs-attr">name</span>:<span class="hljs-string">'Tom'</span>,        <span class="hljs-attr">age</span>:<span class="hljs-number">3</span>,        <span class="hljs-attr">tags</span>:[<span class="hljs-string">'js'</span>,<span class="hljs-string">'java'</span>,<span class="hljs-string">'web'</span>,<span class="hljs-string">'...'</span>]    &#125;· 取对象值    person.name    &gt; <span class="hljs-string">"Tom"</span>    person.age    &gt; <span class="hljs-number">3</span></code></pre><h4 id="1-4、严格检查模式"><a href="#1-4、严格检查模式" class="headerlink" title="1.4、严格检查模式"></a>1.4、严格检查模式</h4><p><strong>改用ES6</strong><br><pre><code class="hljs javascript">&lt;script&gt;    <span class="hljs-string">'use strict'</span>;    <span class="hljs-comment">//全局变量</span>    <span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>    <span class="hljs-comment">//ES6 let</span>&lt;<span class="hljs-regexp">/script&gt;</span></code></pre></p><h3 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h3><h4 id="2-1、字符串"><a href="#2-1、字符串" class="headerlink" title="2.1、字符串"></a>2.1、字符串</h4><p><strong>特殊转义字符</strong><br><pre><code class="hljs javascript">\'\n\t\u4e2d    \u##### Unicode字符\x41Ascall字符</code></pre></p><p><strong>多换字符串编写</strong><br><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> msg =       <span class="hljs-string">`hello       world       你好呀       nihao       `</span></code></pre></p><p><strong>模板字符串</strong><br><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">'Tom'</span>;<span class="hljs-keyword">let</span> age = <span class="hljs-number">3</span>;<span class="hljs-keyword">var</span> msg = <span class="hljs-string">`你好，<span class="hljs-subst">$&#123;name&#125;</span>`</span>   <span class="hljs-comment">//tab 上面 esc下面</span></code></pre></p><p><strong>字符串长度</strong><br><pre><code class="hljs javascript">str.length</code></pre></p><p><strong>大小写转换</strong><br><pre><code class="hljs javascript"><span class="hljs-comment">//注意，这里是方法，不是属性了</span>student.toUpperCase();student.toLowerCase();</code></pre></p><p><strong>取下标</strong><br><pre><code class="hljs javascript">student.indexof(<span class="hljs-string">'t'</span>)</code></pre></p><p><strong>切片</strong><br><pre><code class="hljs javascript">substring，从<span class="hljs-number">0</span>开始，取左不取右student.substring(<span class="hljs-number">1</span>)<span class="hljs-comment">//从第一个字符串截取到最后一个字符串</span>student.substring(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)<span class="hljs-comment">//[1,3)</span></code></pre></p><h4 id="2-2、数组"><a href="#2-2、数组" class="headerlink" title="2.2、数组"></a>2.2、数组</h4><p><strong>Array可以包含任意的数据类型</strong><br><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<span class="hljs-comment">//通过下标取值和赋值</span></code></pre></p><p><strong>长度</strong><br><pre><code class="hljs javascript">arr.length<span class="hljs-comment">//注意：假如给arr.lennth赋值，数组大小就会发生变化~，如果赋值过小，元素就会丢失</span></code></pre></p><p><strong>indexOf，通过元素获得下标索引</strong><br><pre><code class="hljs javascript">arr.indexOf(<span class="hljs-number">2</span>)<span class="hljs-number">1</span><span class="hljs-comment">//字符串的"1"和数字 1 是不同的</span></code></pre></p><p><strong>slice()：截取Array的一部分，返回的一个新数组，类似于String中substring</strong></p><p><strong>push()，pop() 进出栈原理</strong><br><pre><code class="hljs javascript">push：压入到尾部pop：弹出尾部的一个元素</code></pre></p><p><strong>unshift(),shift() 头部</strong><br><pre><code class="hljs javascript">unshift：压入到头部shift：弹出头部的一个元素</code></pre></p><p><strong>排序sort()</strong><br><pre><code class="hljs javascript">(<span class="hljs-number">3</span>)[<span class="hljs-string">"B"</span>,<span class="hljs-string">"C"</span>,<span class="hljs-string">"A"</span>]arr.sort()(<span class="hljs-number">3</span>)[<span class="hljs-string">"A"</span>,<span class="hljs-string">"B"</span>,<span class="hljs-string">"C"</span>]</code></pre></p><p><strong>元素反转reverse()</strong><br><pre><code class="hljs javascript">(<span class="hljs-number">3</span>)[<span class="hljs-string">"A"</span>,<span class="hljs-string">"B"</span>,<span class="hljs-string">"C"</span>]arr.reverse()(<span class="hljs-number">3</span>)[<span class="hljs-string">"C"</span>,<span class="hljs-string">"B"</span>,<span class="hljs-string">"A"</span>]</code></pre></p><p><strong>concat()</strong><br><pre><code class="hljs javascript">注意：concat()并没有修改数组，只是会返回一个新的数组<span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]a.concat(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)</code></pre></p><p><strong>连接符join()</strong><br><pre><code class="hljs javascript">在本例中，我们将创建一个数组，然后把它的所有元素放入一个字符串：&lt;script type="text/javascript"&gt;    var arr = new Array(3)    arr[0] = "George"    arr[1] = "John"    arr[2] = "Thomas"    document.write(arr.join())&lt;/script&gt;=&gt; George,John,Thomas------------------------------------------------在本例中，我们将使用分隔符来分隔数组中的元素：&lt;script type="text/javascript"&gt;    var arr = new Array(3)    arr[0] = "George"    arr[1] = "John"    arr[2] = "Thomas"    document.write(arr.join("."))&lt;/script&gt;George.John.Thomas</code></pre></p><p><strong>多维数组：同java</strong></p><h4 id="2-3、对象"><a href="#2-3、对象" class="headerlink" title="2.3、对象"></a>2.3、对象</h4><p><strong>基本格式</strong><br><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 对象名 = &#123;    属性名：属性值，    属性名：属性值，    属性名：属性值&#125;<span class="hljs-comment">//定义了一个person对象，它有四个属性</span><span class="hljs-keyword">var</span> person = &#123;    <span class="hljs-attr">name</span>:<span class="hljs-string">"Tom"</span>,    <span class="hljs-attr">age</span>:<span class="hljs-number">3</span>,    <span class="hljs-attr">email</span>:<span class="hljs-string">"123456798@QQ.com"</span>,    <span class="hljs-attr">score</span>:<span class="hljs-number">66</span>&#125;</code></pre></p><p><strong>使用一个不存在的对象属性，不会报错！undefined</strong><br><pre><code class="hljs javascript">person.haha&gt;&gt;&gt; <span class="hljs-literal">undefined</span></code></pre></p><p><strong>动态的删减属性，通过delete删除对象属性</strong><br><pre><code class="hljs javascript"><span class="hljs-keyword">delete</span> person.name<span class="hljs-literal">true</span></code></pre></p><p><strong>动态添加，直接给新的属性添加值即可</strong><br><pre><code class="hljs javascript">person.haha = <span class="hljs-string">'haha'</span>;<span class="hljs-string">'haha'</span></code></pre></p><p><strong>判断属性是否在这个对象中！xxx in xxx</strong><br><pre><code class="hljs javascript"><span class="hljs-string">'age'</span> <span class="hljs-keyword">in</span> person<span class="hljs-literal">true</span><span class="hljs-comment">//继承</span><span class="hljs-string">'toString'</span> <span class="hljs-keyword">in</span> person<span class="hljs-literal">true</span></code></pre></p><p><strong>判断一个属性是否是这个对象自身拥有的：hasOwnProperty()</strong><br><pre><code class="hljs javascript">person.hasOwnProperty(<span class="hljs-string">'toString'</span>)<span class="hljs-literal">false</span>person.hasOwnProperty(<span class="hljs-string">'age'</span>)<span class="hljs-literal">true</span></code></pre></p><h4 id="2-4、流程控制"><a href="#2-4、流程控制" class="headerlink" title="2.4、流程控制"></a>2.4、流程控制</h4><p><strong>if、while、for同Java</strong><br><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = <span class="hljs-number">3</span>;<span class="hljs-keyword">if</span>(age&gt;<span class="hljs-number">3</span>)&#123;    alert(<span class="hljs-number">3</span>);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(age&lt;<span class="hljs-number">5</span>)&#123;    alert(<span class="hljs-number">5</span>);&#125;<span class="hljs-keyword">else</span>&#123;    alert(haha);&#125;<span class="hljs-keyword">while</span>(age &lt; <span class="hljs-number">100</span>)&#123;    age = age + <span class="hljs-number">1</span>;    <span class="hljs-built_in">console</span>.log(age);&#125;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">100</span>; i++)&#123;    <span class="hljs-built_in">console</span>.log(i);&#125;</code></pre></p><p><strong>forEach循环</strong><br><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = [<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">45</span>,<span class="hljs-number">123</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>]age.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(value);&#125;)</code></pre></p><p><strong>for…in</strong><br><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> index <span class="hljs-keyword">in</span> age)&#123;<span class="hljs-built_in">console</span>.log(age[index]);&#125;</code></pre></p><h4 id="2-5、Map-和-Set-ES6的新特性"><a href="#2-5、Map-和-Set-ES6的新特性" class="headerlink" title="2.5、Map 和 Set ES6的新特性"></a>2.5、Map 和 Set ES6的新特性</h4><p><strong>Map</strong><br><pre><code class="hljs javascript"><span class="hljs-comment">//ES6</span><span class="hljs-comment">//学成的成绩，学生的名字</span><span class="hljs-keyword">var</span> names = [<span class="hljs-string">'tom'</span>,<span class="hljs-string">'jack'</span>,<span class="hljs-string">'sam'</span>];<span class="hljs-keyword">var</span> scores = [<span class="hljs-number">100</span>,<span class="hljs-number">90</span>,<span class="hljs-number">80</span>];<span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[<span class="hljs-string">'tom'</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">'jack'</span>,<span class="hljs-number">90</span>],[<span class="hljs-string">'sam'</span>,<span class="hljs-number">80</span>]])<span class="hljs-keyword">var</span> name = map.get(<span class="hljs-string">'tom'</span>);<span class="hljs-built_in">console</span>.log(name);<span class="hljs-comment">//</span>map.set(<span class="hljs-string">'admin'</span>,<span class="hljs-number">123456</span>);<span class="hljs-comment">//新增元素</span><span class="hljs-built_in">console</span>.log(map);<span class="hljs-comment">//Map(4)&#123;"tom" =&gt; 100, "jack" =&gt; 90, "sam" =&gt; 80, "admin" =&gt; 123456&#125;</span>map.delete(<span class="hljs-string">'tom'</span>);<span class="hljs-comment">//删除元素</span><span class="hljs-built_in">console</span>.log(map);<span class="hljs-comment">//Map(3)&#123;"jack" =&gt; 90, "sam" =&gt; 80, "admin" =&gt; 123456&#125;</span></code></pre></p><p><strong>Set：无需不重复的集合</strong><br><pre><code class="hljs javascript"><span class="hljs-comment">//set可以去重</span><span class="hljs-keyword">var</span> <span class="hljs-keyword">set</span> = new Set([3,1,1,1,1,2]);<span class="hljs-keyword">set</span>.add(4);//添加console.log(<span class="hljs-keyword">set</span>);//Set(4) &#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;<span class="hljs-keyword">set</span>.delete(1);//删除console.log(<span class="hljs-keyword">set</span>);//Set(3) &#123;<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">set</span>.has(3));//是否包含某个元素</code></pre></p><h4 id="2-6、Iterator"><a href="#2-6、Iterator" class="headerlink" title="2.6、Iterator"></a>2.6、Iterator</h4><p><strong>遍历数组</strong><br><pre><code class="hljs javascript"><span class="hljs-comment">//通过for of / for in 下标</span><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> x <span class="hljs-keyword">of</span> arr)&#123;    <span class="hljs-built_in">console</span>.log(x)&#125;<span class="hljs-comment">//存在一个bug</span>arr.name = <span class="hljs-number">123</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> x <span class="hljs-keyword">of</span> arr)&#123;    <span class="hljs-built_in">console</span>.log(x)&#125;输出:<span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span>name</code></pre></p><p><strong>遍历map</strong><br><pre><code class="hljs javascript"><span class="hljs-comment">//遍历map</span><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> x <span class="hljs-keyword">of</span> map)&#123;    <span class="hljs-built_in">console</span>.log(x);&#125;</code></pre></p><p><strong>遍历set</strong><br><pre><code class="hljs javascript"><span class="hljs-comment">//遍历set</span><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> x <span class="hljs-keyword">of</span> <span class="hljs-keyword">set</span>)&#123;    <span class="hljs-built_in">console</span>.log(x);&#125;</code></pre></p><h3 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h3><h4 id="3-1、定义函数"><a href="#3-1、定义函数" class="headerlink" title="3.1、定义函数"></a>3.1、定义函数</h4><p><strong>方式一</strong><br><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abs</span>(<span class="hljs-params">x</span>)</span>&#123;    <span class="hljs-keyword">return</span> x;&#125;<span class="hljs-comment">//一旦执行到return代表函数结束，返回结果。</span><span class="hljs-comment">//如果没有执行return，函数执行完也会返回结果，返回就是undefined</span></code></pre></p><p><strong>方式二</strong><br><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> abs = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>&#123;    <span class="hljs-keyword">return</span> x;&#125;<span class="hljs-comment">//function(x),这是一个匿名函数，但是赋值给abs。所以通过abs可以调用</span></code></pre></p><p><strong>参数问题</strong><br><pre><code class="hljs javascript"><span class="hljs-comment">//jJavaScript可以传任意个参数，也可以不传递参数。</span><span class="hljs-comment">//参数进来是否存在的问题？假设不存在参数，如何规避？</span><span class="hljs-keyword">var</span> abs = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>&#123;    <span class="hljs-comment">//参数个数</span>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.length);    <span class="hljs-comment">//手动抛出异常   </span>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x !==<span class="hljs-string">'number'</span>)&#123;        <span class="hljs-keyword">throw</span> <span class="hljs-string">'Not a Number'</span>;    &#125;    <span class="hljs-keyword">return</span> x;&#125;<span class="hljs-comment">//arguments：代表传递进来所有的参数，是一个数组</span></code></pre></p><p><strong>问题：arguments 包含所有的参数，我们有时候想使用多余的参数来进行附加操作，需要排除已有参数</strong><br><pre><code class="hljs javascript"><span class="hljs-comment">//rest：获去除了已经定义的参数，ES6引入的新特性</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arg</span>(<span class="hljs-params">a,b,...rest</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(a);    <span class="hljs-built_in">console</span>.log(b);    <span class="hljs-built_in">console</span>.log(rest);&#125;<span class="hljs-comment">//rest参数只能写在最后面，必须用…标识</span></code></pre></p><h4 id="3-2、变量的作用域"><a href="#3-2、变量的作用域" class="headerlink" title="3.2、变量的作用域"></a>3.2、变量的作用域</h4><p><strong>在Javascript中，var定义变量实际是有作用域的。<br>假设在函数体中声明，则在函数体外不可以使用~（如果想要实现，则需要闭包）</strong><br><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abc</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> x= <span class="hljs-number">1</span>;    x = x + <span class="hljs-number">1</span>;&#125;x = x + <span class="hljs-number">2</span> ;<span class="hljs-comment">//Uncaught ReferenceError: x is not defined</span></code></pre></p><p><strong>如果两个函数使用相同变量名，只要在函数内部，就不冲突</strong><br><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abc1</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> x= <span class="hljs-number">1</span>;    x = x + <span class="hljs-number">1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abc2</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> x= <span class="hljs-number">2</span>;    x = x + <span class="hljs-number">1</span>;&#125;</code></pre></p><p><strong>内部函数可以询问外部函数的成员，反之则不行</strong><br><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abc3</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> x= <span class="hljs-number">1</span>;    <span class="hljs-comment">//内部函数可以询问外部函数的成员，反之则不行</span>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abc3</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> y = x + <span class="hljs-number">1</span>;<span class="hljs-comment">//2</span>    &#125;    <span class="hljs-keyword">var</span> z = y + <span class="hljs-number">1</span>;<span class="hljs-comment">//Uncaught ReferenceError: x is not defined</span>&#125;</code></pre></p><p><strong>假设：内部函数变量与外部函数变量重名</strong><br><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abc5</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abc6</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">var</span> x = A;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'inner'</span> + x);<span class="hljs-comment">//outer1</span>    &#125;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'outer'</span>+x);<span class="hljs-comment">//innerA</span>    abc6();&#125;<span class="hljs-comment">//不冲突，自己有就用自己的</span></code></pre></p><p><strong>提升变量作用域</strong><br><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abc8</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> x = <span class="hljs-string">'x'</span> + y;    <span class="hljs-built_in">console</span>.log(x);    <span class="hljs-keyword">var</span> y = <span class="hljs-string">'y'</span>;&#125;<span class="hljs-comment">//结果：undefined</span><span class="hljs-comment">//说明：js执行引擎，自动提升了y的声明，但是不会提升y的赋值</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abc8</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> y;    <span class="hljs-keyword">var</span> x = <span class="hljs-string">'x'</span> + y;    <span class="hljs-built_in">console</span>.log(x);    y = <span class="hljs-string">'y'</span>;&#125;<span class="hljs-comment">//这是在Javascript简历之初就存在的特性。养成规范：所有的变量定义都放在函数头部，不要乱放，便于代码维护；</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abc</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>,        y = x + <span class="hljs-number">1</span>,        z,i,a;<span class="hljs-comment">//undefined</span>&#125;</code></pre></p><p><strong>全局函数</strong><br><pre><code class="hljs javascript"><span class="hljs-comment">//全局变量</span>x = <span class="hljs-number">1</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(x);&#125;f();<span class="hljs-built_in">console</span>.log(x);</code></pre></p><p><strong>全局对象：window</strong><br><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-string">'xxx'</span>;alert(x);alert(windws.x);<span class="hljs-comment">//alert()这个函数本身也是一个window变量：</span><span class="hljs-keyword">var</span> x = <span class="hljs-string">'xxx'</span>;<span class="hljs-built_in">window</span>.alert(x);<span class="hljs-keyword">var</span> old_alert = <span class="hljs-built_in">window</span>.alert;<span class="hljs-comment">// old_alert(x);</span><span class="hljs-built_in">window</span>.alert = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<span class="hljs-comment">//发现alert()失效了</span><span class="hljs-built_in">window</span>.alert(<span class="hljs-number">123</span>);<span class="hljs-comment">//恢复</span><span class="hljs-built_in">window</span>.alert = old_alert;<span class="hljs-built_in">window</span>.alert(<span class="hljs-number">456</span>);<span class="hljs-comment">//Javascript实际上只有一个全局作用域，任何变量（函数也可以视为变量），假设没有在函数作用范围，就会向外查找，如果在全局作用域都没有找到，报错RefrenceError</span></code></pre></p><p><strong>规范：由于我们所有的全局变量都会绑定到我们的window上。如果不同的js文件，使用了相同的全局变量，冲突-&gt;如何能够减少冲突？</strong><br><pre><code class="hljs javascript"><span class="hljs-comment">//唯一全局变量</span><span class="hljs-keyword">var</span> LiusxApp = &#123;&#125;;<span class="hljs-comment">//定义全局变量</span>LiusxApp.name = <span class="hljs-string">'xiaoming'</span>;LiusxApp.add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) </span>&#123;    <span class="hljs-keyword">return</span> a + b;&#125;<span class="hljs-comment">//把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名冲突的问题。（jQuery）</span></code></pre></p><p><strong>局部作用域：let</strong><br><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aaa</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span> ;i++)&#123;        <span class="hljs-built_in">console</span>.log(i);    &#125;    <span class="hljs-built_in">console</span>.log(i+<span class="hljs-number">1</span>);<span class="hljs-comment">//问题，i 出了这个作用域还可以使用</span>&#125;<span class="hljs-comment">//ES6：let关键字，解决局部作用域冲突问题！</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aaa</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span> ;i++)&#123;        <span class="hljs-built_in">console</span>.log(i);    &#125;    <span class="hljs-built_in">console</span>.log(i+<span class="hljs-number">1</span>);<span class="hljs-comment">//问题，i 出了这个作用域即刻失效</span>&#125;<span class="hljs-comment">//建议大家都用let取定义局部作用域的变量</span></code></pre></p><p><strong>const：ES6之前，怎么定义常量：只有用全部大写字母命名的变量就是常量：建议不要修改这样的值</strong><br><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> PI = <span class="hljs-string">'3.14'</span>;<span class="hljs-comment">//只读效果</span><span class="hljs-built_in">console</span>.log(PI);PI = <span class="hljs-string">'123'</span>;<span class="hljs-comment">//Uncaught TypeError: Assignment to constant variable.</span><span class="hljs-built_in">console</span>.log(PI);</code></pre></p><h4 id="3-3、方法"><a href="#3-3、方法" class="headerlink" title="3.3、方法"></a>3.3、方法</h4><p><strong>定义方法（方法就是把函数放在对象里面，对象中只有2个东西：属性和方法）</strong><br><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> liusx = &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">'Sam'</span>,    <span class="hljs-attr">bitrh</span>: <span class="hljs-number">2020</span>,    <span class="hljs-comment">//方法</span>    age: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear();        <span class="hljs-keyword">return</span> now-<span class="hljs-keyword">this</span>.bitrh;    &#125;&#125;<span class="hljs-comment">//属性</span>liusx.name;<span class="hljs-comment">//方法，一定要带()</span>liusx.age();</code></pre></p><p><strong>this的使用：没有上下午关系直接使用会NaN，但可以添加指向</strong><br><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> liusx = &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">'Sam'</span>,    <span class="hljs-attr">bitrh</span>: <span class="hljs-number">2020</span>,    <span class="hljs-comment">//方法</span>    age: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear();        <span class="hljs-keyword">return</span> now-<span class="hljs-keyword">this</span>.bitrh;    &#125;&#125;<span class="hljs-comment">//属性</span>liusx.name;<span class="hljs-comment">//方法，一定要带()</span>liusx.age();</code></pre></p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAge</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear();    <span class="hljs-keyword">return</span> now-<span class="hljs-keyword">this</span>.bitrh;&#125;<span class="hljs-keyword">var</span> liusx = &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">'Sam'</span>,    <span class="hljs-attr">bitrh</span>: <span class="hljs-number">2020</span>,    <span class="hljs-comment">//方法</span>    age: getAge&#125;<span class="hljs-comment">//liusx.age()    =&gt;ok</span><span class="hljs-comment">//getAge()     =&gt;NaN</span></code></pre><p><strong>控制this的指向</strong><br><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAge</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear();    <span class="hljs-keyword">return</span> now-<span class="hljs-keyword">this</span>.bitrh;&#125;<span class="hljs-keyword">var</span> liusx = &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">'Sam'</span>,    <span class="hljs-attr">bitrh</span>: <span class="hljs-number">2020</span>,    <span class="hljs-comment">//方法</span>    age: getAge&#125;<span class="hljs-comment">//liusx.age()    =&gt;ok</span><span class="hljs-comment">//getAge()       =&gt;NaN</span>getAge.apply(liusx,[])<span class="hljs-comment">//this，指向了liusx，参数为空</span></code></pre></p><h3 id="四、内部对象"><a href="#四、内部对象" class="headerlink" title="四、内部对象"></a>四、内部对象</h3><p><strong>标准对象</strong><br><pre><code class="hljs javascript"><span class="hljs-keyword">typeof</span> <span class="hljs-number">123</span><span class="hljs-string">"number"</span><span class="hljs-keyword">typeof</span> <span class="hljs-string">'123'</span><span class="hljs-string">"string"</span><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span><span class="hljs-string">"boolean"</span><span class="hljs-keyword">typeof</span> <span class="hljs-literal">NaN</span><span class="hljs-string">"number"</span><span class="hljs-keyword">typeof</span> []<span class="hljs-string">"object"</span><span class="hljs-keyword">typeof</span> &#123;&#125;<span class="hljs-string">"object"</span><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Math</span>.abs<span class="hljs-string">"function"</span><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span><span class="hljs-string">"undefined"</span></code></pre></p><p><strong>4.1、Date的基本使用</strong><br><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<span class="hljs-comment">//</span>now.getFullYear();<span class="hljs-comment">//年</span>now.getMonth();<span class="hljs-comment">//月</span>now.getDate();<span class="hljs-comment">//日</span>now.getDay();<span class="hljs-comment">//星期几</span>now.getHours();<span class="hljs-comment">//时</span>now.getMinutes();<span class="hljs-comment">//分</span>now.getSeconds();<span class="hljs-comment">//秒</span>now.getTime();<span class="hljs-comment">//时间戳 全世界统一 1970 1.1 8:00:00</span><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">1589096655409</span>));<span class="hljs-comment">//时间戳转时间</span><span class="hljs-comment">//转换</span><span class="hljs-comment">//本地时间</span>now.toLocaleString();<span class="hljs-string">"2020/5/10 下午3:44:15"</span><span class="hljs-comment">//东八区</span>now.toGMTString();<span class="hljs-string">"Sun, 10 May 2020 07:44:15 GMT"</span></code></pre></p><p><strong>4.2、JSON</strong><br><pre><code class="hljs javascript"><span class="hljs-comment">//JSON 字符串和 JS 对象的转换</span><span class="hljs-keyword">var</span> user = &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">'liusx'</span>,    <span class="hljs-attr">age</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">sex</span>: <span class="hljs-string">'男'</span>&#125;<span class="hljs-comment">//对象转换json字符串:&#123;"name":"liusx","age":3,"sex":"男"&#125;</span><span class="hljs-keyword">var</span> jsonuUer = <span class="hljs-built_in">JSON</span>.stringify(user);<span class="hljs-built_in">console</span>.log(jsonuUer);<span class="hljs-comment">//json  字符串转换为对象，参数为json字符串</span><span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-string">'&#123;"name":"liusx","age":3,"sex":"男"&#125;'</span>);<span class="hljs-built_in">console</span>.log(obj);</code></pre></p><pre><code class="hljs javascript"><span class="hljs-comment">//JSON 和 JS 对象的区别：</span><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"liusx"</span>,<span class="hljs-string">"age"</span>:<span class="hljs-number">3</span>,<span class="hljs-string">"sex"</span>:<span class="hljs-string">"男"</span>&#125;;<span class="hljs-keyword">var</span> json = <span class="hljs-string">'&#123;"name":"liusx","age":3,"sex":"男"&#125;'</span>;</code></pre><p><strong>4.3、Ajax</strong><br><pre><code class="hljs javascript">原生的Javascript写法，xhr异步请求jQuery封装好的方法axios请求</code></pre></p><h3 id="五、原型"><a href="#五、原型" class="headerlink" title="五、原型"></a>五、原型</h3><p><strong>5.1、原型的概念（类似Java继承）</strong><br><pre><code class="hljs javascript"><span class="hljs-comment">//面向对象</span><span class="hljs-keyword">var</span> Student = &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">'liusx'</span>,    <span class="hljs-attr">age</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">run</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name+<span class="hljs-string">"run....."</span>)    &#125;&#125;<span class="hljs-keyword">var</span> xiaoming = &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">'小明'</span>&#125;<span class="hljs-comment">//小明的原型 是Student</span>xiaoming.__proto__ = Student;   <span class="hljs-comment">//把属性继承给小明</span>xiaoming.run();<span class="hljs-keyword">var</span> Bird = &#123;    <span class="hljs-attr">fly</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name + <span class="hljs-string">"fly......"</span>)    &#125;&#125;<span class="hljs-comment">//小明的原型 是Bird</span>xiaoming.__proto__ = Bird;</code></pre></p><p><strong>5.2、class继承：class关键字，ES6引入</strong><br><pre><code class="hljs javascript"><span class="hljs-comment">//class继承</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name</span>) </span>&#123;    <span class="hljs-keyword">this</span>.name = name;&#125;<span class="hljs-comment">//给student新增一个方法</span>Student.prototype.hello = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    alert(<span class="hljs-string">'hello'</span>);&#125;</code></pre></p><blockquote><p>1、定义一个类，属性，方法<br><pre><code class="hljs javascript"><span class="hljs-comment">//ES6 之后======极度类似Java</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;    <span class="hljs-keyword">constructor</span>(name)&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    hello()&#123;        alert(<span class="hljs-string">'hello'</span>);    &#125;&#125;<span class="hljs-keyword">var</span> xiaoming = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">'小明'</span>);<span class="hljs-keyword">var</span> xiaoming = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">'小红'</span>);xiaoming.hello();</code></pre></p></blockquote><blockquote><p>2、继承<br><pre><code class="hljs javascript"><span class="hljs-comment">//ES6 之后======极度类似Java</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;    <span class="hljs-keyword">constructor</span>(name)&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    hello()&#123;        alert(<span class="hljs-string">'hello'</span>);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XiaoStudent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Student</span> </span>&#123;    <span class="hljs-keyword">constructor</span>(name,grade)&#123;        <span class="hljs-keyword">super</span>(name);        <span class="hljs-keyword">this</span>.grade = grade;    &#125;    myGrade()&#123;        alert(<span class="hljs-string">'我是一名小学生'</span>);    &#125;&#125;<span class="hljs-keyword">var</span> xiaoming = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">'小明'</span>);xiaoming.hello();<span class="hljs-keyword">var</span> xiaohong = <span class="hljs-keyword">new</span> XiaoStudent(<span class="hljs-string">'小红'</span>,<span class="hljs-number">1</span>);xiaohong.myGrade();</code></pre></p></blockquote><p><strong>5.3、原型链</strong><br><pre><code class="hljs javascript">__proto__<span class="hljs-comment">//无限套娃，形成了链</span></code></pre></p><h3 id="六、操作BOM对象（重点）"><a href="#六、操作BOM对象（重点）" class="headerlink" title="六、操作BOM对象（重点）"></a>六、操作BOM对象（重点）</h3><h4 id="6-1、window（重要）：代表浏览器窗口"><a href="#6-1、window（重要）：代表浏览器窗口" class="headerlink" title="6.1、window（重要）：代表浏览器窗口"></a>6.1、window（重要）：代表浏览器窗口</h4><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.alert(<span class="hljs-number">1</span>)<span class="hljs-literal">undefined</span><span class="hljs-built_in">window</span>.innerHeight<span class="hljs-number">722</span><span class="hljs-built_in">window</span>.innerWidth<span class="hljs-number">1148</span><span class="hljs-built_in">window</span>.outerHeight<span class="hljs-number">824</span><span class="hljs-built_in">window</span>.outerWidth<span class="hljs-number">1536</span><span class="hljs-comment">// 大家可以调整浏览器窗口试试</span></code></pre><h4 id="6-2、Navigator：封装了浏览器信息"><a href="#6-2、Navigator：封装了浏览器信息" class="headerlink" title="6.2、Navigator：封装了浏览器信息"></a>6.2、Navigator：封装了浏览器信息</h4><pre><code class="hljs javascript"><span class="hljs-comment">//大多数时候，我们不会使用：Navigator 对象，因为会被认为修改！不建议使用这些属性判断和编写代码</span>navigator.appName<span class="hljs-string">"Netscape"</span>navigator.appVersion<span class="hljs-string">"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36"</span>navigator.userAgent<span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36"</span>navigator.platform<span class="hljs-string">"Win32"</span></code></pre><h4 id="6-3、screen：代表屏幕尺寸"><a href="#6-3、screen：代表屏幕尺寸" class="headerlink" title="6.3、screen：代表屏幕尺寸"></a>6.3、screen：代表屏幕尺寸</h4><pre><code class="hljs javascript">screen.width<span class="hljs-number">1536</span>screen.height<span class="hljs-number">864</span></code></pre><h4 id="6-4、location（重要）：代表当前页面的URL信息"><a href="#6-4、location（重要）：代表当前页面的URL信息" class="headerlink" title="6.4、location（重要）：代表当前页面的URL信息"></a>6.4、location（重要）：代表当前页面的URL信息</h4><pre><code class="hljs javascript">host:<span class="hljs-string">"www.baidu.com"</span>href:<span class="hljs-string">"https://www.baidu.com/"</span>proticlo:<span class="hljs-string">"https"</span>reload:f reload()<span class="hljs-comment">// 刷新网页</span><span class="hljs-comment">// 设置新的地址</span>location.assign(<span class="hljs-string">'https://Guzhz.github.io/'</span>)</code></pre><h4 id="6-5、document（内容：DOM）：代表当前页面，HTML-DOM文档树"><a href="#6-5、document（内容：DOM）：代表当前页面，HTML-DOM文档树" class="headerlink" title="6.5、document（内容：DOM）：代表当前页面，HTML DOM文档树"></a>6.5、document（内容：DOM）：代表当前页面，HTML DOM文档树</h4><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.title<span class="hljs-string">"百度一下，你就知道"</span></code></pre><h4 id="6-6、获取具体的文档数节点"><a href="#6-6、获取具体的文档数节点" class="headerlink" title="6.6、获取具体的文档数节点"></a>6.6、获取具体的文档数节点</h4><pre><code class="hljs javascript">&lt;dl id="app"&gt;    &lt;dt&gt;Java&lt;/dt&gt;    &lt;dt&gt;JavaSE&lt;/dt&gt;    &lt;dt&gt;JavaScript&lt;/dt&gt;&lt;/dl&gt;&lt;script&gt;    var dl = document.getElementById('app');&lt;/script&gt;</code></pre><h4 id="6-7、获取：cookie"><a href="#6-7、获取：cookie" class="headerlink" title="6.7、获取：cookie"></a>6.7、获取：cookie</h4><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.cookie<span class="hljs-comment">//劫持cookie原理</span>&lt;script src=<span class="hljs-string">"aa.js"</span>&gt;<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>&lt;!--恶意人员：获取你的cookie上传到它的服务器--&gt;<span class="hljs-comment">//服务器端可以设置cookie：httpOnly</span></code></pre><h4 id="6-8、history（不建议使用）：代表浏览器的历史记录"><a href="#6-8、history（不建议使用）：代表浏览器的历史记录" class="headerlink" title="6.8、history（不建议使用）：代表浏览器的历史记录"></a>6.8、history（不建议使用）：代表浏览器的历史记录</h4><pre><code class="hljs javascript">histor.forward();<span class="hljs-comment">//前进</span>history.back();<span class="hljs-comment">//后退</span></code></pre><h3 id="七、操作DOM对象（重点）"><a href="#七、操作DOM对象（重点）" class="headerlink" title="七、操作DOM对象（重点）"></a>七、操作DOM对象（重点）</h3><h4 id="7-1、获得Dom节点"><a href="#7-1、获得Dom节点" class="headerlink" title="7.1、获得Dom节点"></a>7.1、获得Dom节点</h4><pre><code class="hljs javascript">&lt;div id="father"&gt;    &lt;h1&gt;标题一&lt;/h1&gt;    &lt;p id="p1"&gt;p1&lt;/p&gt;    &lt;p class="p2"&gt;p2&lt;/p&gt;&lt;/div&gt;&lt;script&gt;    var h1 = document.getElementsByTagName("h1");   //返回数组    var p1 = document.getElementById("p1")    var p2 = document.getElementsByClassName("p2"); //返回数组    var father = document.getElementById("father");    //获取父节点下所有的子节点    var childrens = father.children;    //father.firstChild;    //father.lastChild;&lt;/script&gt;</code></pre><h4 id="7-2、更新节点"><a href="#7-2、更新节点" class="headerlink" title="7.2、更新节点"></a>7.2、更新节点</h4><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">"id1"</span>&gt;<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>&lt;script&gt;    <span class="hljs-keyword">var</span> id1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'id1'</span>);    id1.innerText=<span class="hljs-string">'456'</span>;<span class="hljs-comment">//修改文本的值</span>    id1.innerHTML=<span class="hljs-string">'&lt;strong&gt;456&lt;/strong&gt;'</span>;<span class="hljs-comment">//可以解析HTML文本标签</span>    <span class="hljs-comment">//操作CSS</span>    id1.style.color = <span class="hljs-string">'yellow'</span>;<span class="hljs-comment">// 属性使用 字符串 包裹</span>    id1.style.fontSize = <span class="hljs-string">'20px'</span>;<span class="hljs-comment">// - 转 驼峰命名问题</span>    id1.style.padding = <span class="hljs-string">'2em'</span>&lt;<span class="hljs-regexp">/script&gt;</span></code></pre><h4 id="7-3、删除节点：先获取父节点，再通过父节点删除自己"><a href="#7-3、删除节点：先获取父节点，再通过父节点删除自己" class="headerlink" title="7.3、删除节点：先获取父节点，再通过父节点删除自己"></a>7.3、删除节点：先获取父节点，再通过父节点删除自己</h4><pre><code class="hljs javascript">&lt;div id="father"&gt;    &lt;h1&gt;标题一&lt;/h1&gt;    &lt;p id="p1"&gt;p1&lt;/p&gt;    &lt;p class="p2"&gt;p2&lt;/p&gt;&lt;/div&gt;&lt;script&gt;    var self = document.getElementById("p1")    var father = p1.parentElement;    father.removeChild(self);        //删除是一个动态的过程，先删除0，在删除2会找不到2节点，因为会重新排序    father.removeChild(father.children[0]);    father.removeChild(father.children[1])    father.removeChild(father.children[2])&lt;/script&gt;</code></pre><h4 id="7-4、插入节点"><a href="#7-4、插入节点" class="headerlink" title="7.4、插入节点"></a>7.4、插入节点</h4><p>我们获得了某个Dom节点，假设这个dom节点是空的，我们通过 innerHTML 就可以增加一个元素，但是如果这个DOM节点已经存在元素了，则会直接覆盖。追加：appendChild()<br><pre><code class="hljs javascript">&lt;p id="js"&gt;Javascript&lt;/p&gt;&lt;div id="list"&gt;    &lt;p id="se"&gt;JavaSE&lt;/p&gt;    &lt;p id="ee"&gt;JavaEE&lt;/p&gt;    &lt;p id="me"&gt;JavaME&lt;/p&gt;&lt;/div&gt;&lt;script&gt;    var js = document.getElementById('js');    var list = document.getElementById('list');    //追加到后面    list.appendChild(js);&lt;/script&gt;-----追加后效果为：&lt;div id="list"&gt;    &lt;p id="se"&gt;JavaSE&lt;/p&gt;    &lt;p id="ee"&gt;JavaEE&lt;/p&gt;    &lt;p id="me"&gt;JavaME&lt;/p&gt;    &lt;p id="js"&gt;Javascript&lt;/p&gt;&lt;/div&gt;</code></pre></p><p>创建一个新的标签，实现插入<br><pre><code class="hljs javascript">&lt;p id="js"&gt;Javascript&lt;/p&gt;&lt;div id="list"&gt;    &lt;p id="se"&gt;JavaSE&lt;/p&gt;    &lt;p id="ee"&gt;JavaEE&lt;/p&gt;    &lt;p id="me"&gt;JavaME&lt;/p&gt;&lt;/div&gt;&lt;script&gt;    let js = document.getElementById('js');//已经存在的节点    let list = document.getElementById('list');    //追加到后面    //list.appendChild(js);    //通过JS 创建一个新的节点    let newP = document.createElement('p');    newP.id = 'newP';    newP.innerText = 'Hello,Sam';    list.appendChild(newP);    //创建一个标签节点    let myScript = document.createElement('script');    myScript.setAttribute('type', 'text/javascript');    //给body标签创建样式1    let body = document.getElementsByTagName('body')[0];    body.setAttribute('style', 'background-color: yellow;');    //给body标签创建样式2    //let myStyle = document.createElement('style');//创建一个style标签    //myStyle.setAttribute('tyle', 'text/css');    //myStyle.innerHTML = 'body&#123;background-color: chartreuse;&#125;';//设置样式    //document.getElementsByTagName('head')[0].appendChild(myStyle);&lt;/script&gt;----------------------------------------------------------------追加后效果为：&lt;body style="background-color: yellow;"&gt;    &lt;p id="js"&gt;Javascript&lt;/p&gt;    &lt;div id="list"&gt;        &lt;p id="se"&gt;JavaSE&lt;/p&gt;        &lt;p id="ee"&gt;JavaEE&lt;/p&gt;        &lt;p id="me"&gt;JavaME&lt;/p&gt;        &lt;p id="newP"&gt;Hello,Sam&lt;/p&gt;        &lt;script type="text/javascript"&gt;&lt;/script&gt;    &lt;/div&gt;&lt;/body&gt;</code></pre></p><p>insertBefore()追加<br><pre><code class="hljs javascript">&lt;p id="js"&gt;Javascript&lt;/p&gt;&lt;div id="list"&gt;    &lt;p id="se"&gt;JavaSE&lt;/p&gt;    &lt;p id="ee"&gt;JavaEE&lt;/p&gt;    &lt;p id="me"&gt;JavaME&lt;/p&gt;&lt;/div&gt;&lt;script&gt;    let js = document.getElementById('js');//已经存在的节点    let list = document.getElementById('list');    let ee = document.getElementById('ee');    //要包含的节点. insertBefore(newNode,targetNode)    list.insertBefore(js, ee);&lt;/script&gt;----追加后效果为：&lt;body&gt;&lt;div id="list"&gt;    &lt;p id="se"&gt;JavaSE&lt;/p&gt;    &lt;p id="js"&gt;Javascript&lt;/p&gt;    &lt;p id="ee"&gt;JavaEE&lt;/p&gt;    &lt;p id="me"&gt;JavaME&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;</code></pre></p><h3 id="八、操作表单（验证）"><a href="#八、操作表单（验证）" class="headerlink" title="八、操作表单（验证）"></a>八、操作表单（验证）</h3><h4 id="8-1、表单：form-DOM树"><a href="#8-1、表单：form-DOM树" class="headerlink" title="8.1、表单：form DOM树"></a>8.1、表单：form DOM树</h4><pre><code class="hljs javascript">文本框：text下拉框：select单选框：radio多选框：checkbox隐藏域：hidden密码框：password…表单的目的：提交信息</code></pre><h4 id="8-2、获得要提交的信息"><a href="#8-2、获得要提交的信息" class="headerlink" title="8.2、获得要提交的信息"></a>8.2、获得要提交的信息</h4><pre><code class="hljs javascript">&lt;form action=<span class="hljs-string">"#"</span> method=<span class="hljs-string">"post"</span>&gt;    &lt;p&gt;        &lt;span&gt;用户名：&lt;/span&gt;&lt;input type="text" id="username"&gt;    &lt;/p&gt;    &lt;p&gt;        &lt;span&gt;性别：&lt;/span&gt;        &lt;input type="radio" name="sex" value="man" id="boy"&gt;男        &lt;input type="radio" name="sex" value="woman" id="girl"&gt;女    &lt;/p&gt;    &lt;script&gt;        var input_text = document.getElementById('username');        //得到输入框的值：input_text.value        //修改输入框的值：input_text.value = wudi                var boy_radio = document.getElementById('boy');        var girl_radio = document.getElementById('girl');        //对于单选框、多选框等等固定的值，        boy_radio.checked;//查看返回的结果，是否为true，如果为true，则被选中        girl_radio.checked = true;//赋值    &lt;/script&gt;&lt;/form&gt;//提交表单：MD5加密，表单优化</code></pre><h4 id="8-3、一般MD5加密"><a href="#8-3、一般MD5加密" class="headerlink" title="8.3、一般MD5加密"></a>8.3、一般MD5加密</h4><pre><code class="hljs javascript">&lt;script&gt;    function sub() &#123;        let username = document.getElementById('username');        let password = document.getElementById('password');        console.log(username);        console.log(password);        // MD5 算法    方案一：        password.value = md5(password.value);        console.log(password.value);    &#125;&lt;/script&gt;//隐藏密码框+MD5加密：&lt;!--    表单绑定提交事件    onsubmit = 绑定一个提交检查的函数，true，false    将这个结果返回给表单，使用 onsubmit 接收！    οnsubmit="return sub();"--&gt;&lt;form action="#" method="post" onsubmit="return sub();"&gt;    &lt;p&gt;        &lt;span&gt;用户名：&lt;/span&gt;&lt;input type="text" id="username" name="username"&gt;    &lt;/p&gt;    &lt;p&gt;        &lt;span&gt;密码：&lt;/span&gt;&lt;input type="password" id="password"&gt;        &lt;input type="hidden" id="md5-password" name="password"&gt;    &lt;/p&gt;    &lt;button type="submit" &gt;提交&lt;/button&gt;    &lt;script&gt;        function sub() &#123;            let username = document.getElementById('username');            let password = document.getElementById('password');            let md5password = document.getElementById('md5-password');            //MD5 算法：隐藏表单域提交表单密码            md5password.value = md5(password.value);            //可以校验判断表单内容，true：通过提交，false：阻止提交            return true;        &#125;    &lt;/script&gt;&lt;/form&gt;</code></pre><h3 id="九、jQuery"><a href="#九、jQuery" class="headerlink" title="九、jQuery"></a>九、jQuery</h3><blockquote><p>jQuery API：<a href="http://jquery.cuishifeng.cn/" target="_blank" rel="noopener">http://jquery.cuishifeng.cn/</a></p></blockquote><h4 id="9-1、初始jQuery（直接引用、使用js文件）"><a href="#9-1、初始jQuery（直接引用、使用js文件）" class="headerlink" title="9.1、初始jQuery（直接引用、使用js文件）"></a>9.1、初始jQuery（直接引用、使用js文件）</h4><pre><code class="hljs javascript">&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href="" id="test-jquery"&gt;点我&lt;/a&gt;&lt;script&gt;    $('#test-jquery').click(function () &#123;        alert('hello,jQuery')    &#125;)&lt;/script&gt;&lt;/body&gt;</code></pre><h4 id="9-2、选择器"><a href="#9-2、选择器" class="headerlink" title="9.2、选择器"></a>9.2、选择器</h4><pre><code class="hljs javascript">&lt;head&gt;    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span>&lt;body&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-comment">//原生js，选择器少，麻烦且不好记</span>    <span class="hljs-comment">//id、标签、类</span>    <span class="hljs-built_in">document</span>.getElementById();    <span class="hljs-built_in">document</span>.getElementsByTagName();    <span class="hljs-built_in">document</span>.getElementsByClassName();    <span class="hljs-comment">//jQuery 就是 css中的选择器</span>    $(<span class="hljs-string">'#id'</span>).click();<span class="hljs-comment">//id选择器</span>    $(<span class="hljs-string">'div'</span>).click();<span class="hljs-comment">//标签选择</span>    $(<span class="hljs-string">'.className'</span>).click();<span class="hljs-comment">//class选择器</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre><h4 id="9-3、操作DOM"><a href="#9-3、操作DOM" class="headerlink" title="9.3、操作DOM"></a>9.3、操作DOM</h4><pre><code class="hljs javascript"><span class="hljs-comment">/*  节点文本操作;    css操作;        元素的显示和隐藏：本质 display=none;    …等等更多查看API    */</span>&lt;head&gt;    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span>&lt;body&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"test-ul"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"js"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"js"</span>&gt;</span>Javascript<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"python"</span>&gt;</span>Python<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sh"</span>&gt;</span>show_hide<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>&lt;script&gt;    $(<span class="hljs-string">"#test-ul li[name='python']"</span>).text();<span class="hljs-comment">//获得值</span>    $(<span class="hljs-string">"#test-ul li[name='python']"</span>).text(<span class="hljs-string">'Python_new'</span>);    $(<span class="hljs-string">'#test-ul'</span>).html();<span class="hljs-comment">//获得值</span>    $(<span class="hljs-string">'test-ul'</span>).html(<span class="hljs-string">'&lt;strong&gt;html_new&lt;/strong&gt;'</span>);<span class="hljs-comment">//设置值</span>    $(<span class="hljs-string">'#js'</span>).css(<span class="hljs-string">'color'</span>,<span class="hljs-string">'red'</span>);<span class="hljs-comment">//设置样式</span>    $(<span class="hljs-string">'#sh'</span>).show();<span class="hljs-comment">//显示</span>    $(<span class="hljs-string">'#sh'</span>).hide();<span class="hljs-comment">//隐藏</span>        $(<span class="hljs-built_in">window</span>).width();    $(<span class="hljs-built_in">window</span>).height();    $(<span class="hljs-built_in">document</span>).width();    $(<span class="hljs-built_in">document</span>).height();<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>&lt;<span class="hljs-regexp">/body&gt;</span></code></pre><p align="right"><br>2020年06月09日 晚上<br>Guzhz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：&lt;a href=&quot;https://www.bilibili.com/video/BV1JJ41177di&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;教学视频&lt;/a&gt;、&lt;a href=&quot;https://blog.csdn.net/qq_362591
      
    
    </summary>
    
      <category term="学习类" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%B1%BB/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>CSS3的简单回顾</title>
    <link href="http://yoursite.com/2020/06/08/CSS3%E7%9A%84%E7%AE%80%E5%8D%95%E5%9B%9E%E9%A1%BE/"/>
    <id>http://yoursite.com/2020/06/08/CSS3的简单回顾/</id>
    <published>2020-06-08T08:49:04.000Z</published>
    <updated>2020-08-04T06:56:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>前言：<a href="https://www.bilibili.com/video/BV1YJ411a7dy" target="_blank" rel="noopener">教学视频参考</a></p><h3 id="1、CSS3的三种导入方式"><a href="#1、CSS3的三种导入方式" class="headerlink" title="1、CSS3的三种导入方式"></a>1、CSS3的三种导入方式</h3><blockquote><p>优先级：就近原则</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-comment">&lt;!--内部样式--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="undefined">        h1 &#123;            color: green;        &#125;    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>    <span class="hljs-comment">&lt;!--外部样式--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"css/style.css"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-comment">&lt;!--行内样式：在标签元素中，编写一个style属性，编写样式即可--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: red"</span>&gt;</span>这是标签<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><p>拓展：CSS2.1导入式 </p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="undefined">    @import url("css/style.css");</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><h3 id="2、选择器"><a href="#2、选择器" class="headerlink" title="2、选择器"></a>2、选择器</h3><h4 id="2-1、基本选择器"><a href="#2-1、基本选择器" class="headerlink" title="2.1、基本选择器"></a>2.1、基本选择器</h4><pre><code class="hljs html">标签选择器：选择一类标签 标签.&#123; &#125;class选择器：.类名&#123; &#125;id选择器：#.ID名&#123; &#125;</code></pre><h4 id="2-2、层次选择器"><a href="#2-2、层次选择器" class="headerlink" title="2.2、层次选择器"></a>2.2、层次选择器</h4><blockquote><p>后代选择器，在某个元素的后面</p></blockquote><pre><code class="hljs css">&lt;style&gt;    body p &#123;        background: red;    &#125;&lt;/style&gt;</code></pre><blockquote><p>子选择器，一代</p></blockquote><pre><code class="hljs css">&lt;style&gt;    body&gt;p &#123;        background: orange;    &#125;&lt;/style&gt;</code></pre><blockquote><p>相邻兄弟选择器：只有一个，相邻（向下）</p></blockquote><pre><code class="hljs css">&lt;style&gt;    .active+p &#123;        background: red    &#125;&lt;/style&gt;&lt;body&gt;    &lt;p class="active"&gt;p1&lt;p&gt;    &lt;p&gt;p2&lt;/p&gt;&lt;/body&gt;</code></pre><blockquote><p>通用兄弟选择器，当前选中元素的向下的所有兄弟元素</p></blockquote><pre><code class="hljs css">&lt;style&gt;    .active~p &#123;        background: red;    &#125;&lt;/style&gt;&lt;body&gt;    &lt;p class="active"&gt;p1&lt;p&gt;    &lt;p&gt;p2&lt;/p&gt;&lt;/body&gt;</code></pre><h4 id="2-3、结构伪类选择器"><a href="#2-3、结构伪类选择器" class="headerlink" title="2.3、结构伪类选择器"></a>2.3、结构伪类选择器</h4><blockquote><p>ul的第一个子元素</p></blockquote><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first-child</span> &#123;    <span class="hljs-attribute">background</span>: aqua;&#125;</code></pre><blockquote><p>ul的最后一个子元素</p></blockquote><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span> &#123;    <span class="hljs-attribute">background</span>: blue;&#125;</code></pre><blockquote><p>选中pfather：定位到父元素，选择当前的第一个子元素p，子元素的第一位必须为p才生效</p></blockquote><pre><code class="hljs css"><span class="hljs-selector-tag">pfather</span><span class="hljs-selector-pseudo">:nth-child(1)</span> &#123;    <span class="hljs-attribute">background</span>: orange;&#125;</code></pre><blockquote><p>选中父元素下的，第2个p元素</p></blockquote><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-of-type(2)</span> &#123;    <span class="hljs-attribute">background</span>: red;&#125;</code></pre><h4 id="2-4、属性选择器（常用）"><a href="#2-4、属性选择器（常用）" class="headerlink" title="2.4、属性选择器（常用）"></a>2.4、属性选择器（常用）</h4><blockquote><p>class + id 结合 </p></blockquote><pre><code class="hljs css">&lt;style&gt;    .demo a &#123;        display: block;        height: 50px;        width: 50px;        float: left;        border-radius: 10px;        background: blue;        text-align: center;        color: beige;        text-decoration: none;        margin-right: 5px;        font: bold 20px/50px Arial;    &#125;&lt;/style&gt;</code></pre><blockquote><p>标签名[属性名=属性值]（正则: =、*=、^=、$=）</p></blockquote><pre><code class="hljs css">&lt;style&gt;/*存在id的a标签*/a[id] &#123;    background: red;&#125;    /*    =表示绝对等于    *=表示包含...    ^=表示以...开头    $=表示以...结尾    *//*id=first的a标签*/a[id=first] &#123;    background: aqua;&#125;/*class属性值绝对等于"links item2 first2"*/a[class="links item2 first2"] &#123;    background: orange;&#125;/*class属性值绝对包涵"links"*/a[class *="links"] &#123;    background: black;&#125;/*选中href中以http开头的元素*/a[href^="http"] &#123;    background: orange;&#125;&lt;/style&gt;</code></pre><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"demo"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://www.baidu.com"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"links item first"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"first"</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/adad/faf"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"links item2 first2"</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"qwe123"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"links item3 first3"</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"eweqe"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"links item4 first4"</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"rrrrr"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"links item5 first5"</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"ttt"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"links item6 first6"</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"yyy"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"links item7 first7"</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre><h3 id="3、美化网页元素"><a href="#3、美化网页元素" class="headerlink" title="3、美化网页元素"></a>3、美化网页元素</h3><h4 id="3-1、字体"><a href="#3-1、字体" class="headerlink" title="3.1、字体"></a>3.1、字体</h4><blockquote><p>建立在标签上的处理，所以建议用span包裹</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="undefined">        #title1 &#123;            font-size: 50px;            font-weight：blod;            font-family: 楷体;            /*常用写法：*/            font: oblique bloder 12px "楷体"        &#125;    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"title1"</span>&gt;</span>JAVA<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><h4 id="3-2、文本"><a href="#3-2、文本" class="headerlink" title="3.2、文本"></a>3.2、文本</h4><blockquote><p>下划线</p></blockquote><pre><code class="hljs css"><span class="hljs-selector-tag">text-decoration</span><span class="hljs-selector-pseudo">:underline</span><span class="hljs-comment">/*下划线*/</span><span class="hljs-selector-tag">text-decoration</span><span class="hljs-selector-pseudo">:line-through</span><span class="hljs-comment">/*中划线*/</span><span class="hljs-selector-tag">text-decoration</span><span class="hljs-selector-pseudo">:overline</span><span class="hljs-comment">/*上划线*/</span><span class="hljs-selector-tag">text-decoration</span><span class="hljs-selector-pseudo">:none</span><span class="hljs-comment">/*超链接去下划线*/</span></code></pre><blockquote><p>图片、文字水平居中</p></blockquote><pre><code class="hljs css"><span class="hljs-selector-tag">img</span>,<span class="hljs-selector-tag">span</span> &#123;    <span class="hljs-attribute">vertical-align</span>: middle&#125;</code></pre><h4 id="3-3、文本，阴影和超链接伪类"><a href="#3-3、文本，阴影和超链接伪类" class="headerlink" title="3.3、文本，阴影和超链接伪类"></a>3.3、文本，阴影和超链接伪类</h4><blockquote><p>超链接伪类</p></blockquote><pre><code class="hljs css">&lt;style&gt;/*超链接有默认的颜色*/a &#123;    text-decoration: none;    color: #000000;&#125;a:hover &#123;    /*鼠标悬浮的状态*/    color: orange;&#125;a:active &#123;    /*鼠标按住未释放的状态*/    color: green&#125;a:visited &#123;    /*点击之后的状态*/    color: red&#125;&lt;/style&gt;</code></pre><blockquote><p>阴影</p></blockquote><pre><code class="hljs css">            左 下 半径<span class="hljs-selector-tag">text-shadow</span><span class="hljs-selector-pseudo">:5px</span> 5<span class="hljs-selector-tag">px</span> 5<span class="hljs-selector-tag">px</span> 颜色</code></pre><h4 id="3-4、利用列表ul-li小设计：a进来变样式"><a href="#3-4、利用列表ul-li小设计：a进来变样式" class="headerlink" title="3.4、利用列表ul li小设计：a进来变样式"></a>3.4、利用列表ul li小设计：a进来变样式</h4><pre><code class="hljs css">ul li &#123;    height: 30px;    list-style: none;    /*none:去掉原点、circle:空心圆、decimal:数字、square:正方形*/    text-indent: 1em;    /*缩进*/&#125;a&#123;    text-decoration: none;    /*首先去掉下划线*/    font-size: 14px;    color: #000;&#125;a:hover &#123;    color: orange;    text-decoration: underline  /*进来再有下划线*/     &#125;/*放在div中，作为导航栏*/&lt;div id="nav"&gt;&lt;/div&gt;#nav &#123;    width: 300px;&#125;</code></pre><h4 id="3-5、背景样式、图片"><a href="#3-5、背景样式、图片" class="headerlink" title="3.5、背景样式、图片"></a>3.5、背景样式、图片</h4><pre><code class="hljs css"><span class="hljs-selector-tag">background</span><span class="hljs-selector-pseudo">:red</span><span class="hljs-selector-tag">---------------------------------------------</span><span class="hljs-selector-tag">background-image</span><span class="hljs-selector-pseudo">:url("")</span>;   <span class="hljs-comment">/*默认是全部平铺的*/</span><span class="hljs-selector-tag">background-repeat</span><span class="hljs-selector-pseudo">:repeat-x</span>  <span class="hljs-comment">/*水平平铺*/</span><span class="hljs-selector-tag">background-repeat</span><span class="hljs-selector-pseudo">:repeat-y</span>  <span class="hljs-comment">/*垂直平铺*/</span><span class="hljs-selector-tag">background-repeat</span><span class="hljs-selector-pseudo">:no-repeat</span> <span class="hljs-comment">/*不平铺*/</span><span class="hljs-selector-tag">---------------------------------------------</span><span class="hljs-selector-tag">background</span><span class="hljs-selector-pseudo">:red</span> <span class="hljs-selector-tag">url</span>("<span class="hljs-selector-tag">url</span>") 270<span class="hljs-selector-tag">px</span> 10<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">no-repeat</span> <span class="hljs-comment">/*综合使用*/</span><span class="hljs-selector-tag">background-position</span><span class="hljs-selector-pseudo">:center</span>                      <span class="hljs-comment">/*定位：背景位置*/</span></code></pre><blockquote><p>拓展：渐变<br>网址：<a href="https://www.grablent.com" target="_blank" rel="noopener">https://www.grablent.com</a><br>径向渐变、圆形渐变</p></blockquote><h3 id="4、盒子模型"><a href="#4、盒子模型" class="headerlink" title="4、盒子模型"></a>4、盒子模型</h3><h4 id="4-1、什么是盒子模型"><a href="#4-1、什么是盒子模型" class="headerlink" title="4.1、什么是盒子模型"></a>4.1、什么是盒子模型</h4><pre><code class="hljs css"><span class="hljs-selector-tag">margin</span>：外边距<span class="hljs-selector-tag">padding</span>：内边距<span class="hljs-selector-tag">border</span>：边框</code></pre><h4 id="4-2、边框"><a href="#4-2、边框" class="headerlink" title="4.2、边框"></a>4.2、边框</h4><pre><code class="hljs css"><span class="hljs-selector-tag">border</span>：2<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-tag">red</span></code></pre><h3 id="4-3、外边距的妙用：居中"><a href="#4-3、外边距的妙用：居中" class="headerlink" title="4.3、外边距的妙用：居中"></a>4.3、外边距的妙用：居中</h3><pre><code class="hljs css"><span class="hljs-selector-tag">margin</span><span class="hljs-selector-pseudo">:0</span> 0 0 0          <span class="hljs-comment">/*表示上、右、下、左*/</span><span class="hljs-selector-tag">margin</span><span class="hljs-selector-pseudo">:0</span> <span class="hljs-selector-tag">auto</span>           <span class="hljs-comment">/*居中、auto表示左右自动*/</span><span class="hljs-selector-tag">margin</span><span class="hljs-selector-pseudo">:4px</span>              <span class="hljs-comment">/*表示上、右、下、左都为4px*/</span><span class="hljs-selector-tag">margin</span><span class="hljs-selector-pseudo">:10px</span> 20<span class="hljs-selector-tag">px</span> 30<span class="hljs-selector-tag">px</span>   <span class="hljs-comment">/*表示上为10px，左右为20px，下为30px*/</span></code></pre><blockquote><p>开发中的常用操作<br><pre><code class="hljs css"><span class="hljs-comment">/* 盒子的计算方式：margin+border+padding+内容的大小 */</span><span class="hljs-comment">/* body总有一个默认的外边距，开发中会先把内外边距置为0 */</span><span class="hljs-selector-tag">margin</span><span class="hljs-selector-pseudo">:0</span>;<span class="hljs-selector-tag">padding</span><span class="hljs-selector-pseudo">:0</span>;<span class="hljs-selector-tag">text-decoration</span><span class="hljs-selector-pseudo">:none</span>;</code></pre></p></blockquote><h4 id="4-4、圆角边框：border-radius"><a href="#4-4、圆角边框：border-radius" class="headerlink" title="4.4、圆角边框：border-radius"></a>4.4、圆角边框：border-radius</h4><pre><code class="hljs css">（顺时针），左上开始圆圈：圆角=半径border-radius: 有四个参数</code></pre><h3 id="5、浮动"><a href="#5、浮动" class="headerlink" title="5、浮动"></a>5、浮动</h3><h4 id="5-1、标准文档流"><a href="#5-1、标准文档流" class="headerlink" title="5.1、标准文档流"></a>5.1、标准文档流</h4><blockquote><p>包涵关系：块级元素包裹行级元素<br>块级元素：独占一行 h1~h6 、p、div、 列表…<br>行内元素：不独占一行 span、a、img、strong</p></blockquote><h4 id="5-2、display（重要）"><a href="#5-2、display（重要）" class="headerlink" title="5.2、display（重要）"></a>5.2、display（重要）</h4><blockquote><p>block：块元素<br>inline：行内元素<br>inline-block：行内块元素<br>none：消失<br>注：这也是一种实现行内元素排列的方式，但是我们很多情况用float</p></blockquote><h4 id="5-3、float：浮动"><a href="#5-3、float：浮动" class="headerlink" title="5.3、float：浮动"></a>5.3、float：浮动</h4><blockquote><p>参考：<a href="https://blog.csdn.net/qq_36595013/article/details/81810219" target="_blank" rel="noopener">详细参考</a><br><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;    <span class="hljs-attribute">float</span>:left/right&#125;<span class="hljs-comment">/*浮动后，不再属于标准中的元素，下面的元素会上移、但本身还会于上面的元素对其*/</span><span class="hljs-comment">/*假如某个div元素A是浮动的，如果A元素上一个元素也是浮动的，那么A元素会跟随在上一个元素的后边(如果一行放不下这两个元素，那么A元素会被挤到下一行)；如果A元素上一个元素是标准流中的元素，那么A的相对垂直位置不会改变，也就是说A的顶部总是和上一个元素的底部对齐。*/</span></code></pre></p></blockquote><blockquote><p>清除浮动 clear<br><pre><code class="hljs css"><span class="hljs-comment">/*  right：右侧不允许有浮动元素left： 左侧不允许有浮动元素both： 两侧不允许有浮动元素none： 两侧允许有浮动元素   对于CSS的清除浮动(clear)，一定要牢记：这个规则只能影响使用清除的元素本身，不能影响其他元素。*/</span></code></pre></p></blockquote><h4 id="5-4、解决浮动后父级边框塌陷问题"><a href="#5-4、解决浮动后父级边框塌陷问题" class="headerlink" title="5.4、解决浮动后父级边框塌陷问题"></a>5.4、解决浮动后父级边框塌陷问题</h4><pre><code class="hljs css">/* 方案一：增加父级元素的高度；*//* 方案二：增加一个空的div标签，清除本标签的浮动来实现补回原标签 */&lt;style&gt;    .clear&#123;        clear:both;        margin:0;        padding:0;    &#125;&lt;/style&gt;&lt;div class = "clear"&gt;&lt;/div&gt;/* 方案三：在父级元素中增加一个滚动条然后隐藏起来：overflow：hidden */overflow:hidden /*隐藏*/overflow：scoll /*滚动*//* 方案四：父类添加一个伪类:after */#father:after&#123;content:'';display:block;clear:both;&#125;浮动元素增加空div----&gt; 简单、代码尽量避免空div设置父元素的高度-----&gt; 简单，元素假设没有了固定的高度，就会超出overflow----&gt; 简单，下拉的一些场景避免使用父类添加一个伪类:after（推荐）----&gt; 写法稍微复杂，但是没有副作用，推荐使用</code></pre><h4 id="5-5、display与float对比"><a href="#5-5、display与float对比" class="headerlink" title="5.5、display与float对比"></a>5.5、display与float对比</h4><blockquote><p>display：方向不可以控制<br>float：浮动起来的话会脱离标准文档流，所以要解决父级边框塌陷的问题。</p></blockquote><h3 id="6、定位"><a href="#6、定位" class="headerlink" title="6、定位"></a>6、定位</h3><h4 id="6-1、相对定位（relative）"><a href="#6-1、相对定位（relative）" class="headerlink" title="6.1、相对定位（relative）"></a>6.1、相对定位（relative）</h4><blockquote><p>相对于自身的位置，它仍然在标准文档流中<br><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span><span class="hljs-selector-class">.pos_left</span>&#123;    <span class="hljs-attribute">location</span>:relative    top:-<span class="hljs-number">20px</span>;    <span class="hljs-attribute">left</span>:<span class="hljs-number">20px</span>;    <span class="hljs-attribute">bottom</span>:-<span class="hljs-number">10px</span>;    <span class="hljs-attribute">right</span>:<span class="hljs-number">20px</span>;&#125;</code></pre></p></blockquote><h4 id="6-2、绝对定位："><a href="#6-2、绝对定位：" class="headerlink" title="6.2、绝对定位："></a>6.2、绝对定位：</h4><blockquote></blockquote><pre><code class="hljs css"><span class="hljs-comment">/* 总结：相对一父级或浏览器的位置，进行指定的偏移，   绝对定位的话，它不在标准文档流中，原来的位置不会被保留 */</span><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-of-type(1)</span>&#123;<span class="hljs-comment">/*绝对定位：没有相对的父级元素，所以相对于浏览器*/</span>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;    <span class="hljs-attribute">background</span>:red;    <span class="hljs-attribute">position</span>: absolute;    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="6-3、固定定位"><a href="#6-3、固定定位" class="headerlink" title="6.3、固定定位"></a>6.3、固定定位</h4><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-of-type(2)</span>&#123;    <span class="hljs-comment">/*始终在右下角*/</span>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;    <span class="hljs-attribute">background</span>: yellow;    <span class="hljs-attribute">position</span>: fixed;    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="6-4、图层"><a href="#6-4、图层" class="headerlink" title="6.4、图层"></a>6.4、图层</h4><blockquote><p>z-index：默认是0，最高无限~999(最顶层)<br><pre><code class="hljs css"><span class="hljs-selector-class">.tipText</span>&#123;    <span class="hljs-attribute">color</span>: white;    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">999</span>;&#125;</code></pre></p></blockquote><h4 id="6-5、透明度"><a href="#6-5、透明度" class="headerlink" title="6.5、透明度"></a>6.5、透明度</h4><pre><code class="hljs css"><span class="hljs-selector-class">.tipBg</span>&#123;    <span class="hljs-attribute">background</span>: orange;    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>;   <span class="hljs-comment">/*背景透明度*/</span>    <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">alpha</span>(opacity=50);  <span class="hljs-comment">/*原理同上，这里解决ie的兼容性问题*/</span>&#125;</code></pre><p align="right"><br>2020年06月06日 下午<br>Guzhz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：&lt;a href=&quot;https://www.bilibili.com/video/BV1YJ411a7dy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;教学视频参考&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、CSS3的三种导入方式&quot;&gt;&lt;a href=&quot;#1
      
    
    </summary>
    
      <category term="学习类" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%B1%BB/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>HTML5的简单回顾</title>
    <link href="http://yoursite.com/2020/06/06/HTML5%E7%9A%84%E7%AE%80%E5%8D%95%E5%9B%9E%E9%A1%BE/"/>
    <id>http://yoursite.com/2020/06/06/HTML5的简单回顾/</id>
    <published>2020-06-06T08:50:30.000Z</published>
    <updated>2020-08-04T13:50:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>前言：教学视频参考：<a href="https://www.bilibili.com/video/BV1x4411V75C" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1x4411V75C</a></p><h3 id="网页基本标签"><a href="#网页基本标签" class="headerlink" title="网页基本标签"></a>网页基本标签</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--meta描述性标签，用来描述我们网站的一些信息--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"keywords"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"跟狂神学Java"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"可以学习java"</span>&gt;</span></code></pre><pre><code class="hljs xml">粗体：<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>斜体：<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span></code></pre><pre><code class="hljs xml">  空         &amp;nbsp;大于号       &amp;gt;小于号       &amp;lt;版权符号     &amp;copy;</code></pre><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--图像标签： alt:图片描述--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../resources/image/1.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"我的图片"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"悬停文字"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"1366"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"768"</span>&gt;</span></code></pre><pre><code class="hljs xml">target="_blank" ：在新标签中打开target="_self"  ：在自己的网页中打开target="#MarkName"：即跳转到锚点  <span class="hljs-comment">&lt;!--锚链接：指定跳转到页面的某个位置，需要定义name属性作为标记--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"top"</span>&gt;</span>顶部<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-comment">&lt;!--跳转到标记--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#top"</span>&gt;</span>回到顶部<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-comment">&lt;!--邮件连接：mailto--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"mailto:936681921@qq.com"</span>&gt;</span>点击联系我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><h3 id="行内元素和块元素"><a href="#行内元素和块元素" class="headerlink" title="行内元素和块元素"></a>行内元素和块元素</h3><pre><code class="hljs xml">块元素：无论内容有多少，元素自己独占一行行内元素：内容撑开宽度，左右都是行内元素的可以排在一行</code></pre><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><pre><code class="hljs xml">有序列表<span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>语文<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>       1.语文    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>数学<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>       2.数学    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>英语<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>       3.英语<span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span>无序列表<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>语文<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>       ● 语文    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>数学<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>       ● 数学    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>英语<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>       ● 英语<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>自定义列表<span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>科目<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span>   科目    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>语文<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>        语文    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>数学<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>        数学    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>英语<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>        英语<span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span></code></pre><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span> ...<span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>表格标签。<span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>行标签，代表一行。<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>列标签，代表一列。border=""表示表格线条宽度。colspan="3"表示这一单元跨几列。rowspan="2"表示这一单元跨几行。</code></pre><h3 id="视频和音频"><a href="#视频和音频" class="headerlink" title="视频和音频"></a>视频和音频</h3><pre><code class="hljs xml">controls：控制调autoplay：自动播放<span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../resources/video/2.mp4"</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../resources/audio/3.mp3"</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span></code></pre><h3 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>网页头部<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>网页主体<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>网页脚步<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>导航<span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></code></pre><h3 id="iframe内联框架"><a href="#iframe内联框架" class="headerlink" title="iframe内联框架"></a>iframe内联框架</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-comment">&lt;!--单独使用--&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"www.baidu.com"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"go"</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"1000"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"800"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span>    <span class="hljs-comment">&lt;!--配合a标签使用--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">""</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"go"</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"1000"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"800"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.baidu.com"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"go"</span> &gt;</span>点击打开百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">""</span> <span class="hljs-attr">method</span>=<span class="hljs-string">""</span>&gt;</span>        action:填写表单内数据提交给的地址。        是提交表单数据的方式，get可以在url看见提交的内容，post的保密性稍高。        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">""</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>    type="text"     默认文本框。    type="password" 密码框，输入不显示密码。    type="search"   搜索框。    type="submit"   提交按钮，网页中点击提交。    type="reset"    重置按钮，网页中点击后表单重置。    hidden:隐藏。    单选框：    type="radio"    name="":填入组名，网页内在同一组内的单选框只能选中一个，不在同一组则    相当于多选框。    value=""：提交时显示的名字。    checked:默认选择本项选中。    多选框：    type="checkbox"    name="":填入组名。    value=""：提交时显示的名字。    checked:默认选择本项选中。    普通按钮：    type="button":    name="":提交时的按钮名。    value=""：在网页显示在按钮中的字符。    下拉列表框：    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">""</span>&gt;</span>:name中填写列表名。        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">""</span>&gt;</span>:value填写单元名        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">""</span>&gt;</span>:value填写单元名    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    selected:默认选择本项选中。    文本域：    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">""</span><span class="hljs-attr">cols</span>=<span class="hljs-string">"30"</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"10"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">""</span>&gt;</span>    name=""       :文本域名。文本域网页。    cols="30"     :列数。    rows="10"     :行数。    placeholder="":默认显示内容，所有文本框可用。    文件域：    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"files"</span>&gt;</span>    滑块：    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"range"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"range"</span> <span class="hljs-attr">min</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">max</span>=<span class="hljs-string">"100"</span> <span class="hljs-attr">step</span>=<span class="hljs-string">"5"</span>&gt;</span>滑块网  页    type="range"    min：表示滑块底部的数值。    max：表示滑块顶端的数值。    step：表示每次拖动滑块改变的数值。    数字验证：    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"number"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"number"</span> <span class="hljs-attr">min</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">max</span>=<span class="hljs-string">"100"</span> <span class="hljs-attr">step</span>=<span class="hljs-string">"1"</span>&gt;</span>数字  验证网页    min：表示最低数字。    max：表示最大数字。    step：表示每次增加时改变的数值。    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">""</span>&gt;</span>此处可任意填写<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>    给其他标签添加id=""属性，然后将id中的字符填入for="",点击其产生的字符    可指向对应id的文本框。    初级验证    type="email"    邮箱输入框，带有简单的邮箱格式验证。    type="url"      url连接输入框，带有简单的格式验证。    type="number"   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"number"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"num"</span> <span class="hljs-attr">max</span>=<span class="hljs-string">"100"</span> <span class="hljs-attr">min</span>=<span class="hljs-string">"1"</span>   <span class="hljs-attr">step</span>=<span class="hljs-string">"1"</span>&gt;</span>    pattern="正则表达式验证，使用正则表达式验证文本框填写是否正确"<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><p align="right"><br>2020年06月06日 下午<br>Guzhz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：教学视频参考：&lt;a href=&quot;https://www.bilibili.com/video/BV1x4411V75C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/BV1x4411V75
      
    
    </summary>
    
      <category term="学习类" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%B1%BB/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Github&amp;Gitee使用教程</title>
    <link href="http://yoursite.com/2020/05/13/Github&amp;Gitee%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/05/13/Github&amp;Gitee使用教程/</id>
    <published>2020-05-13T08:49:04.000Z</published>
    <updated>2020-08-04T06:56:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>前言：注册GitHub有一段时间了，之前有按照教程操作过，不过后来一段时间不用又不熟练了。以至于后期突然使用时出现一些错误，导致本地文件一直提交不了。今天又熟悉了一次，这里做个笔记，以至于后面在忘记可以回顾一下。</p><h3 id="一、操作前准备"><a href="#一、操作前准备" class="headerlink" title="一、操作前准备"></a>一、操作前准备</h3><ul><li><a href="https://www.jianshu.com/p/8282eced3bf2" target="_blank" rel="noopener">Github环境搭建</a></li><li><a href="https://segmentfault.com/a/1190000020127413" target="_blank" rel="noopener">配置共存Github/Gitee环境</a><br>共存Github/Gitee环境，需要切换全局的 user.name 和 user.email<blockquote><p>git config - -global - -list（先查看变量）<br>git config - -global user.name “账户名” （再修改变量）<br>git config - -global user.email “邮箱”</p></blockquote></li></ul><h3 id="二、Github-Gitee部署详细步骤"><a href="#二、Github-Gitee部署详细步骤" class="headerlink" title="二、Github/Gitee部署详细步骤"></a>二、Github/Gitee部署详细步骤</h3><h5 id="【无仓库：新建远程仓库、初始化本地仓库、两者建立连接、添加并部署】"><a href="#【无仓库：新建远程仓库、初始化本地仓库、两者建立连接、添加并部署】" class="headerlink" title="【无仓库：新建远程仓库、初始化本地仓库、两者建立连接、添加并部署】"></a>【无仓库：新建远程仓库、初始化本地仓库、两者建立连接、添加并部署】</h5><blockquote><p>创建仓库，勾选上RENAME<br> name -&gt; description -&gt; public -&gt; Init -&gt; create<br> “+” -&gt; 介绍 -&gt; 使用Readme文件初始化这个仓库 -&gt; 创建</p></blockquote><blockquote><p>git init （初始化本地仓库）<br>  git add .（有空格）<br>  git status（可查看代码的状态）<br>  git commit -m “说明”（把文件提交的本地仓库）</p></blockquote><blockquote><p>git remote add origin [url]（连接远程仓库，这个为新建的仓库地址）</p></blockquote><blockquote><p>git pull - -rebase origin master （本地仓库为空，远程仓库不为空，需要pull合并同步，这里–为“双杠”）</p></blockquote><blockquote><ul><li>git push origin master（部署）</li></ul></blockquote><h5 id="【有本地仓库-克隆操作（已建立连接）：在仓库文件夹下进行以下操作】"><a href="#【有本地仓库-克隆操作（已建立连接）：在仓库文件夹下进行以下操作】" class="headerlink" title="【有本地仓库/克隆操作（已建立连接）：在仓库文件夹下进行以下操作】"></a>【有本地仓库/克隆操作（已建立连接）：在仓库文件夹下进行以下操作】</h5><blockquote><p>改动文件后 ↓<br>  git add .<br>  git status<br>  git commit -m “说明”<br>  git push origin master</p></blockquote><h3 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h3><ol><li>git status</li><li>git add .</li><li>git commit -m “说明”</li><li>git push origin master</li><li>git clone [url]</li><li>git pull （拉去远程库更新本地库）</li></ol><p align="right"><br>2020年4月11日 下午<br>Guzhz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：注册GitHub有一段时间了，之前有按照教程操作过，不过后来一段时间不用又不熟练了。以至于后期突然使用时出现一些错误，导致本地文件一直提交不了。今天又熟悉了一次，这里做个笔记，以至于后面在忘记可以回顾一下。&lt;/p&gt;
&lt;h3 id=&quot;一、操作前准备&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="技术类" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
    
      <category term="备份" scheme="http://yoursite.com/tags/%E5%A4%87%E4%BB%BD/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的使用</title>
    <link href="http://yoursite.com/2020/05/09/Hexo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/05/09/Hexo的使用/</id>
    <published>2020-05-08T16:31:04.000Z</published>
    <updated>2020-05-08T16:31:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>前言：Hexo是一个主题框架，用于搭建博客，这里做个笔记，以至于后面忘记了可以回顾一下如何操作。</p><h3 id="一、详细搭建参考"><a href="#一、详细搭建参考" class="headerlink" title="一、详细搭建参考"></a>一、详细搭建参考</h3><blockquote><p><a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa" target="_blank" rel="noopener">搭建参考一</a><br><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">搭建参考二</a><br><a href="https://www.jianshu.com/p/36d67d7d6985" target="_blank" rel="noopener">markdown语法参考</a><br><a href="https://www.jianshu.com/p/bcdbe7347c8d" target="_blank" rel="noopener">主题推荐</a></p></blockquote><h3 id="二、域名的绑定与解绑"><a href="#二、域名的绑定与解绑" class="headerlink" title="二、域名的绑定与解绑"></a>二、域名的绑定与解绑</h3><p>绑定：<a href="https://my.freenom.com/clientarea.php" target="_blank" rel="noopener">免费一年的域名网</a></p><blockquote><p>1、在myblog\source（source目录下的文件为源文件)目录下新建CNAME(无后缀)<br>2、把域名写进去即可，www加不加都行。</p></blockquote><p>解绑：</p><blockquote><p>1、只生效一次的解绑方法：直接删除github项目上的CNAME文件，但是更新后重新部署后又会生成<br>2、永久解绑方法：删除主题source目录下的CNAME，删除/清空source目录下的CNAME文件后重新部署，setting里删除手动指定的域名。</p></blockquote><h3 id="三、我的博客详细分类"><a href="#三、我的博客详细分类" class="headerlink" title="三、我的博客详细分类"></a>三、我的博客详细分类</h3><p>操作步骤：</p><pre><code>1. 在项目的根目录下（myblog)2. 右键打开：Git Bash3. 新文章  ：myblog\source\_posts 下编写md文件</code></pre><blockquote><font color="red">hexo g  (生成)<br>    hexo s   (本地浏览)<br>    hexo d   (部署到github)</font></blockquote><p>博客一：VScode、有道云笔记</p><pre><code>myblog      → 主目录myblog_bak  → 主目录备份Picture-bed → 图床仓库</code></pre><p>博客二：有道云笔记编写，VScode编辑</p><pre><code>虚拟机桌面的“blog”文件已同步到坚果云test = &gt; 测试仓库blog\source\_posts              =&gt; 源文件blog\themes\diaspora\source\img =&gt; 图库(图床)，不需要额外的图床source -&gt; MD File =&gt; md文件</code></pre><p align="right"><br>2020年4月11日 凌晨<br>Guzhz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：Hexo是一个主题框架，用于搭建博客，这里做个笔记，以至于后面忘记了可以回顾一下如何操作。&lt;/p&gt;
&lt;h3 id=&quot;一、详细搭建参考&quot;&gt;&lt;a href=&quot;#一、详细搭建参考&quot; class=&quot;headerlink&quot; title=&quot;一、详细搭建参考&quot;&gt;&lt;/a&gt;一、详细搭建
      
    
    </summary>
    
      <category term="技术类" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
    
      <category term="备份" scheme="http://yoursite.com/tags/%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>新玩意儿</title>
    <link href="http://yoursite.com/2020/03/26/%E6%96%B0%E7%8E%A9%E6%84%8F%E5%84%BF/"/>
    <id>http://yoursite.com/2020/03/26/新玩意儿/</id>
    <published>2020-03-26T13:50:30.000Z</published>
    <updated>2020-03-26T13:50:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>耗时三天，<br>搭建了人生的，<br>第一个网站，<br>感觉还不错。(#^.^#)</p><h4 id="Mood"><a href="#Mood" class="headerlink" title="Mood"></a>Mood</h4><pre><code>从郁闷到舒畅。</code></pre><h4 id="Weather"><a href="#Weather" class="headerlink" title="Weather"></a>Weather</h4><pre><code>阴天。</code></pre><h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><pre><code>2019年3月26日 晚上</code></pre><p><strong><center>完结</center></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;耗时三天，&lt;br&gt;搭建了人生的，&lt;br&gt;第一个网站，&lt;br&gt;感觉还不错。(#^.^#)&lt;/p&gt;
&lt;h4 id=&quot;Mood&quot;&gt;&lt;a href=&quot;#Mood&quot; class=&quot;headerlink&quot; title=&quot;Mood&quot;&gt;&lt;/a&gt;Mood&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;从郁闷
      
    
    </summary>
    
      <category term="生活类" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E7%B1%BB/"/>
    
    
      <category term="心情" scheme="http://yoursite.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>一年了</title>
    <link href="http://yoursite.com/2020/02/25/%E4%B8%80%E5%B9%B4%E4%BA%86/"/>
    <id>http://yoursite.com/2020/02/25/一年了/</id>
    <published>2020-02-24T16:49:04.000Z</published>
    <updated>2020-02-24T16:50:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>时间飞逝，一眨眼，一年过去了。</p><p>好久没来，<br>好久没写，<br>其实心里一直想着，<br>总要记录点什么，<br>可是总是没能抽出时间过来。</p><p>有空再写吧，晚安。</p><h4 id="Mood"><a href="#Mood" class="headerlink" title="Mood"></a>Mood</h4><pre><code>挺好的。</code></pre><h4 id="Weather"><a href="#Weather" class="headerlink" title="Weather"></a>Weather</h4><pre><code>晴天。</code></pre><h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><pre><code>2020年2月24日 晚上</code></pre><p><strong><center>完结</center></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时间飞逝，一眨眼，一年过去了。&lt;/p&gt;
&lt;p&gt;好久没来，&lt;br&gt;好久没写，&lt;br&gt;其实心里一直想着，&lt;br&gt;总要记录点什么，&lt;br&gt;可是总是没能抽出时间过来。&lt;/p&gt;
&lt;p&gt;有空再写吧，晚安。&lt;/p&gt;
&lt;h4 id=&quot;Mood&quot;&gt;&lt;a href=&quot;#Mood&quot; class=
      
    
    </summary>
    
      <category term="生活类" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E7%B1%BB/"/>
    
    
      <category term="心情" scheme="http://yoursite.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
</feed>
