{"meta":{"title":"Guzhz's House","subtitle":"Simply to do something.","description":null,"author":"Guzhz","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2019-03-26T17:19:54.435Z","updated":"2019-03-26T17:19:54.435Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2019-03-26T17:19:33.780Z","updated":"2019-03-26T17:19:33.780Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"","date":"2019-03-26T12:47:50.243Z","updated":"2019-03-26T12:47:50.243Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JavaScript的简单回顾","slug":"JavaScript的简单回顾","date":"2020-06-08T11:50:05.229Z","updated":"2020-06-09T14:50:34.529Z","comments":true,"path":"2020/06/08/JavaScript的简单回顾/","link":"","permalink":"http://yoursite.com/2020/06/08/JavaScript的简单回顾/","excerpt":"","text":"前言：教学视频、笔记参考 一、快速入门1.1、两种引入方式内部标签123&lt;script&gt; //....&lt;script&gt; 外部引入1&lt;script src=\"js/myjs.js\"&gt;&lt;/script&gt; 1.2、基本语法123456789101112&lt;script&gt; &lt;!--JavaScript严格区分大小写--&gt; var score = 1 ; if (score &gt; 60 &amp;&amp; score &lt; 70)&#123; alert(\"60~70\"); &#125;else if(score &gt; 70 &amp;&amp; score &lt; 80)&#123; alert(\"70~80\"); &#125;else&#123; alert(\"other\") &#125;&lt;/script&gt; 1.3、数据类型1234567891011121314151617181920212223242526272829303132· 变量：var a· number：js不区分小树和整数· 字符串：'abc' \"abc\"· 布尔值：true | false· 逻辑运算： &amp;&amp; 两个都为真，结果为真 || 一个为真，结果为真 ! 真即假，假即真· 比较运算符： == 等于（类型不一样，值一样，也会判断为true） === 绝对等于（类型一样，值一样，结果为true）· NaN === NaN，这个与所有的数值都不相等，包括自己 只能通过isNaN（NaN）来判断这个数是否是NaN· 尽量避免使用浮点数进行运算，存在精度问题！· null 空· undefined 未定义· Java的数组必须是相同类型的对象~，JS中不需要这样 //保证代码的可读性，尽量使用[] var arr = [1,2,3,4,5,'hello',null,true]; //第二种定义方法 new Array(1,2,3,4,5,'hello');· 对象 var person = &#123; name:'Tom', age:3, tags:['js','java','web','...'] &#125;· 取对象值 person.name &gt; \"Tom\" person.age &gt; 3 1.4、严格检查模式改用ES6123456&lt;script&gt; 'use strict'; //全局变量 let i=1 //ES6 let&lt;/script&gt; 二、数据类型2.1、字符串特殊转义字符12345\\'\\n\\t\\u4e2d \\u##### Unicode字符\\x41 Ascall字符 多换字符串编写123456var msg = `hello world 你好呀 nihao ` 模板字符串123let name = 'Tom';let age = 3;var msg = `你好，$&#123;name&#125;` //tab 上面 esc下面 字符串长度1str.length 大小写转换123//注意，这里是方法，不是属性了student.toUpperCase();student.toLowerCase(); 取下标1student.indexof('t') 切片123substring，从0开始，取左不取右student.substring(1)//从第一个字符串截取到最后一个字符串student.substring(1,3)//[1,3) 2.2、数组Array可以包含任意的数据类型1var arr = [1,2,3,4,5,6];//通过下标取值和赋值 长度12arr.length//注意：假如给arr.lennth赋值，数组大小就会发生变化~，如果赋值过小，元素就会丢失 indexOf，通过元素获得下标索引123arr.indexOf(2)1//字符串的\"1\"和数字 1 是不同的 slice()：截取Array的一部分，返回的一个新数组，类似于String中substring push()，pop() 进出栈原理12push：压入到尾部pop：弹出尾部的一个元素 unshift(),shift() 头部12unshift：压入到头部shift：弹出头部的一个元素 排序sort()123(3)[\"B\",\"C\",\"A\"]arr.sort()(3)[\"A\",\"B\",\"C\"] 元素反转reverse()123(3)[\"A\",\"B\",\"C\"]arr.reverse()(3)[\"C\",\"B\",\"A\"] concat()123注意：concat()并没有修改数组，只是会返回一个新的数组var a = [1,2,3]a.concat(4,5) 连接符join()12345678910111213141516171819在本例中，我们将创建一个数组，然后把它的所有元素放入一个字符串：&lt;script type=\"text/javascript\"&gt; var arr = new Array(3) arr[0] = \"George\" arr[1] = \"John\" arr[2] = \"Thomas\" document.write(arr.join())&lt;/script&gt;=&gt; George,John,Thomas------------------------------------------------在本例中，我们将使用分隔符来分隔数组中的元素：&lt;script type=\"text/javascript\"&gt; var arr = new Array(3) arr[0] = \"George\" arr[1] = \"John\" arr[2] = \"Thomas\" document.write(arr.join(\".\"))&lt;/script&gt;George.John.Thomas 多维数组：同java 2.3、对象基本格式123456789101112var 对象名 = &#123; 属性名：属性值， 属性名：属性值， 属性名：属性值&#125;//定义了一个person对象，它有四个属性var person = &#123; name:\"Tom\", age:3, email:\"123456798@QQ.com\", score:66&#125; 使用一个不存在的对象属性，不会报错！undefined12person.haha&gt;&gt;&gt; undefined 动态的删减属性，通过delete删除对象属性12delete person.nametrue 动态添加，直接给新的属性添加值即可12person.haha = 'haha';'haha' 判断属性是否在这个对象中！xxx in xxx12345'age' in persontrue//继承'toString' in persontrue 判断一个属性是否是这个对象自身拥有的：hasOwnProperty()1234person.hasOwnProperty('toString')falseperson.hasOwnProperty('age')true 2.4、流程控制if、while、for同Java1234567891011121314151617var age = 3;if(age&gt;3)&#123; alert(3);&#125;else if(age&lt;5)&#123; alert(5);&#125;else&#123; alert(haha);&#125;while(age &lt; 100)&#123; age = age + 1; console.log(age);&#125;for(let i = 0;i &lt; 100; i++)&#123; console.log(i);&#125; forEach循环1234var age = [12,3,45,123,5,3,6,4,8]age.forEach(function (value) &#123; console.log(value);&#125;) for…in123for(var index in age)&#123; console.log(age[index]);&#125; 2.5、Map 和 Set ES6的新特性Map123456789101112//ES6//学成的成绩，学生的名字var names = ['tom','jack','sam'];var scores = [100,90,80];var map = new Map([['tom',100],['jack',90],['sam',80]])var name = map.get('tom');console.log(name);//map.set('admin',123456);//新增元素console.log(map);//Map(4)&#123;\"tom\" =&gt; 100, \"jack\" =&gt; 90, \"sam\" =&gt; 80, \"admin\" =&gt; 123456&#125;map.delete('tom');//删除元素console.log(map);//Map(3)&#123;\"jack\" =&gt; 90, \"sam\" =&gt; 80, \"admin\" =&gt; 123456&#125; Set：无需不重复的集合1234567//set可以去重var set = new Set([3,1,1,1,1,2]);set.add(4);//添加console.log(set);//Set(4) &#123;3, 1, 2, 4&#125;set.delete(1);//删除console.log(set);//Set(3) &#123;3, 2, 4&#125;console.log(set.has(3));//是否包含某个元素 2.6、Iterator遍历数组123456789101112131415//通过for of / for in 下标var arr = [3,4,5];for(var x of arr)&#123; console.log(x)&#125;//存在一个bugarr.name = 123;for(var x of arr)&#123; console.log(x)&#125;输出:123name 遍历map1234//遍历mapfor(let x of map)&#123; console.log(x);&#125; 遍历set1234//遍历setfor(let x of set)&#123; console.log(x);&#125; 三、函数3.1、定义函数方式一12345function abs(x)&#123; return x;&#125;//一旦执行到return代表函数结束，返回结果。//如果没有执行return，函数执行完也会返回结果，返回就是undefined 方式二1234var abs = function(x)&#123; return x;&#125;//function(x),这是一个匿名函数，但是赋值给abs。所以通过abs可以调用 参数问题123456789101112//jJavaScript可以传任意个参数，也可以不传递参数。//参数进来是否存在的问题？假设不存在参数，如何规避？var abs = function (x) &#123; //参数个数 console.log(arguments.length); //手动抛出异常 if (typeof x !=='number')&#123; throw 'Not a Number'; &#125; return x;&#125;//arguments：代表传递进来所有的参数，是一个数组 问题：arguments 包含所有的参数，我们有时候想使用多余的参数来进行附加操作，需要排除已有参数1234567//rest：获去除了已经定义的参数，ES6引入的新特性function arg(a,b,...rest) &#123; console.log(a); console.log(b); console.log(rest);&#125;//rest参数只能写在最后面，必须用…标识 3.2、变量的作用域在Javascript中，var定义变量实际是有作用域的。假设在函数体中声明，则在函数体外不可以使用~（如果想要实现，则需要闭包）12345function abc() &#123; var x= 1; x = x + 1;&#125;x = x + 2 ;//Uncaught ReferenceError: x is not defined 如果两个函数使用相同变量名，只要在函数内部，就不冲突123456789function abc1() &#123; var x= 1; x = x + 1;&#125;function abc2() &#123; var x= 2; x = x + 1;&#125; 内部函数可以询问外部函数的成员，反之则不行12345678function abc3() &#123; var x= 1; //内部函数可以询问外部函数的成员，反之则不行 function abc3() &#123; var y = x + 1;//2 &#125; var z = y + 1;//Uncaught ReferenceError: x is not defined&#125; 假设：内部函数变量与外部函数变量重名12345678910function abc5() &#123; var x = 1; function abc6() &#123; var x = A; console.log('inner' + x);//outer1 &#125; console.log('outer'+x);//innerA abc6();&#125;//不冲突，自己有就用自己的 提升变量作用域123456789101112131415161718192021function abc8() &#123; var x = 'x' + y; console.log(x); var y = 'y';&#125;//结果：undefined//说明：js执行引擎，自动提升了y的声明，但是不会提升y的赋值function abc8() &#123; var y; var x = 'x' + y; console.log(x); y = 'y';&#125;//这是在Javascript简历之初就存在的特性。养成规范：所有的变量定义都放在函数头部，不要乱放，便于代码维护；function abc()&#123; var x = 1, y = x + 1, z,i,a;//undefined&#125; 全局函数1234567//全局变量x = 1;function f()&#123; console.log(x);&#125;f();console.log(x); 全局对象：window1234567891011121314151617var x = 'xxx';alert(x);alert(windws.x);//alert()这个函数本身也是一个window变量：var x = 'xxx';window.alert(x);var old_alert = window.alert;// old_alert(x);window.alert = function () &#123;&#125;;//发现alert()失效了window.alert(123);//恢复window.alert = old_alert;window.alert(456);//Javascript实际上只有一个全局作用域，任何变量（函数也可以视为变量），假设没有在函数作用范围，就会向外查找，如果在全局作用域都没有找到，报错RefrenceError 规范：由于我们所有的全局变量都会绑定到我们的window上。如果不同的js文件，使用了相同的全局变量，冲突-&gt;如何能够减少冲突？123456789//唯一全局变量var LiusxApp = &#123;&#125;;//定义全局变量LiusxApp.name = 'xiaoming';LiusxApp.add = function (a,b) &#123; return a + b;&#125;//把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名冲突的问题。（jQuery） 局部作用域：let123456789101112131415function aaa()&#123; for(var i = 0; i &lt; 100 ;i++)&#123; console.log(i); &#125; console.log(i+1);//问题，i 出了这个作用域还可以使用&#125;//ES6：let关键字，解决局部作用域冲突问题！function aaa()&#123; for(let i = 0; i &lt; 100 ;i++)&#123; console.log(i); &#125; console.log(i+1);//问题，i 出了这个作用域即刻失效&#125;//建议大家都用let取定义局部作用域的变量 const：ES6之前，怎么定义常量：只有用全部大写字母命名的变量就是常量：建议不要修改这样的值1234const PI = '3.14';//只读效果console.log(PI);PI = '123';//Uncaught TypeError: Assignment to constant variable.console.log(PI); 3.3、方法定义方法（方法就是把函数放在对象里面，对象中只有2个东西：属性和方法）12345678910111213var liusx = &#123; name: 'Sam', bitrh: 2020, //方法 age: function () &#123; var now = new Date().getFullYear(); return now-this.bitrh; &#125;&#125;//属性liusx.name;//方法，一定要带()liusx.age(); this的使用：没有上下午关系直接使用会NaN，但可以添加指向12345678910111213var liusx = &#123; name: 'Sam', bitrh: 2020, //方法 age: function () &#123; var now = new Date().getFullYear(); return now-this.bitrh; &#125;&#125;//属性liusx.name;//方法，一定要带()liusx.age(); 1234567891011121314function getAge () &#123; var now = new Date().getFullYear(); return now-this.bitrh;&#125;var liusx = &#123; name: 'Sam', bitrh: 2020, //方法 age: getAge&#125;//liusx.age() =&gt;ok//getAge() =&gt;NaN 控制this的指向1234567891011121314function getAge () &#123; var now = new Date().getFullYear(); return now-this.bitrh;&#125;var liusx = &#123; name: 'Sam', bitrh: 2020, //方法 age: getAge&#125;//liusx.age() =&gt;ok//getAge() =&gt;NaNgetAge.apply(liusx,[])//this，指向了liusx，参数为空 四、内部对象标准对象12345678910111213141516typeof 123\"number\"typeof '123'\"string\"typeof true\"boolean\"typeof NaN\"number\"typeof []\"object\"typeof &#123;&#125;\"object\"typeof Math.abs\"function\"typeof undefined\"undefined\" 4.1、Date的基本使用1234567891011121314151617181920var now = new Date();//now.getFullYear();//年now.getMonth();//月now.getDate();//日now.getDay();//星期几now.getHours();//时now.getMinutes();//分now.getSeconds();//秒now.getTime();//时间戳 全世界统一 1970 1.1 8:00:00console.log(new Date(1589096655409));//时间戳转时间//转换//本地时间now.toLocaleString();\"2020/5/10 下午3:44:15\"//东八区now.toGMTString();\"Sun, 10 May 2020 07:44:15 GMT\" 4.2、JSON12345678910111213//JSON 字符串和 JS 对象的转换var user = &#123; name: 'liusx', age: 3, sex: '男'&#125;//对象转换json字符串:&#123;\"name\":\"liusx\",\"age\":3,\"sex\":\"男\"&#125;var jsonuUer = JSON.stringify(user);console.log(jsonuUer);//json 字符串转换为对象，参数为json字符串var obj = JSON.parse('&#123;\"name\":\"liusx\",\"age\":3,\"sex\":\"男\"&#125;');console.log(obj); 123//JSON 和 JS 对象的区别：var obj = &#123;\"name\":\"liusx\",\"age\":3,\"sex\":\"男\"&#125;;var json = '&#123;\"name\":\"liusx\",\"age\":3,\"sex\":\"男\"&#125;'; 4.3、Ajax123原生的Javascript写法，xhr异步请求jQuery封装好的方法axios请求 五、原型5.1、原型的概念（类似Java继承）1234567891011121314151617181920212223//面向对象var Student = &#123; name: 'liusx', age: 3, run:function () &#123; console.log(this.name+\"run.....\") &#125;&#125;var xiaoming = &#123; name: '小明'&#125;//小明的原型 是Studentxiaoming.__proto__ = Student; //把属性继承给小明xiaoming.run();var Bird = &#123; fly: function () &#123; console.log(this.name + \"fly......\") &#125;&#125;//小明的原型 是Birdxiaoming.__proto__ = Bird; 5.2、class继承：class关键字，ES6引入12345678//class继承function Student(name) &#123; this.name = name;&#125;//给student新增一个方法Student.prototype.hello = function () &#123; alert('hello');&#125; 1、定义一个类，属性，方法1234567891011121314//ES6 之后======极度类似Javaclass Student&#123; constructor(name)&#123; this.name = name; &#125; hello()&#123; alert('hello'); &#125;&#125;var xiaoming = new Student('小明');var xiaoming = new Student('小红');xiaoming.hello(); 2、继承12345678910111213141516171819202122232425//ES6 之后======极度类似Javaclass Student&#123; constructor(name)&#123; this.name = name; &#125; hello()&#123; alert('hello'); &#125;&#125;class XiaoStudent extends Student &#123; constructor(name,grade)&#123; super(name); this.grade = grade; &#125; myGrade()&#123; alert('我是一名小学生'); &#125;&#125;var xiaoming = new Student('小明');xiaoming.hello();var xiaohong = new XiaoStudent('小红',1);xiaohong.myGrade(); 5.3、原型链12__proto__//无限套娃，形成了链 六、操作BOM对象（重点）6.1、window（重要）：代表浏览器窗口1234567891011window.alert(1)undefinedwindow.innerHeight722window.innerWidth1148window.outerHeight824window.outerWidth1536// 大家可以调整浏览器窗口试试 6.2、Navigator：封装了浏览器信息123456789//大多数时候，我们不会使用：Navigator 对象，因为会被认为修改！不建议使用这些属性判断和编写代码navigator.appName\"Netscape\"navigator.appVersion\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36\"navigator.userAgent\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36\"navigator.platform\"Win32\" 6.3、screen：代表屏幕尺寸1234screen.width1536screen.height864 6.4、location（重要）：代表当前页面的URL信息123456host:\"www.baidu.com\"href:\"https://www.baidu.com/\"proticlo:\"https\"reload:f reload()// 刷新网页// 设置新的地址location.assign('https://Guzhz.github.io/') 6.5、document（内容：DOM）：代表当前页面，HTML DOM文档树12document.title\"百度一下，你就知道\" 6.6、获取具体的文档数节点123456789&lt;dl id=\"app\"&gt; &lt;dt&gt;Java&lt;/dt&gt; &lt;dt&gt;JavaSE&lt;/dt&gt; &lt;dt&gt;JavaScript&lt;/dt&gt;&lt;/dl&gt;&lt;script&gt; var dl = document.getElementById('app');&lt;/script&gt; 6.7、获取：cookie12345document.cookie//劫持cookie原理&lt;script src=\"aa.js\"&gt;&lt;/script&gt;&lt;!--恶意人员：获取你的cookie上传到它的服务器--&gt;//服务器端可以设置cookie：httpOnly 6.8、history（不建议使用）：代表浏览器的历史记录12histor.forward();//前进history.back();//后退 七、操作DOM对象（重点）7.1、获得Dom节点1234567891011121314151617&lt;div id=\"father\"&gt; &lt;h1&gt;标题一&lt;/h1&gt; &lt;p id=\"p1\"&gt;p1&lt;/p&gt; &lt;p class=\"p2\"&gt;p2&lt;/p&gt;&lt;/div&gt;&lt;script&gt; var h1 = document.getElementsByTagName(\"h1\"); //返回数组 var p1 = document.getElementById(\"p1\") var p2 = document.getElementsByClassName(\"p2\"); //返回数组 var father = document.getElementById(\"father\"); //获取父节点下所有的子节点 var childrens = father.children; //father.firstChild; //father.lastChild;&lt;/script&gt; 7.2、更新节点12345678910111213&lt;div id=\"id1\"&gt;&lt;/div&gt;&lt;script&gt; var id1 = document.getElementById('id1'); id1.innerText='456';//修改文本的值 id1.innerHTML='&lt;strong&gt;456&lt;/strong&gt;';//可以解析HTML文本标签 //操作CSS id1.style.color = 'yellow';// 属性使用 字符串 包裹 id1.style.fontSize = '20px';// - 转 驼峰命名问题 id1.style.padding = '2em'&lt;/script&gt; 7.3、删除节点：先获取父节点，再通过父节点删除自己12345678910111213141516&lt;div id=\"father\"&gt; &lt;h1&gt;标题一&lt;/h1&gt; &lt;p id=\"p1\"&gt;p1&lt;/p&gt; &lt;p class=\"p2\"&gt;p2&lt;/p&gt;&lt;/div&gt;&lt;script&gt; var self = document.getElementById(\"p1\") var father = p1.parentElement; father.removeChild(self); //删除是一个动态的过程，先删除0，在删除2会找不到2节点，因为会重新排序 father.removeChild(father.children[0]); father.removeChild(father.children[1]) father.removeChild(father.children[2])&lt;/script&gt; 7.4、插入节点我们获得了某个Dom节点，假设这个dom节点是空的，我们通过 innerHTML 就可以增加一个元素，但是如果这个DOM节点已经存在元素了，则会直接覆盖。追加：appendChild()1234567891011121314151617181920212223&lt;p id=\"js\"&gt;Javascript&lt;/p&gt;&lt;div id=\"list\"&gt; &lt;p id=\"se\"&gt;JavaSE&lt;/p&gt; &lt;p id=\"ee\"&gt;JavaEE&lt;/p&gt; &lt;p id=\"me\"&gt;JavaME&lt;/p&gt;&lt;/div&gt;&lt;script&gt; var js = document.getElementById('js'); var list = document.getElementById('list'); //追加到后面 list.appendChild(js);&lt;/script&gt;-----追加后效果为：&lt;div id=\"list\"&gt; &lt;p id=\"se\"&gt;JavaSE&lt;/p&gt; &lt;p id=\"ee\"&gt;JavaEE&lt;/p&gt; &lt;p id=\"me\"&gt;JavaME&lt;/p&gt; &lt;p id=\"js\"&gt;Javascript&lt;/p&gt;&lt;/div&gt; 创建一个新的标签，实现插入12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;p id=\"js\"&gt;Javascript&lt;/p&gt;&lt;div id=\"list\"&gt; &lt;p id=\"se\"&gt;JavaSE&lt;/p&gt; &lt;p id=\"ee\"&gt;JavaEE&lt;/p&gt; &lt;p id=\"me\"&gt;JavaME&lt;/p&gt;&lt;/div&gt;&lt;script&gt; let js = document.getElementById('js');//已经存在的节点 let list = document.getElementById('list'); //追加到后面 //list.appendChild(js); //通过JS 创建一个新的节点 let newP = document.createElement('p'); newP.id = 'newP'; newP.innerText = 'Hello,Sam'; list.appendChild(newP); //创建一个标签节点 let myScript = document.createElement('script'); myScript.setAttribute('type', 'text/javascript'); //给body标签创建样式1 let body = document.getElementsByTagName('body')[0]; body.setAttribute('style', 'background-color: yellow;'); //给body标签创建样式2 //let myStyle = document.createElement('style');//创建一个style标签 //myStyle.setAttribute('tyle', 'text/css'); //myStyle.innerHTML = 'body&#123;background-color: chartreuse;&#125;';//设置样式 //document.getElementsByTagName('head')[0].appendChild(myStyle);&lt;/script&gt;----------------------------------------------------------------追加后效果为：&lt;body style=\"background-color: yellow;\"&gt; &lt;p id=\"js\"&gt;Javascript&lt;/p&gt; &lt;div id=\"list\"&gt; &lt;p id=\"se\"&gt;JavaSE&lt;/p&gt; &lt;p id=\"ee\"&gt;JavaEE&lt;/p&gt; &lt;p id=\"me\"&gt;JavaME&lt;/p&gt; &lt;p id=\"newP\"&gt;Hello,Sam&lt;/p&gt; &lt;script type=\"text/javascript\"&gt;&lt;/script&gt; &lt;/div&gt;&lt;/body&gt; insertBefore()追加123456789101112131415161718192021222324&lt;p id=\"js\"&gt;Javascript&lt;/p&gt;&lt;div id=\"list\"&gt; &lt;p id=\"se\"&gt;JavaSE&lt;/p&gt; &lt;p id=\"ee\"&gt;JavaEE&lt;/p&gt; &lt;p id=\"me\"&gt;JavaME&lt;/p&gt;&lt;/div&gt;&lt;script&gt; let js = document.getElementById('js');//已经存在的节点 let list = document.getElementById('list'); let ee = document.getElementById('ee'); //要包含的节点. insertBefore(newNode,targetNode) list.insertBefore(js, ee);&lt;/script&gt;----追加后效果为：&lt;body&gt;&lt;div id=\"list\"&gt; &lt;p id=\"se\"&gt;JavaSE&lt;/p&gt; &lt;p id=\"js\"&gt;Javascript&lt;/p&gt; &lt;p id=\"ee\"&gt;JavaEE&lt;/p&gt; &lt;p id=\"me\"&gt;JavaME&lt;/p&gt;&lt;/div&gt;&lt;/body&gt; 八、操作表单（验证）8.1、表单：form DOM树12345678文本框：text下拉框：select单选框：radio多选框：checkbox隐藏域：hidden密码框：password…表单的目的：提交信息 8.2、获得要提交的信息12345678910111213141516171819202122&lt;form action=\"#\" method=\"post\"&gt; &lt;p&gt; &lt;span&gt;用户名：&lt;/span&gt;&lt;input type=\"text\" id=\"username\"&gt; &lt;/p&gt; &lt;p&gt; &lt;span&gt;性别：&lt;/span&gt; &lt;input type=\"radio\" name=\"sex\" value=\"man\" id=\"boy\"&gt;男 &lt;input type=\"radio\" name=\"sex\" value=\"woman\" id=\"girl\"&gt;女 &lt;/p&gt; &lt;script&gt; var input_text = document.getElementById('username'); //得到输入框的值：input_text.value //修改输入框的值：input_text.value = wudi var boy_radio = document.getElementById('boy'); var girl_radio = document.getElementById('girl'); //对于单选框、多选框等等固定的值， boy_radio.checked;//查看返回的结果，是否为true，如果为true，则被选中 girl_radio.checked = true;//赋值 &lt;/script&gt;&lt;/form&gt;//提交表单：MD5加密，表单优化 8.3、一般MD5加密12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;script&gt; function sub() &#123; let username = document.getElementById('username'); let password = document.getElementById('password'); console.log(username); console.log(password); // MD5 算法 方案一： password.value = md5(password.value); console.log(password.value); &#125;&lt;/script&gt;//隐藏密码框+MD5加密：&lt;!-- 表单绑定提交事件 onsubmit = 绑定一个提交检查的函数，true，false 将这个结果返回给表单，使用 onsubmit 接收！ οnsubmit=\"return sub();\"--&gt;&lt;form action=\"#\" method=\"post\" onsubmit=\"return sub();\"&gt; &lt;p&gt; &lt;span&gt;用户名：&lt;/span&gt;&lt;input type=\"text\" id=\"username\" name=\"username\"&gt; &lt;/p&gt; &lt;p&gt; &lt;span&gt;密码：&lt;/span&gt;&lt;input type=\"password\" id=\"password\"&gt; &lt;input type=\"hidden\" id=\"md5-password\" name=\"password\"&gt; &lt;/p&gt; &lt;button type=\"submit\" &gt;提交&lt;/button&gt; &lt;script&gt; function sub() &#123; let username = document.getElementById('username'); let password = document.getElementById('password'); let md5password = document.getElementById('md5-password'); //MD5 算法：隐藏表单域提交表单密码 md5password.value = md5(password.value); //可以校验判断表单内容，true：通过提交，false：阻止提交 return true; &#125; &lt;/script&gt;&lt;/form&gt; 九、jQuery jQuery API：http://jquery.cuishifeng.cn/ 9.1、初始jQuery（直接引用、使用js文件）12345678910111213&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=\"\" id=\"test-jquery\"&gt;点我&lt;/a&gt;&lt;script&gt; $('#test-jquery').click(function () &#123; alert('hello,jQuery') &#125;)&lt;/script&gt;&lt;/body&gt; 9.2、选择器123456789101112131415161718&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;script&gt; //原生js，选择器少，麻烦且不好记 //id、标签、类 document.getElementById(); document.getElementsByTagName(); document.getElementsByClassName(); //jQuery 就是 css中的选择器 $('#id').click();//id选择器 $('div').click();//标签选择 $('.className').click();//class选择器&lt;/script&gt; 9.3、操作DOM123456789101112131415161718192021222324252627282930313233/* 节点文本操作; css操作; 元素的显示和隐藏：本质 display=none; …等等更多查看API */&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;ul id=\"test-ul\"&gt; &lt;li id=\"js\" class=\"js\"&gt;Javascript&lt;/li&gt; &lt;li name=\"python\"&gt;Python&lt;/li&gt; &lt;li id=\"sh\"&gt;show_hide&lt;/li&gt;&lt;/ul&gt;&lt;script&gt; $(\"#test-ul li[name='python']\").text();//获得值 $(\"#test-ul li[name='python']\").text('Python_new'); $('#test-ul').html();//获得值 $('test-ul').html('&lt;strong&gt;html_new&lt;/strong&gt;');//设置值 $('#js').css('color','red');//设置样式 $('#sh').show();//显示 $('#sh').hide();//隐藏 $(window).width(); $(window).height(); $(document).width(); $(document).height();&lt;/script&gt;&lt;/body&gt; 2020年06月09日 晚上Guzhz","categories":[{"name":"学习类","slug":"学习类","permalink":"http://yoursite.com/categories/学习类/"}],"tags":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/tags/教程/"}]},{"title":"CSS3的简单回顾","slug":"CSS3的简单回顾","date":"2020-06-08T04:20:22.172Z","updated":"2020-06-08T08:18:48.533Z","comments":true,"path":"2020/06/08/CSS3的简单回顾/","link":"","permalink":"http://yoursite.com/2020/06/08/CSS3的简单回顾/","excerpt":"","text":"前言：教学视频参考 1、CSS3的三种导入方式 优先级：就近原则 123456789101112131415161718192021&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;!--内部样式--&gt; &lt;style&gt; h1 &#123; color: green; &#125; &lt;/style&gt; &lt;!--外部样式--&gt; &lt;link rel=\"stylesheet\" href=\"css/style.css\" /&gt;&lt;/head&gt;&lt;body&gt; &lt;!--行内样式：在标签元素中，编写一个style属性，编写样式即可--&gt; &lt;h1 style=\"color: red\"&gt;这是标签&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 拓展：CSS2.1导入式 123&lt;style&gt; @import url(\"css/style.css\");&lt;/style&gt; 2、选择器2.1、基本选择器123标签选择器：选择一类标签 标签.&#123; &#125;class选择器：.类名&#123; &#125;id选择器：#.ID名&#123; &#125; 2.2、层次选择器 后代选择器，在某个元素的后面 12345&lt;style&gt; body p &#123; background: red; &#125;&lt;/style&gt; 子选择器，一代 12345&lt;style&gt; body&gt;p &#123; background: orange; &#125;&lt;/style&gt; 相邻兄弟选择器：只有一个，相邻（向下） 123456789&lt;style&gt; .active+p &#123; background: red &#125;&lt;/style&gt;&lt;body&gt; &lt;p class=\"active\"&gt;p1&lt;p&gt; &lt;p&gt;p2&lt;/p&gt;&lt;/body&gt; 通用兄弟选择器，当前选中元素的向下的所有兄弟元素 12345678910&lt;style&gt; .active~p &#123; background: red; &#125;&lt;/style&gt;&lt;body&gt; &lt;p class=\"active\"&gt;p1&lt;p&gt; &lt;p&gt;p2&lt;/p&gt;&lt;/body&gt; 2.3、结构伪类选择器 ul的第一个子元素 123ul li:first-child &#123; background: aqua;&#125; ul的最后一个子元素 123ul li:last-child &#123; background: blue;&#125; 选中pfather：定位到父元素，选择当前的第一个子元素p，子元素的第一位必须为p才生效 123pfather:nth-child(1) &#123; background: orange;&#125; 选中父元素下的，第2个p元素 123p:nth-of-type(2) &#123; background: red;&#125; 2.4、属性选择器（常用） class + id 结合 123456789101112131415&lt;style&gt; .demo a &#123; display: block; height: 50px; width: 50px; float: left; border-radius: 10px; background: blue; text-align: center; color: beige; text-decoration: none; margin-right: 5px; font: bold 20px/50px Arial; &#125;&lt;/style&gt; 标签名[属性名=属性值]（正则: =、*=、^=、$=） 1234567891011121314151617181920212223242526272829303132333435&lt;style&gt;/*存在id的a标签*/a[id] &#123; background: red;&#125; /* =表示绝对等于 *=表示包含... ^=表示以...开头 $=表示以...结尾 *//*id=first的a标签*/a[id=first] &#123; background: aqua;&#125;/*class属性值绝对等于\"links item2 first2\"*/a[class=\"links item2 first2\"] &#123; background: orange;&#125;/*class属性值绝对包涵\"links\"*/a[class *=\"links\"] &#123; background: black;&#125;/*选中href中以http开头的元素*/a[href^=\"http\"] &#123; background: orange;&#125;&lt;/style&gt; 123456789&lt;p class=\"demo\"&gt; &lt;a href=\"http://www.baidu.com\" class=\"links item first\" id=\"first\"&gt;1&lt;/a&gt; &lt;a href=\"/adad/faf\" class=\"links item2 first2\"&gt;2&lt;/a&gt; &lt;a href=\"qwe123\" class=\"links item3 first3\"&gt;3&lt;/a&gt; &lt;a href=\"eweqe\" class=\"links item4 first4\"&gt;4&lt;/a&gt; &lt;a href=\"rrrrr\" class=\"links item5 first5\"&gt;5&lt;/a&gt; &lt;a href=\"ttt\" class=\"links item6 first6\"&gt;6&lt;/a&gt; &lt;a href=\"yyy\" class=\"links item7 first7\"&gt;7&lt;/a&gt;&lt;/p&gt; 3、美化网页元素3.1、字体 建立在标签上的处理，所以建议用span包裹 123456789101112131415&lt;head&gt; &lt;style&gt; #title1 &#123; font-size: 50px; font-weight：blod; font-family: 楷体; /*常用写法：*/ font: oblique bloder 12px \"楷体\" &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;span id=\"title1\"&gt;JAVA&lt;/span&gt;&lt;/body&gt; 3.2、文本 下划线 12345678text-decoration:underline/*下划线*/text-decoration:line-through/*中划线*/text-decoration:overline/*上划线*/text-decoration:none/*超链接去下划线*/ 图片、文字水平居中 123img,span &#123; vertical-align: middle&#125; 3.3、文本，阴影和超链接伪类 超链接伪类 123456789101112131415161718192021222324&lt;style&gt;/*超链接有默认的颜色*/a &#123; text-decoration: none; color: #000000;&#125;a:hover &#123; /*鼠标悬浮的状态*/ color: orange;&#125;a:active &#123; /*鼠标按住未释放的状态*/ color: green&#125;a:visited &#123; /*点击之后的状态*/ color: red&#125;&lt;/style&gt; 阴影 12 左 下 半径text-shadow:5px 5px 5px 颜色 3.4、利用列表ul li小设计：a进来变样式123456789101112131415161718192021222324ul li &#123; height: 30px; list-style: none; /*none:去掉原点、circle:空心圆、decimal:数字、square:正方形*/ text-indent: 1em; /*缩进*/&#125;a&#123; text-decoration: none; /*首先去掉下划线*/ font-size: 14px; color: #000;&#125;a:hover &#123; color: orange; text-decoration: underline /*进来再有下划线*/ &#125;/*放在div中，作为导航栏*/&lt;div id=\"nav\"&gt;&lt;/div&gt;#nav &#123; width: 300px;&#125; 3.5、背景样式、图片123456789background:red---------------------------------------------background-image:url(\"\"); /*默认是全部平铺的*/background-repeat:repeat-x /*水平平铺*/background-repeat:repeat-y /*垂直平铺*/background-repeat:no-repeat /*不平铺*/---------------------------------------------background:red url(\"url\") 270px 10px no-repeat /*综合使用*/background-position:center /*定位：背景位置*/ 拓展：渐变网址：https://www.grablent.com径向渐变、圆形渐变 4、盒子模型4.1、什么是盒子模型123margin：外边距padding：内边距border：边框 4.2、边框1border：2px solid red 4.3、外边距的妙用：居中1234margin:0 0 0 0 /*表示上、右、下、左*/margin:0 auto /*居中、auto表示左右自动*/margin:4px /*表示上、右、下、左都为4px*/margin:10px 20px 30px /*表示上为10px，左右为20px，下为30px*/ 开发中的常用操作12345/* 盒子的计算方式：margin+border+padding+内容的大小 *//* body总有一个默认的外边距，开发中会先把内外边距置为0 */margin:0;padding:0;text-decoration:none; 4.4、圆角边框：border-radius123（顺时针），左上开始圆圈：圆角=半径border-radius: 有四个参数 5、浮动5.1、标准文档流 包涵关系：块级元素包裹行级元素块级元素：独占一行 h1~h6 、p、div、 列表…行内元素：不独占一行 span、a、img、strong 5.2、display（重要） block：块元素inline：行内元素inline-block：行内块元素none：消失注：这也是一种实现行内元素排列的方式，但是我们很多情况用float 5.3、float：浮动 参考：详细参考123456div&#123; float:left/right&#125;/*浮动后，不再属于标准中的元素，下面的元素会上移、但本身还会于上面的元素对其*//*假如某个div元素A是浮动的，如果A元素上一个元素也是浮动的，那么A元素会跟随在上一个元素的后边(如果一行放不下这两个元素，那么A元素会被挤到下一行)；如果A元素上一个元素是标准流中的元素，那么A的相对垂直位置不会改变，也就是说A的顶部总是和上一个元素的底部对齐。*/ 清除浮动 clear123456/* right：右侧不允许有浮动元素left： 左侧不允许有浮动元素both： 两侧不允许有浮动元素none： 两侧允许有浮动元素 对于CSS的清除浮动(clear)，一定要牢记：这个规则只能影响使用清除的元素本身，不能影响其他元素。*/ 5.4、解决浮动后父级边框塌陷问题1234567891011121314151617181920212223242526272829/* 方案一：增加父级元素的高度；*//* 方案二：增加一个空的div标签，清除本标签的浮动来实现补回原标签 */&lt;style&gt; .clear&#123; clear:both; margin:0; padding:0; &#125;&lt;/style&gt;&lt;div class = \"clear\"&gt;&lt;/div&gt;/* 方案三：在父级元素中增加一个滚动条然后隐藏起来：overflow：hidden */overflow:hidden /*隐藏*/overflow：scoll /*滚动*//* 方案四：父类添加一个伪类:after */#father:after&#123; content:''; display:block; clear:both;&#125;浮动元素增加空div----&gt; 简单、代码尽量避免空div设置父元素的高度-----&gt; 简单，元素假设没有了固定的高度，就会超出overflow----&gt; 简单，下拉的一些场景避免使用父类添加一个伪类:after（推荐）----&gt; 写法稍微复杂，但是没有副作用，推荐使用 5.5、display与float对比 display：方向不可以控制float：浮动起来的话会脱离标准文档流，所以要解决父级边框塌陷的问题。 6、定位6.1、相对定位（relative） 相对于自身的位置，它仍然在标准文档流中12345678h2.pos_left&#123; location:relative top:-20px; left:20px; bottom:-10px; right:20px;&#125; 6.2、绝对定位： 1234567891011/* 总结：相对一父级或浏览器的位置，进行指定的偏移， 绝对定位的话，它不在标准文档流中，原来的位置不会被保留 */div:nth-of-type(1)&#123;/*绝对定位：没有相对的父级元素，所以相对于浏览器*/ width: 100px; height: 100px; background:red; position: absolute; right: 0; bottom: 0;&#125; 6.3、固定定位123456789div:nth-of-type(2)&#123; /*始终在右下角*/ width: 50px; height: 50px; background: yellow; position: fixed; right: 0; bottom: 0;&#125; 6.4、图层 z-index：默认是0，最高无限~999(最顶层)1234.tipText&#123; color: white; z-index: 999;&#125; 6.5、透明度12345.tipBg&#123; background: orange; opacity: 0.5; /*背景透明度*/ filter: alpha(opacity=50); /*原理同上，这里解决ie的兼容性问题*/&#125; 2020年06月06日 下午Guzhz","categories":[{"name":"学习类","slug":"学习类","permalink":"http://yoursite.com/categories/学习类/"}],"tags":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/tags/教程/"}]},{"title":"HTML5的简单回顾","slug":"HTML5的简单回顾","date":"2020-06-06T11:15:05.110Z","updated":"2020-06-06T11:25:01.267Z","comments":true,"path":"2020/06/06/HTML5的简单回顾/","link":"","permalink":"http://yoursite.com/2020/06/06/HTML5的简单回顾/","excerpt":"","text":"前言：教学视频参考：https://www.bilibili.com/video/BV1x4411V75C 网页基本标签1234&lt;!--meta描述性标签，用来描述我们网站的一些信息--&gt;&lt;meta charset=\"UTF-8\"&gt;&lt;meta name=\"keywords\" content=\"跟狂神学Java\"&gt;&lt;meta name=\"description\" content=\"可以学习java\"&gt; 12粗体：&lt;strong&gt;&lt;/strong&gt;斜体：&lt;em&gt;&lt;/em&gt; 1234 空 &amp;nbsp;大于号 &amp;gt;小于号 &amp;lt;版权符号 &amp;copy; 12&lt;!--图像标签： alt:图片描述--&gt;&lt;img src=\"../resources/image/1.jpg\" alt=\"我的图片\" title=\"悬停文字\" width=\"1366\" height=\"768\"&gt; 123456789101112target=\"_blank\" ：在新标签中打开target=\"_self\" ：在自己的网页中打开target=\"#MarkName\"：即跳转到锚点 &lt;!--锚链接：指定跳转到页面的某个位置，需要定义name属性作为标记--&gt;&lt;a name=\"top\"&gt;顶部&lt;/a&gt;&lt;!--跳转到标记--&gt;&lt;a href=\"#top\"&gt;回到顶部&lt;/a&gt;&lt;!--邮件连接：mailto--&gt;&lt;a href=\"mailto:936681921@qq.com\"&gt;点击联系我&lt;/a&gt; 行内元素和块元素12块元素：无论内容有多少，元素自己独占一行行内元素：内容撑开宽度，左右都是行内元素的可以排在一行 列表标签123456789101112131415161718192021有序列表&lt;ol&gt; &lt;li&gt;语文&lt;/li&gt; 1.语文 &lt;li&gt;数学&lt;/li&gt; 2.数学 &lt;li&gt;英语&lt;/li&gt; 3.英语&lt;/ol&gt;无序列表&lt;ul&gt; &lt;li&gt;语文&lt;/li&gt; ● 语文 &lt;li&gt;数学&lt;/li&gt; ● 数学 &lt;li&gt;英语&lt;/li&gt; ● 英语&lt;/ul&gt;自定义列表&lt;dl&gt; &lt;dt&gt;科目&lt;/dt&gt; 科目 &lt;dd&gt;语文&lt;/dd&gt; 语文 &lt;dd&gt;数学&lt;/dd&gt; 数学 &lt;dd&gt;英语&lt;/dd&gt; 英语&lt;/dl&gt; 表格标签1234567891011121314151617&lt;table&gt; ...&lt;/table&gt;表格标签。&lt;tr&gt;...&lt;/tr&gt;行标签，代表一行。&lt;td&gt;...&lt;/td&gt;列标签，代表一列。border=\"\"表示表格线条宽度。colspan=\"3\"表示这一单元跨几列。rowspan=\"2\"表示这一单元跨几行。 视频和音频1234controls：控制调autoplay：自动播放&lt;video src=\"../resources/video/2.mp4\" controls autoplay&gt;&lt;/video&gt;&lt;audio src=\"../resources/audio/3.mp3\" controls autoplay&gt;&lt;/audio&gt; 结构分析12345678910111213&lt;header&gt; &lt;h2&gt;网页头部&lt;/h2&gt;&lt;/header&gt;&lt;section&gt; &lt;h2&gt;网页主体&lt;/h2&gt;&lt;/section&gt;&lt;footer&gt; &lt;h2&gt;网页脚步&lt;/h2&gt;&lt;/footer&gt;&lt;nav&gt;导航&lt;/nav&gt; iframe内联框架12345678&lt;body&gt; &lt;!--单独使用--&gt; &lt;iframe src=\"www.baidu.com\" name=\"go\" frameborder=\"0\" width=\"1000\" height=\"800\"&gt;&lt;/iframe&gt; &lt;!--配合a标签使用--&gt; &lt;iframe src=\"\" name=\"go\" frameborder=\"0\" width=\"1000\" height=\"800\"&gt;&lt;/iframe&gt; &lt;a href=\"https://www.baidu.com\" target=\"go\" &gt;点击打开百度&lt;/a&gt;&lt;/body&gt; 表单12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;body&gt; &lt;form action=\"\" method=\"\"&gt; action:填写表单内数据提交给的地址。 是提交表单数据的方式，get可以在url看见提交的内容，post的保密性稍高。 &lt;input type=\"\"&gt; &lt;/form&gt; type=\"text\" 默认文本框。 type=\"password\" 密码框，输入不显示密码。 type=\"search\" 搜索框。 type=\"submit\" 提交按钮，网页中点击提交。 type=\"reset\" 重置按钮，网页中点击后表单重置。 hidden:隐藏。 单选框： type=\"radio\" name=\"\":填入组名，网页内在同一组内的单选框只能选中一个，不在同一组则 相当于多选框。 value=\"\"：提交时显示的名字。 checked:默认选择本项选中。 多选框： type=\"checkbox\" name=\"\":填入组名。 value=\"\"：提交时显示的名字。 checked:默认选择本项选中。 普通按钮： type=\"button\": name=\"\":提交时的按钮名。 value=\"\"：在网页显示在按钮中的字符。 下拉列表框： &lt;select name=\"\"&gt;:name中填写列表名。 &lt;option value=\"\"&gt;:value填写单元名 &lt;option value=\"\"&gt;:value填写单元名 &lt;/select&gt; selected:默认选择本项选中。 文本域： &lt;textarea name=\"\"cols=\"30\" rows=\"10\" placeholder=\"\"&gt; name=\"\" :文本域名。文本域网页。 cols=\"30\" :列数。 rows=\"10\" :行数。 placeholder=\"\":默认显示内容，所有文本框可用。 文件域： &lt;input type=\"file\" name=\"files\"&gt; 滑块： &lt;input type=\"range\" name=\"range\" min=\"0\" max=\"100\" step=\"5\"&gt;滑块网 页 type=\"range\" min：表示滑块底部的数值。 max：表示滑块顶端的数值。 step：表示每次拖动滑块改变的数值。 数字验证： &lt;input type=\"number\" name=\"number\" min=\"0\" max=\"100\" step=\"1\"&gt;数字 验证网页 min：表示最低数字。 max：表示最大数字。 step：表示每次增加时改变的数值。 &lt;label for=\"\"&gt;此处可任意填写&lt;/label&gt; 给其他标签添加id=\"\"属性，然后将id中的字符填入for=\"\",点击其产生的字符 可指向对应id的文本框。 初级验证 type=\"email\" 邮箱输入框，带有简单的邮箱格式验证。 type=\"url\" url连接输入框，带有简单的格式验证。 type=\"number\" &lt;input type=\"number\" name=\"num\" max=\"100\" min=\"1\" step=\"1\"&gt; pattern=\"正则表达式验证，使用正则表达式验证文本框填写是否正确\"&lt;/body&gt; 2020年06月06日 下午Guzhz","categories":[{"name":"学习类","slug":"学习类","permalink":"http://yoursite.com/categories/学习类/"}],"tags":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/tags/教程/"}]},{"title":"Github&Gitee使用教程","slug":"Github&Gitee使用教程","date":"2020-04-11T07:57:18.917Z","updated":"2020-05-12T16:35:35.153Z","comments":true,"path":"2020/04/11/Github&Gitee使用教程/","link":"","permalink":"http://yoursite.com/2020/04/11/Github&Gitee使用教程/","excerpt":"","text":"前言：注册GitHub有一段时间了，之前有按照教程操作过，不过后来一段时间不用又不熟练了。以至于后期突然使用时出现一些错误，导致本地文件一直提交不了。今天又熟悉了一次，这里做个笔记，以至于后面在忘记可以回顾一下。 一、操作前准备 Github环境搭建 配置共存Github/Gitee环境共存Github/Gitee环境，需要切换全局的 user.name 和 user.email git config –global –list（先查看变量）git config –global user.name “账户名” （再修改变量）git config –global user.email “邮箱” 二、Github/Gitee部署详细步骤【无仓库：新建远程仓库、初始化本地仓库、两者建立连接、添加并部署】 创建仓库，勾选上RENAME name -&gt; description -&gt; public -&gt; Init -&gt; create “+” -&gt; 介绍 -&gt; 使用Readme文件初始化这个仓库 -&gt; 创建 git init （初始化本地仓库） git add .（有空格） git status（可查看代码的状态） git commit -m “说明”（把文件提交的本地仓库） git remote add origin [url]（连接远程仓库，这个为新建的仓库地址） it pull –rebase origin master （本地仓库为空，远程仓库不为空，需要pull合并同步，这里–为“双杠”） git push origin master（部署） 【有本地仓库/克隆操作（已建立连接）：在仓库文件夹下进行以下操作】 改动文件后 ↓ git add . git status git commit -m “说明” git push origin master 三、常用命令 git status git add . git commit -m “说明” git push origin master git clone [url] git pull （拉去远程库更新本地库） 2020年4月11日 下午Guzhz","categories":[{"name":"技术类","slug":"技术类","permalink":"http://yoursite.com/categories/技术类/"}],"tags":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/tags/教程/"},{"name":"备份","slug":"备份","permalink":"http://yoursite.com/tags/备份/"}]},{"title":"Hexo的使用","slug":"Hexo的使用","date":"2020-04-10T16:23:09.371Z","updated":"2020-05-08T16:31:48.448Z","comments":true,"path":"2020/04/11/Hexo的使用/","link":"","permalink":"http://yoursite.com/2020/04/11/Hexo的使用/","excerpt":"","text":"前言：Hexo是一个主题框架，用于搭建博客，这里做个笔记，以至于后面忘记了可以回顾一下如何操作。 一、详细搭建参考 搭建参考一搭建参考二markdown语法参考主题推荐 二、域名的绑定与解绑绑定：免费一年的域名网 1、在myblog\\source（source目录下的文件为源文件)目录下新建CNAME(无后缀)2、把域名写进去即可，www加不加都行。 解绑： 1、只生效一次的解绑方法：直接删除github项目上的CNAME文件，但是更新后重新部署后又会生成2、永久解绑方法：删除主题source目录下的CNAME，删除/清空source目录下的CNAME文件后重新部署，setting里删除手动指定的域名。 三、我的博客详细分类操作步骤： 1. 在项目的根目录下（myblog) 2. 右键打开：Git Bash 3. 新文章 ：myblog\\source\\_posts 下编写md文件 hexo g (生成) hexo s (本地浏览) hexo d (部署到github) 博客一：VScode、有道云笔记 myblog → 主目录 myblog_bak → 主目录备份 Picture-bed → 图床仓库 博客二：有道云笔记编写，VScode编辑 虚拟机桌面的“blog”文件 已同步到坚果云 test = &gt; 测试仓库 blog\\source\\_posts =&gt; 源文件 blog\\themes\\diaspora\\source\\img =&gt; 图库(图床)，不需要额外的图床 source -&gt; MD File =&gt; md文件 2020年4月11日 凌晨Guzhz","categories":[{"name":"技术类","slug":"技术类","permalink":"http://yoursite.com/categories/技术类/"}],"tags":[{"name":"备份","slug":"备份","permalink":"http://yoursite.com/tags/备份/"}]},{"title":"一年了","slug":"一年了","date":"2020-02-24T15:07:07.900Z","updated":"2020-02-24T16:50:53.380Z","comments":true,"path":"2020/02/24/一年了/","link":"","permalink":"http://yoursite.com/2020/02/24/一年了/","excerpt":"","text":"时间飞逝，一眨眼，一年过去了。 好久没来，好久没写，其实心里一直想着，总要记录点什么，可是总是没能抽出时间过来。 有空再写吧，晚安。 Mood挺好的。 Weather晴天。 Date2020年2月24日 晚上 完结","categories":[{"name":"生活类","slug":"生活类","permalink":"http://yoursite.com/categories/生活类/"}],"tags":[{"name":"心情","slug":"心情","permalink":"http://yoursite.com/tags/心情/"}]},{"title":"优化","slug":"优化","date":"2019-03-27T09:35:01.408Z","updated":"2019-03-28T11:46:46.916Z","comments":true,"path":"2019/03/27/优化/","link":"","permalink":"http://yoursite.com/2019/03/27/优化/","excerpt":"","text":"更新 优化了界面 添加搜索功能 Mood还OK Weather晴天。 Date2019年3月28日 下午 完结","categories":[{"name":"生活类","slug":"生活类","permalink":"http://yoursite.com/categories/生活类/"}],"tags":[{"name":"心情","slug":"心情","permalink":"http://yoursite.com/tags/心情/"}]},{"title":"新玩意儿","slug":"新玩意儿","date":"2019-03-26T15:00:06.441Z","updated":"2020-02-24T16:51:23.874Z","comments":true,"path":"2019/03/26/新玩意儿/","link":"","permalink":"http://yoursite.com/2019/03/26/新玩意儿/","excerpt":"","text":"耗时三天，搭建了人生的，第一个网站，感觉还不错。(#^.^#) Mood从郁闷到舒畅。 Weather阴天。 Date2019年3月26日 晚上 完结","categories":[{"name":"生活类","slug":"生活类","permalink":"http://yoursite.com/categories/生活类/"}],"tags":[{"name":"心情","slug":"心情","permalink":"http://yoursite.com/tags/心情/"}]}]}